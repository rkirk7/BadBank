{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServerCapabilities = exports.Topology = void 0;\nconst connection_string_1 = require(\"../connection_string\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_logger_1 = require(\"../mongo_logger\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst read_preference_1 = require(\"../read_preference\");\nconst timeout_1 = require(\"../timeout\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst events_1 = require(\"./events\");\nconst server_1 = require(\"./server\");\nconst server_description_1 = require(\"./server_description\");\nconst server_selection_1 = require(\"./server_selection\");\nconst server_selection_events_1 = require(\"./server_selection_events\");\nconst srv_polling_1 = require(\"./srv_polling\");\nconst topology_description_1 = require(\"./topology_description\");\n// Global state\nlet globalTopologyCounter = 0;\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n  [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n  [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\nclass Topology extends mongo_types_1.TypedEventEmitter {\n  /**\n   * @param seedlist - a list of HostAddress instances to connect to\n   */\n  constructor(client, seeds, options) {\n    var _options, _options2;\n    super();\n    this.client = client;\n    // Options should only be undefined in tests, MongoClient will always have defined options\n    options = (_options = options) !== null && _options !== void 0 ? _options : {\n      hosts: [utils_1.HostAddress.fromString('localhost:27017')],\n      ...Object.fromEntries(connection_string_1.DEFAULT_OPTIONS.entries()),\n      ...Object.fromEntries(connection_string_1.FEATURE_FLAGS.entries())\n    };\n    if (typeof seeds === 'string') {\n      seeds = [utils_1.HostAddress.fromString(seeds)];\n    } else if (!Array.isArray(seeds)) {\n      seeds = [seeds];\n    }\n    const seedlist = [];\n    for (const seed of seeds) {\n      if (typeof seed === 'string') {\n        seedlist.push(utils_1.HostAddress.fromString(seed));\n      } else if (seed instanceof utils_1.HostAddress) {\n        seedlist.push(seed);\n      } else {\n        // FIXME(NODE-3483): May need to be a MongoParseError\n        throw new error_1.MongoRuntimeError(\"Topology cannot be constructed from \".concat(JSON.stringify(seed)));\n      }\n    }\n    const topologyType = topologyTypeFromOptions(options);\n    const topologyId = globalTopologyCounter++;\n    const selectedHosts = options.srvMaxHosts == null || options.srvMaxHosts === 0 || options.srvMaxHosts >= seedlist.length ? seedlist : (0, utils_1.shuffle)(seedlist, options.srvMaxHosts);\n    const serverDescriptions = new Map();\n    for (const hostAddress of selectedHosts) {\n      serverDescriptions.set(hostAddress.toString(), new server_description_1.ServerDescription(hostAddress));\n    }\n    this[kWaitQueue] = new utils_1.List();\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist,\n      // initial state\n      state: common_1.STATE_CLOSED,\n      // the topology description\n      description: new topology_description_1.TopologyDescription(topologyType, serverDescriptions, options.replicaSet, undefined, undefined, undefined, options),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      credentials: (_options2 = options) === null || _options2 === void 0 ? void 0 : _options2.credentials,\n      clusterTime: undefined,\n      // timer management\n      connectionTimers: new Set(),\n      detectShardedTopology: ev => this.detectShardedTopology(ev),\n      detectSrvRecords: ev => this.detectSrvRecords(ev)\n    };\n    this.mongoLogger = client.mongoLogger;\n    this.component = 'topology';\n    if (options.srvHost && !options.loadBalanced) {\n      var _options$srvPoller;\n      this.s.srvPoller = (_options$srvPoller = options.srvPoller) !== null && _options$srvPoller !== void 0 ? _options$srvPoller : new srv_polling_1.SrvPoller({\n        heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n        srvHost: options.srvHost,\n        srvMaxHosts: options.srvMaxHosts,\n        srvServiceName: options.srvServiceName\n      });\n      this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n    }\n    this.connectionLock = undefined;\n  }\n  detectShardedTopology(event) {\n    var _this$s$srvPoller;\n    const previousType = event.previousDescription.type;\n    const newType = event.newDescription.type;\n    const transitionToSharded = previousType !== common_1.TopologyType.Sharded && newType === common_1.TopologyType.Sharded;\n    const srvListeners = (_this$s$srvPoller = this.s.srvPoller) === null || _this$s$srvPoller === void 0 ? void 0 : _this$s$srvPoller.listeners(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY);\n    const listeningToSrvPolling = !!(srvListeners !== null && srvListeners !== void 0 && srvListeners.includes(this.s.detectSrvRecords));\n    if (transitionToSharded && !listeningToSrvPolling) {\n      var _this$s$srvPoller2, _this$s$srvPoller3;\n      (_this$s$srvPoller2 = this.s.srvPoller) === null || _this$s$srvPoller2 === void 0 || _this$s$srvPoller2.on(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n      (_this$s$srvPoller3 = this.s.srvPoller) === null || _this$s$srvPoller3 === void 0 || _this$s$srvPoller3.start();\n    }\n  }\n  detectSrvRecords(ev) {\n    const previousTopologyDescription = this.s.description;\n    this.s.description = this.s.description.updateFromSrvPollingEvent(ev, this.s.options.srvMaxHosts);\n    if (this.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n    updateServers(this);\n    this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n  }\n  /**\n   * @returns A `TopologyDescription` for this topology\n   */\n  get description() {\n    return this.s.description;\n  }\n  get loadBalanced() {\n    return this.s.options.loadBalanced;\n  }\n  get serverApi() {\n    return this.s.options.serverApi;\n  }\n  get capabilities() {\n    return new ServerCapabilities(this.lastHello());\n  }\n  /** Initiate server connect */\n  async connect(options) {\n    var _this$connectionLock;\n    (_this$connectionLock = this.connectionLock) !== null && _this$connectionLock !== void 0 ? _this$connectionLock : this.connectionLock = this._connect(options);\n    try {\n      await this.connectionLock;\n      return this;\n    } finally {\n      this.connectionLock = undefined;\n    }\n    return this;\n  }\n  async _connect(options) {\n    var _options3, _options$readPreferen;\n    options = (_options3 = options) !== null && _options3 !== void 0 ? _options3 : {};\n    if (this.s.state === common_1.STATE_CONNECTED) {\n      return this;\n    }\n    stateTransition(this, common_1.STATE_CONNECTING);\n    // emit SDAM monitoring events\n    this.emitAndLog(Topology.TOPOLOGY_OPENING, new events_1.TopologyOpeningEvent(this.s.id));\n    // emit an event for the topology change\n    this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, new topology_description_1.TopologyDescription(common_1.TopologyType.Unknown),\n    // initial is always Unknown\n    this.s.description));\n    // connect all known servers, then attempt server selection to connect\n    const serverDescriptions = Array.from(this.s.description.servers.values());\n    this.s.servers = new Map(serverDescriptions.map(serverDescription => [serverDescription.address, createAndConnectServer(this, serverDescription)]));\n    // In load balancer mode we need to fake a server description getting\n    // emitted from the monitor, since the monitor doesn't exist.\n    if (this.s.options.loadBalanced) {\n      for (const description of serverDescriptions) {\n        const newDescription = new server_description_1.ServerDescription(description.hostAddress, undefined, {\n          loadBalanced: this.s.options.loadBalanced\n        });\n        this.serverUpdateHandler(newDescription);\n      }\n    }\n    const readPreference = (_options$readPreferen = options.readPreference) !== null && _options$readPreferen !== void 0 ? _options$readPreferen : read_preference_1.ReadPreference.primary;\n    const selectServerOptions = {\n      operationName: 'ping',\n      ...options\n    };\n    try {\n      const server = await this.selectServer((0, server_selection_1.readPreferenceServerSelector)(readPreference), selectServerOptions);\n      const skipPingOnConnect = this.s.options[Symbol.for('@@mdb.skipPingOnConnect')] === true;\n      if (!skipPingOnConnect && server && this.s.credentials) {\n        await server.command((0, utils_1.ns)('admin.$cmd'), {\n          ping: 1\n        }, {});\n        stateTransition(this, common_1.STATE_CONNECTED);\n        this.emit(Topology.OPEN, this);\n        this.emit(Topology.CONNECT, this);\n        return this;\n      }\n      stateTransition(this, common_1.STATE_CONNECTED);\n      this.emit(Topology.OPEN, this);\n      this.emit(Topology.CONNECT, this);\n      return this;\n    } catch (error) {\n      this.close();\n      throw error;\n    }\n  }\n  /** Close this topology */\n  close() {\n    if (this.s.state === common_1.STATE_CLOSED || this.s.state === common_1.STATE_CLOSING) {\n      return;\n    }\n    for (const server of this.s.servers.values()) {\n      destroyServer(server, this);\n    }\n    this.s.servers.clear();\n    stateTransition(this, common_1.STATE_CLOSING);\n    drainWaitQueue(this[kWaitQueue], new error_1.MongoTopologyClosedError());\n    (0, common_1.drainTimerQueue)(this.s.connectionTimers);\n    if (this.s.srvPoller) {\n      this.s.srvPoller.stop();\n      this.s.srvPoller.removeListener(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n    }\n    this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n    stateTransition(this, common_1.STATE_CLOSED);\n    // emit an event for close\n    this.emitAndLog(Topology.TOPOLOGY_CLOSED, new events_1.TopologyClosedEvent(this.s.id));\n  }\n  /**\n   * Selects a server according to the selection predicate provided\n   *\n   * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\n   * @param options - Optional settings related to server selection\n   * @param callback - The callback used to indicate success or failure\n   * @returns An instance of a `Server` meeting the criteria of the predicate provided\n   */\n  async selectServer(selector, options) {\n    var _this$client$mongoLog, _options$serverSelect;\n    let serverSelector;\n    if (typeof selector !== 'function') {\n      if (typeof selector === 'string') {\n        serverSelector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.fromString(selector));\n      } else {\n        let readPreference;\n        if (selector instanceof read_preference_1.ReadPreference) {\n          readPreference = selector;\n        } else {\n          read_preference_1.ReadPreference.translate(options);\n          readPreference = options.readPreference || read_preference_1.ReadPreference.primary;\n        }\n        serverSelector = (0, server_selection_1.readPreferenceServerSelector)(readPreference);\n      }\n    } else {\n      serverSelector = selector;\n    }\n    options = {\n      serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS,\n      ...options\n    };\n    if ((_this$client$mongoLog = this.client.mongoLogger) !== null && _this$client$mongoLog !== void 0 && _this$client$mongoLog.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n      var _this$client$mongoLog2;\n      (_this$client$mongoLog2 = this.client.mongoLogger) === null || _this$client$mongoLog2 === void 0 || _this$client$mongoLog2.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionStartedEvent(selector, this.description, options.operationName));\n    }\n    const isSharded = this.description.type === common_1.TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n    if (isSharded && transaction && transaction.server) {\n      var _this$client$mongoLog3;\n      if ((_this$client$mongoLog3 = this.client.mongoLogger) !== null && _this$client$mongoLog3 !== void 0 && _this$client$mongoLog3.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n        var _this$client$mongoLog4;\n        (_this$client$mongoLog4 = this.client.mongoLogger) === null || _this$client$mongoLog4 === void 0 || _this$client$mongoLog4.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionSucceededEvent(selector, this.description, transaction.server.pool.address, options.operationName));\n      }\n      return transaction.server;\n    }\n    const {\n      promise: serverPromise,\n      resolve,\n      reject\n    } = (0, utils_1.promiseWithResolvers)();\n    const timeout = timeout_1.Timeout.expires((_options$serverSelect = options.serverSelectionTimeoutMS) !== null && _options$serverSelect !== void 0 ? _options$serverSelect : 0);\n    const waitQueueMember = {\n      serverSelector,\n      topologyDescription: this.description,\n      mongoLogger: this.client.mongoLogger,\n      transaction,\n      resolve,\n      reject,\n      timeout,\n      startTime: (0, utils_1.now)(),\n      operationName: options.operationName,\n      waitingLogged: false,\n      previousServer: options.previousServer\n    };\n    this[kWaitQueue].push(waitQueueMember);\n    processWaitQueue(this);\n    try {\n      return await Promise.race([serverPromise, waitQueueMember.timeout]);\n    } catch (error) {\n      if (timeout_1.TimeoutError.is(error)) {\n        var _this$client$mongoLog5;\n        // Timeout\n        waitQueueMember[kCancelled] = true;\n        timeout.clear();\n        const timeoutError = new error_1.MongoServerSelectionError(\"Server selection timed out after \".concat(options.serverSelectionTimeoutMS, \" ms\"), this.description);\n        if ((_this$client$mongoLog5 = this.client.mongoLogger) !== null && _this$client$mongoLog5 !== void 0 && _this$client$mongoLog5.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n          var _this$client$mongoLog6;\n          (_this$client$mongoLog6 = this.client.mongoLogger) === null || _this$client$mongoLog6 === void 0 || _this$client$mongoLog6.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(selector, this.description, timeoutError, options.operationName));\n        }\n        throw timeoutError;\n      }\n      // Other server selection error\n      throw error;\n    }\n  }\n  /**\n   * Update the internal TopologyDescription with a ServerDescription\n   *\n   * @param serverDescription - The server to update in the internal list of server descriptions\n   */\n  serverUpdateHandler(serverDescription) {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    }\n    // ignore this server update if its from an outdated topologyVersion\n    if (isStaleServerDescription(this.s.description, serverDescription)) {\n      return;\n    }\n    // these will be used for monitoring events later\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n    if (!previousServerDescription) {\n      return;\n    }\n    // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n    const clusterTime = serverDescription.$clusterTime;\n    if (clusterTime) {\n      (0, common_1._advanceClusterTime)(this, clusterTime);\n    }\n    // If we already know all the information contained in this updated description, then\n    // we don't need to emit SDAM events, but still need to update the description, in order\n    // to keep client-tracked attributes like last update time and round trip time up to date\n    const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription);\n    // first update the TopologyDescription\n    this.s.description = this.s.description.update(serverDescription);\n    if (this.s.description.compatibilityError) {\n      this.emit(Topology.ERROR, new error_1.MongoCompatibilityError(this.s.description.compatibilityError));\n      return;\n    }\n    // emit monitoring events for this change\n    if (!equalDescriptions) {\n      const newDescription = this.s.description.servers.get(serverDescription.address);\n      if (newDescription) {\n        this.emit(Topology.SERVER_DESCRIPTION_CHANGED, new events_1.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, newDescription));\n      }\n    }\n    // update server list from updated descriptions\n    updateServers(this, serverDescription);\n    // attempt to resolve any outstanding server selection attempts\n    if (this[kWaitQueue].length > 0) {\n      processWaitQueue(this);\n    }\n    if (!equalDescriptions) {\n      this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n    }\n  }\n  auth(credentials, callback) {\n    if (typeof credentials === 'function') callback = credentials, credentials = undefined;\n    if (typeof callback === 'function') callback(undefined, true);\n  }\n  get clientMetadata() {\n    return this.s.options.metadata;\n  }\n  isConnected() {\n    return this.s.state === common_1.STATE_CONNECTED;\n  }\n  isDestroyed() {\n    return this.s.state === common_1.STATE_CLOSED;\n  }\n  // NOTE: There are many places in code where we explicitly check the last hello\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first hello seen, which should suffice.\n  lastHello() {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n    const sd = serverDescriptions.filter(sd => sd.type !== common_1.ServerType.Unknown)[0];\n    const result = sd || {\n      maxWireVersion: this.description.commonWireVersion\n    };\n    return result;\n  }\n  get commonWireVersion() {\n    return this.description.commonWireVersion;\n  }\n  get logicalSessionTimeoutMinutes() {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n  get clusterTime() {\n    return this.s.clusterTime;\n  }\n  set clusterTime(clusterTime) {\n    this.s.clusterTime = clusterTime;\n  }\n}\n/** @event */\nTopology.SERVER_OPENING = constants_1.SERVER_OPENING;\n/** @event */\nTopology.SERVER_CLOSED = constants_1.SERVER_CLOSED;\n/** @event */\nTopology.SERVER_DESCRIPTION_CHANGED = constants_1.SERVER_DESCRIPTION_CHANGED;\n/** @event */\nTopology.TOPOLOGY_OPENING = constants_1.TOPOLOGY_OPENING;\n/** @event */\nTopology.TOPOLOGY_CLOSED = constants_1.TOPOLOGY_CLOSED;\n/** @event */\nTopology.TOPOLOGY_DESCRIPTION_CHANGED = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;\n/** @event */\nTopology.ERROR = constants_1.ERROR;\n/** @event */\nTopology.OPEN = constants_1.OPEN;\n/** @event */\nTopology.CONNECT = constants_1.CONNECT;\n/** @event */\nTopology.CLOSE = constants_1.CLOSE;\n/** @event */\nTopology.TIMEOUT = constants_1.TIMEOUT;\nexports.Topology = Topology;\n/** Destroys a server, and removes all event listeners from the instance */\nfunction destroyServer(server, topology) {\n  for (const event of constants_1.LOCAL_SERVER_EVENTS) {\n    server.removeAllListeners(event);\n  }\n  server.destroy();\n  topology.emitAndLog(Topology.SERVER_CLOSED, new events_1.ServerClosedEvent(topology.s.id, server.description.address));\n  for (const event of constants_1.SERVER_RELAY_EVENTS) {\n    server.removeAllListeners(event);\n  }\n}\n/** Predicts the TopologyType from options */\nfunction topologyTypeFromOptions(options) {\n  if (options !== null && options !== void 0 && options.directConnection) {\n    return common_1.TopologyType.Single;\n  }\n  if (options !== null && options !== void 0 && options.replicaSet) {\n    return common_1.TopologyType.ReplicaSetNoPrimary;\n  }\n  if (options !== null && options !== void 0 && options.loadBalanced) {\n    return common_1.TopologyType.LoadBalanced;\n  }\n  return common_1.TopologyType.Unknown;\n}\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n */\nfunction createAndConnectServer(topology, serverDescription) {\n  topology.emitAndLog(Topology.SERVER_OPENING, new events_1.ServerOpeningEvent(topology.s.id, serverDescription.address));\n  const server = new server_1.Server(topology, serverDescription, topology.s.options);\n  for (const event of constants_1.SERVER_RELAY_EVENTS) {\n    server.on(event, e => topology.emit(event, e));\n  }\n  server.on(server_1.Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n  server.connect();\n  return server;\n}\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\nfunction updateServers(topology, incomingServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n    if (server) {\n      server.s.description = incomingServerDescription;\n      if (incomingServerDescription.error instanceof error_1.MongoError && incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.ResetPool)) {\n        const interruptInUseConnections = incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n        server.pool.clear({\n          interruptInUseConnections\n        });\n      } else if (incomingServerDescription.error == null) {\n        const newTopologyType = topology.s.description.type;\n        const shouldMarkPoolReady = incomingServerDescription.isDataBearing || incomingServerDescription.type !== common_1.ServerType.Unknown && newTopologyType === common_1.TopologyType.Single;\n        if (shouldMarkPoolReady) {\n          server.pool.ready();\n        }\n      }\n    }\n  }\n  // add new servers for all descriptions we currently don't know about locally\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  }\n  // for all servers no longer known, remove their descriptions and destroy their instances\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n    if (!topology.s.servers.has(serverAddress)) {\n      continue;\n    }\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress);\n    // prepare server for garbage collection\n    if (server) {\n      destroyServer(server, topology);\n    }\n  }\n}\nfunction drainWaitQueue(queue, drainError) {\n  while (queue.length) {\n    const waitQueueMember = queue.shift();\n    if (!waitQueueMember) {\n      continue;\n    }\n    waitQueueMember.timeout.clear();\n    if (!waitQueueMember[kCancelled]) {\n      var _waitQueueMember$mong;\n      if ((_waitQueueMember$mong = waitQueueMember.mongoLogger) !== null && _waitQueueMember$mong !== void 0 && _waitQueueMember$mong.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n        var _waitQueueMember$mong2;\n        (_waitQueueMember$mong2 = waitQueueMember.mongoLogger) === null || _waitQueueMember$mong2 === void 0 || _waitQueueMember$mong2.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, waitQueueMember.topologyDescription, drainError, waitQueueMember.operationName));\n      }\n      waitQueueMember.reject(drainError);\n    }\n  }\n}\nfunction processWaitQueue(topology) {\n  if (topology.s.state === common_1.STATE_CLOSED) {\n    drainWaitQueue(topology[kWaitQueue], new error_1.MongoTopologyClosedError());\n    return;\n  }\n  const isSharded = topology.description.type === common_1.TopologyType.Sharded;\n  const serverDescriptions = Array.from(topology.description.servers.values());\n  const membersToProcess = topology[kWaitQueue].length;\n  for (let i = 0; i < membersToProcess; ++i) {\n    var _topology$client$mong7;\n    const waitQueueMember = topology[kWaitQueue].shift();\n    if (!waitQueueMember) {\n      continue;\n    }\n    if (waitQueueMember[kCancelled]) {\n      continue;\n    }\n    let selectedDescriptions;\n    try {\n      const serverSelector = waitQueueMember.serverSelector;\n      const previousServer = waitQueueMember.previousServer;\n      selectedDescriptions = serverSelector ? serverSelector(topology.description, serverDescriptions, previousServer ? [previousServer] : []) : serverDescriptions;\n    } catch (selectorError) {\n      var _topology$client$mong;\n      waitQueueMember.timeout.clear();\n      if ((_topology$client$mong = topology.client.mongoLogger) !== null && _topology$client$mong !== void 0 && _topology$client$mong.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n        var _topology$client$mong2;\n        (_topology$client$mong2 = topology.client.mongoLogger) === null || _topology$client$mong2 === void 0 || _topology$client$mong2.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, topology.description, selectorError, waitQueueMember.operationName));\n      }\n      waitQueueMember.reject(selectorError);\n      continue;\n    }\n    let selectedServer;\n    if (selectedDescriptions.length === 0) {\n      if (!waitQueueMember.waitingLogged) {\n        var _topology$client$mong3;\n        if ((_topology$client$mong3 = topology.client.mongoLogger) !== null && _topology$client$mong3 !== void 0 && _topology$client$mong3.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.INFORMATIONAL)) {\n          var _topology$client$mong4;\n          (_topology$client$mong4 = topology.client.mongoLogger) === null || _topology$client$mong4 === void 0 || _topology$client$mong4.info(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.WaitingForSuitableServerEvent(waitQueueMember.serverSelector, topology.description, topology.s.serverSelectionTimeoutMS !== 0 ? topology.s.serverSelectionTimeoutMS - ((0, utils_1.now)() - waitQueueMember.startTime) : -1, waitQueueMember.operationName));\n        }\n        waitQueueMember.waitingLogged = true;\n      }\n      topology[kWaitQueue].push(waitQueueMember);\n      continue;\n    } else if (selectedDescriptions.length === 1) {\n      selectedServer = topology.s.servers.get(selectedDescriptions[0].address);\n    } else {\n      const descriptions = (0, utils_1.shuffle)(selectedDescriptions, 2);\n      const server1 = topology.s.servers.get(descriptions[0].address);\n      const server2 = topology.s.servers.get(descriptions[1].address);\n      selectedServer = server1 && server2 && server1.s.operationCount < server2.s.operationCount ? server1 : server2;\n    }\n    if (!selectedServer) {\n      var _topology$client$mong5;\n      const serverSelectionError = new error_1.MongoServerSelectionError('server selection returned a server description but the server was not found in the topology', topology.description);\n      if ((_topology$client$mong5 = topology.client.mongoLogger) !== null && _topology$client$mong5 !== void 0 && _topology$client$mong5.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n        var _topology$client$mong6;\n        (_topology$client$mong6 = topology.client.mongoLogger) === null || _topology$client$mong6 === void 0 || _topology$client$mong6.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, topology.description, serverSelectionError, waitQueueMember.operationName));\n      }\n      waitQueueMember.reject(serverSelectionError);\n      return;\n    }\n    const transaction = waitQueueMember.transaction;\n    if (isSharded && transaction && transaction.isActive && selectedServer) {\n      transaction.pinServer(selectedServer);\n    }\n    waitQueueMember.timeout.clear();\n    if ((_topology$client$mong7 = topology.client.mongoLogger) !== null && _topology$client$mong7 !== void 0 && _topology$client$mong7.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n      var _topology$client$mong8;\n      (_topology$client$mong8 = topology.client.mongoLogger) === null || _topology$client$mong8 === void 0 || _topology$client$mong8.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionSucceededEvent(waitQueueMember.serverSelector, waitQueueMember.topologyDescription, selectedServer.pool.address, waitQueueMember.operationName));\n    }\n    waitQueueMember.resolve(selectedServer);\n  }\n  if (topology[kWaitQueue].length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    for (const [, server] of topology.s.servers) {\n      process.nextTick(function scheduleServerCheck() {\n        return server.requestCheck();\n      });\n    }\n  }\n}\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n  const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);\n  const currentTopologyVersion = currentServerDescription === null || currentServerDescription === void 0 ? void 0 : currentServerDescription.topologyVersion;\n  return (0, server_description_1.compareTopologyVersion)(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0;\n}\n/** @public */\nclass ServerCapabilities {\n  constructor(hello) {\n    this.minWireVersion = hello.minWireVersion || 0;\n    this.maxWireVersion = hello.maxWireVersion || 0;\n  }\n  get hasAggregationCursor() {\n    return this.maxWireVersion >= 1;\n  }\n  get hasWriteCommands() {\n    return this.maxWireVersion >= 2;\n  }\n  get hasTextSearch() {\n    return this.minWireVersion >= 0;\n  }\n  get hasAuthCommands() {\n    return this.maxWireVersion >= 1;\n  }\n  get hasListCollectionsCommand() {\n    return this.maxWireVersion >= 3;\n  }\n  get hasListIndexesCommand() {\n    return this.maxWireVersion >= 3;\n  }\n  get supportsSnapshotReads() {\n    return this.maxWireVersion >= 13;\n  }\n  get commandsTakeWriteConcern() {\n    return this.maxWireVersion >= 5;\n  }\n  get commandsTakeCollation() {\n    return this.maxWireVersion >= 5;\n  }\n}\nexports.ServerCapabilities = ServerCapabilities;","map":{"version":3,"names":["connection_string_1","require","constants_1","error_1","mongo_logger_1","mongo_types_1","read_preference_1","timeout_1","utils_1","common_1","events_1","server_1","server_description_1","server_selection_1","server_selection_events_1","srv_polling_1","topology_description_1","globalTopologyCounter","stateTransition","makeStateMachine","STATE_CLOSED","STATE_CONNECTING","STATE_CLOSING","STATE_CONNECTED","kCancelled","Symbol","kWaitQueue","Topology","TypedEventEmitter","constructor","client","seeds","options","_options","_options2","hosts","HostAddress","fromString","Object","fromEntries","DEFAULT_OPTIONS","entries","FEATURE_FLAGS","Array","isArray","seedlist","seed","push","MongoRuntimeError","concat","JSON","stringify","topologyType","topologyTypeFromOptions","topologyId","selectedHosts","srvMaxHosts","length","shuffle","serverDescriptions","Map","hostAddress","set","toString","ServerDescription","List","s","id","state","description","TopologyDescription","replicaSet","undefined","serverSelectionTimeoutMS","heartbeatFrequencyMS","minHeartbeatFrequencyMS","servers","credentials","clusterTime","connectionTimers","Set","detectShardedTopology","ev","detectSrvRecords","mongoLogger","component","srvHost","loadBalanced","_options$srvPoller","srvPoller","SrvPoller","srvServiceName","on","TOPOLOGY_DESCRIPTION_CHANGED","connectionLock","event","_this$s$srvPoller","previousType","previousDescription","type","newType","newDescription","transitionToSharded","TopologyType","Sharded","srvListeners","listeners","SRV_RECORD_DISCOVERY","listeningToSrvPolling","includes","_this$s$srvPoller2","_this$s$srvPoller3","start","previousTopologyDescription","updateFromSrvPollingEvent","updateServers","emitAndLog","TopologyDescriptionChangedEvent","serverApi","capabilities","ServerCapabilities","lastHello","connect","_this$connectionLock","_connect","_options3","_options$readPreferen","TOPOLOGY_OPENING","TopologyOpeningEvent","Unknown","from","values","map","serverDescription","address","createAndConnectServer","serverUpdateHandler","readPreference","ReadPreference","primary","selectServerOptions","operationName","server","selectServer","readPreferenceServerSelector","skipPingOnConnect","for","command","ns","ping","emit","OPEN","CONNECT","error","close","destroyServer","clear","drainWaitQueue","MongoTopologyClosedError","drainTimerQueue","stop","removeListener","TOPOLOGY_CLOSED","TopologyClosedEvent","selector","_this$client$mongoLog","_options$serverSelect","serverSelector","translate","willLog","MongoLoggableComponent","SERVER_SELECTION","SeverityLevel","DEBUG","_this$client$mongoLog2","debug","ServerSelectionStartedEvent","isSharded","session","transaction","_this$client$mongoLog3","_this$client$mongoLog4","ServerSelectionSucceededEvent","pool","promise","serverPromise","resolve","reject","promiseWithResolvers","timeout","Timeout","expires","waitQueueMember","topologyDescription","startTime","now","waitingLogged","previousServer","processWaitQueue","Promise","race","TimeoutError","is","_this$client$mongoLog5","timeoutError","MongoServerSelectionError","_this$client$mongoLog6","ServerSelectionFailedEvent","hasServer","isStaleServerDescription","previousServerDescription","get","$clusterTime","_advanceClusterTime","equalDescriptions","equals","update","compatibilityError","ERROR","MongoCompatibilityError","SERVER_DESCRIPTION_CHANGED","ServerDescriptionChangedEvent","auth","callback","clientMetadata","metadata","isConnected","isDestroyed","sd","filter","ServerType","result","maxWireVersion","commonWireVersion","logicalSessionTimeoutMinutes","SERVER_OPENING","SERVER_CLOSED","CLOSE","TIMEOUT","exports","topology","LOCAL_SERVER_EVENTS","removeAllListeners","destroy","ServerClosedEvent","SERVER_RELAY_EVENTS","directConnection","Single","ReplicaSetNoPrimary","LoadBalanced","ServerOpeningEvent","Server","e","DESCRIPTION_RECEIVED","incomingServerDescription","has","MongoError","hasErrorLabel","MongoErrorLabel","ResetPool","interruptInUseConnections","InterruptInUseConnections","newTopologyType","shouldMarkPoolReady","isDataBearing","ready","entry","serverAddress","delete","queue","drainError","shift","_waitQueueMember$mong","_waitQueueMember$mong2","membersToProcess","i","_topology$client$mong7","selectedDescriptions","selectorError","_topology$client$mong","_topology$client$mong2","selectedServer","_topology$client$mong3","INFORMATIONAL","_topology$client$mong4","info","WaitingForSuitableServerEvent","descriptions","server1","server2","operationCount","_topology$client$mong5","serverSelectionError","_topology$client$mong6","isActive","pinServer","_topology$client$mong8","process","nextTick","scheduleServerCheck","requestCheck","currentServerDescription","currentTopologyVersion","topologyVersion","compareTopologyVersion","hello","minWireVersion","hasAggregationCursor","hasWriteCommands","hasTextSearch","hasAuthCommands","hasListCollectionsCommand","hasListIndexesCommand","supportsSnapshotReads","commandsTakeWriteConcern","commandsTakeCollation"],"sources":["/Users/Regan/Documents/GitHub/BadBank/node_modules/mongodb/src/sdam/topology.ts"],"sourcesContent":["import type { BSONSerializeOptions, Document } from '../bson';\nimport type { MongoCredentials } from '../cmap/auth/mongo_credentials';\nimport type { ConnectionEvents } from '../cmap/connection';\nimport type { ConnectionPoolEvents } from '../cmap/connection_pool';\nimport type { ClientMetadata } from '../cmap/handshake/client_metadata';\nimport { DEFAULT_OPTIONS, FEATURE_FLAGS } from '../connection_string';\nimport {\n  CLOSE,\n  CONNECT,\n  ERROR,\n  LOCAL_SERVER_EVENTS,\n  OPEN,\n  SERVER_CLOSED,\n  SERVER_DESCRIPTION_CHANGED,\n  SERVER_OPENING,\n  SERVER_RELAY_EVENTS,\n  TIMEOUT,\n  TOPOLOGY_CLOSED,\n  TOPOLOGY_DESCRIPTION_CHANGED,\n  TOPOLOGY_OPENING\n} from '../constants';\nimport {\n  MongoCompatibilityError,\n  type MongoDriverError,\n  MongoError,\n  MongoErrorLabel,\n  MongoRuntimeError,\n  MongoServerSelectionError,\n  MongoTopologyClosedError\n} from '../error';\nimport type { MongoClient, ServerApi } from '../mongo_client';\nimport { MongoLoggableComponent, type MongoLogger, SeverityLevel } from '../mongo_logger';\nimport { TypedEventEmitter } from '../mongo_types';\nimport { ReadPreference, type ReadPreferenceLike } from '../read_preference';\nimport type { ClientSession } from '../sessions';\nimport { Timeout, TimeoutError } from '../timeout';\nimport type { Transaction } from '../transactions';\nimport {\n  type Callback,\n  type EventEmitterWithState,\n  HostAddress,\n  List,\n  makeStateMachine,\n  now,\n  ns,\n  promiseWithResolvers,\n  shuffle\n} from '../utils';\nimport {\n  _advanceClusterTime,\n  type ClusterTime,\n  drainTimerQueue,\n  ServerType,\n  STATE_CLOSED,\n  STATE_CLOSING,\n  STATE_CONNECTED,\n  STATE_CONNECTING,\n  type TimerQueue,\n  TopologyType\n} from './common';\nimport {\n  ServerClosedEvent,\n  ServerDescriptionChangedEvent,\n  ServerOpeningEvent,\n  TopologyClosedEvent,\n  TopologyDescriptionChangedEvent,\n  TopologyOpeningEvent\n} from './events';\nimport type { ServerMonitoringMode } from './monitor';\nimport { Server, type ServerEvents, type ServerOptions } from './server';\nimport { compareTopologyVersion, ServerDescription } from './server_description';\nimport { readPreferenceServerSelector, type ServerSelector } from './server_selection';\nimport {\n  ServerSelectionFailedEvent,\n  ServerSelectionStartedEvent,\n  ServerSelectionSucceededEvent,\n  WaitingForSuitableServerEvent\n} from './server_selection_events';\nimport { SrvPoller, type SrvPollingEvent } from './srv_polling';\nimport { TopologyDescription } from './topology_description';\n\n// Global state\nlet globalTopologyCounter = 0;\n\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\n});\n\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n\n/** @internal */\nexport type ServerSelectionCallback = Callback<Server>;\n\n/** @internal */\nexport interface ServerSelectionRequest {\n  serverSelector: ServerSelector;\n  topologyDescription: TopologyDescription;\n  mongoLogger: MongoLogger | undefined;\n  transaction?: Transaction;\n  startTime: number;\n  resolve: (server: Server) => void;\n  reject: (error: MongoError) => void;\n  [kCancelled]?: boolean;\n  timeout: Timeout;\n  operationName: string;\n  waitingLogged: boolean;\n  previousServer?: ServerDescription;\n}\n\n/** @internal */\nexport interface TopologyPrivate {\n  /** the id of this topology */\n  id: number;\n  /** passed in options */\n  options: TopologyOptions;\n  /** initial seedlist of servers to connect to */\n  seedlist: HostAddress[];\n  /** initial state */\n  state: string;\n  /** the topology description */\n  description: TopologyDescription;\n  serverSelectionTimeoutMS: number;\n  heartbeatFrequencyMS: number;\n  minHeartbeatFrequencyMS: number;\n  /** A map of server instances to normalized addresses */\n  servers: Map<string, Server>;\n  credentials?: MongoCredentials;\n  clusterTime?: ClusterTime;\n  /** timers created for the initial connect to a server */\n  connectionTimers: TimerQueue;\n\n  /** related to srv polling */\n  srvPoller?: SrvPoller;\n  detectShardedTopology: (event: TopologyDescriptionChangedEvent) => void;\n  detectSrvRecords: (event: SrvPollingEvent) => void;\n}\n\n/** @internal */\nexport interface TopologyOptions extends BSONSerializeOptions, ServerOptions {\n  srvMaxHosts: number;\n  srvServiceName: string;\n  hosts: HostAddress[];\n  retryWrites: boolean;\n  retryReads: boolean;\n  /** How long to block for server selection before throwing an error */\n  serverSelectionTimeoutMS: number;\n  /** The name of the replica set to connect to */\n  replicaSet?: string;\n  srvHost?: string;\n  srvPoller?: SrvPoller;\n  /** Indicates that a client should directly connect to a node without attempting to discover its topology type */\n  directConnection: boolean;\n  loadBalanced: boolean;\n  metadata: ClientMetadata;\n  extendedMetadata: Promise<Document>;\n  serverMonitoringMode: ServerMonitoringMode;\n  /** MongoDB server API version */\n  serverApi?: ServerApi;\n  [featureFlag: symbol]: any;\n}\n\n/** @public */\nexport interface ConnectOptions {\n  readPreference?: ReadPreference;\n}\n\n/** @public */\nexport interface SelectServerOptions {\n  readPreference?: ReadPreferenceLike;\n  /** How long to block for server selection before throwing an error */\n  serverSelectionTimeoutMS?: number;\n  session?: ClientSession;\n  operationName: string;\n  previousServer?: ServerDescription;\n  /** @internal*/\n  timeout?: Timeout;\n}\n\n/** @public */\nexport type TopologyEvents = {\n  /** Top level MongoClient doesn't emit this so it is marked: @internal */\n  connect(topology: Topology): void;\n  serverOpening(event: ServerOpeningEvent): void;\n  serverClosed(event: ServerClosedEvent): void;\n  serverDescriptionChanged(event: ServerDescriptionChangedEvent): void;\n  topologyClosed(event: TopologyClosedEvent): void;\n  topologyOpening(event: TopologyOpeningEvent): void;\n  topologyDescriptionChanged(event: TopologyDescriptionChangedEvent): void;\n  error(error: Error): void;\n  /** @internal */\n  open(topology: Topology): void;\n  close(): void;\n  timeout(): void;\n} & Omit<ServerEvents, 'connect'> &\n  ConnectionPoolEvents &\n  ConnectionEvents &\n  EventEmitterWithState;\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\nexport class Topology extends TypedEventEmitter<TopologyEvents> {\n  /** @internal */\n  s: TopologyPrivate;\n  /** @internal */\n  [kWaitQueue]: List<ServerSelectionRequest>;\n  /** @internal */\n  hello?: Document;\n  /** @internal */\n  _type?: string;\n\n  client!: MongoClient;\n\n  /** @internal */\n  private connectionLock?: Promise<Topology>;\n\n  /** @event */\n  static readonly SERVER_OPENING = SERVER_OPENING;\n  /** @event */\n  static readonly SERVER_CLOSED = SERVER_CLOSED;\n  /** @event */\n  static readonly SERVER_DESCRIPTION_CHANGED = SERVER_DESCRIPTION_CHANGED;\n  /** @event */\n  static readonly TOPOLOGY_OPENING = TOPOLOGY_OPENING;\n  /** @event */\n  static readonly TOPOLOGY_CLOSED = TOPOLOGY_CLOSED;\n  /** @event */\n  static readonly TOPOLOGY_DESCRIPTION_CHANGED = TOPOLOGY_DESCRIPTION_CHANGED;\n  /** @event */\n  static readonly ERROR = ERROR;\n  /** @event */\n  static readonly OPEN = OPEN;\n  /** @event */\n  static readonly CONNECT = CONNECT;\n  /** @event */\n  static readonly CLOSE = CLOSE;\n  /** @event */\n  static readonly TIMEOUT = TIMEOUT;\n\n  /**\n   * @param seedlist - a list of HostAddress instances to connect to\n   */\n  constructor(\n    client: MongoClient,\n    seeds: string | string[] | HostAddress | HostAddress[],\n    options: TopologyOptions\n  ) {\n    super();\n\n    this.client = client;\n    // Options should only be undefined in tests, MongoClient will always have defined options\n    options = options ?? {\n      hosts: [HostAddress.fromString('localhost:27017')],\n      ...Object.fromEntries(DEFAULT_OPTIONS.entries()),\n      ...Object.fromEntries(FEATURE_FLAGS.entries())\n    };\n\n    if (typeof seeds === 'string') {\n      seeds = [HostAddress.fromString(seeds)];\n    } else if (!Array.isArray(seeds)) {\n      seeds = [seeds];\n    }\n\n    const seedlist: HostAddress[] = [];\n    for (const seed of seeds) {\n      if (typeof seed === 'string') {\n        seedlist.push(HostAddress.fromString(seed));\n      } else if (seed instanceof HostAddress) {\n        seedlist.push(seed);\n      } else {\n        // FIXME(NODE-3483): May need to be a MongoParseError\n        throw new MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n      }\n    }\n\n    const topologyType = topologyTypeFromOptions(options);\n    const topologyId = globalTopologyCounter++;\n\n    const selectedHosts =\n      options.srvMaxHosts == null ||\n      options.srvMaxHosts === 0 ||\n      options.srvMaxHosts >= seedlist.length\n        ? seedlist\n        : shuffle(seedlist, options.srvMaxHosts);\n\n    const serverDescriptions = new Map();\n    for (const hostAddress of selectedHosts) {\n      serverDescriptions.set(hostAddress.toString(), new ServerDescription(hostAddress));\n    }\n\n    this[kWaitQueue] = new List();\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist,\n      // initial state\n      state: STATE_CLOSED,\n      // the topology description\n      description: new TopologyDescription(\n        topologyType,\n        serverDescriptions,\n        options.replicaSet,\n        undefined,\n        undefined,\n        undefined,\n        options\n      ),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      credentials: options?.credentials,\n      clusterTime: undefined,\n\n      // timer management\n      connectionTimers: new Set<NodeJS.Timeout>(),\n      detectShardedTopology: ev => this.detectShardedTopology(ev),\n      detectSrvRecords: ev => this.detectSrvRecords(ev)\n    };\n\n    this.mongoLogger = client.mongoLogger;\n    this.component = 'topology';\n\n    if (options.srvHost && !options.loadBalanced) {\n      this.s.srvPoller =\n        options.srvPoller ??\n        new SrvPoller({\n          heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n          srvHost: options.srvHost,\n          srvMaxHosts: options.srvMaxHosts,\n          srvServiceName: options.srvServiceName\n        });\n\n      this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n    }\n    this.connectionLock = undefined;\n  }\n\n  private detectShardedTopology(event: TopologyDescriptionChangedEvent) {\n    const previousType = event.previousDescription.type;\n    const newType = event.newDescription.type;\n\n    const transitionToSharded =\n      previousType !== TopologyType.Sharded && newType === TopologyType.Sharded;\n    const srvListeners = this.s.srvPoller?.listeners(SrvPoller.SRV_RECORD_DISCOVERY);\n    const listeningToSrvPolling = !!srvListeners?.includes(this.s.detectSrvRecords);\n\n    if (transitionToSharded && !listeningToSrvPolling) {\n      this.s.srvPoller?.on(SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n      this.s.srvPoller?.start();\n    }\n  }\n\n  private detectSrvRecords(ev: SrvPollingEvent) {\n    const previousTopologyDescription = this.s.description;\n    this.s.description = this.s.description.updateFromSrvPollingEvent(\n      ev,\n      this.s.options.srvMaxHosts\n    );\n    if (this.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n\n    updateServers(this);\n\n    this.emitAndLog(\n      Topology.TOPOLOGY_DESCRIPTION_CHANGED,\n      new TopologyDescriptionChangedEvent(\n        this.s.id,\n        previousTopologyDescription,\n        this.s.description\n      )\n    );\n  }\n\n  /**\n   * @returns A `TopologyDescription` for this topology\n   */\n  get description(): TopologyDescription {\n    return this.s.description;\n  }\n\n  get loadBalanced(): boolean {\n    return this.s.options.loadBalanced;\n  }\n\n  get serverApi(): ServerApi | undefined {\n    return this.s.options.serverApi;\n  }\n\n  get capabilities(): ServerCapabilities {\n    return new ServerCapabilities(this.lastHello());\n  }\n\n  /** Initiate server connect */\n  async connect(options?: ConnectOptions): Promise<Topology> {\n    this.connectionLock ??= this._connect(options);\n    try {\n      await this.connectionLock;\n      return this;\n    } finally {\n      this.connectionLock = undefined;\n    }\n\n    return this;\n  }\n\n  private async _connect(options?: ConnectOptions): Promise<Topology> {\n    options = options ?? {};\n    if (this.s.state === STATE_CONNECTED) {\n      return this;\n    }\n\n    stateTransition(this, STATE_CONNECTING);\n\n    // emit SDAM monitoring events\n    this.emitAndLog(Topology.TOPOLOGY_OPENING, new TopologyOpeningEvent(this.s.id));\n\n    // emit an event for the topology change\n    this.emitAndLog(\n      Topology.TOPOLOGY_DESCRIPTION_CHANGED,\n      new TopologyDescriptionChangedEvent(\n        this.s.id,\n        new TopologyDescription(TopologyType.Unknown), // initial is always Unknown\n        this.s.description\n      )\n    );\n\n    // connect all known servers, then attempt server selection to connect\n    const serverDescriptions = Array.from(this.s.description.servers.values());\n    this.s.servers = new Map(\n      serverDescriptions.map(serverDescription => [\n        serverDescription.address,\n        createAndConnectServer(this, serverDescription)\n      ])\n    );\n\n    // In load balancer mode we need to fake a server description getting\n    // emitted from the monitor, since the monitor doesn't exist.\n    if (this.s.options.loadBalanced) {\n      for (const description of serverDescriptions) {\n        const newDescription = new ServerDescription(description.hostAddress, undefined, {\n          loadBalanced: this.s.options.loadBalanced\n        });\n        this.serverUpdateHandler(newDescription);\n      }\n    }\n\n    const readPreference = options.readPreference ?? ReadPreference.primary;\n    const selectServerOptions = { operationName: 'ping', ...options };\n    try {\n      const server = await this.selectServer(\n        readPreferenceServerSelector(readPreference),\n        selectServerOptions\n      );\n\n      const skipPingOnConnect = this.s.options[Symbol.for('@@mdb.skipPingOnConnect')] === true;\n      if (!skipPingOnConnect && server && this.s.credentials) {\n        await server.command(ns('admin.$cmd'), { ping: 1 }, {});\n        stateTransition(this, STATE_CONNECTED);\n        this.emit(Topology.OPEN, this);\n        this.emit(Topology.CONNECT, this);\n\n        return this;\n      }\n\n      stateTransition(this, STATE_CONNECTED);\n      this.emit(Topology.OPEN, this);\n      this.emit(Topology.CONNECT, this);\n\n      return this;\n    } catch (error) {\n      this.close();\n      throw error;\n    }\n  }\n\n  /** Close this topology */\n  close(): void {\n    if (this.s.state === STATE_CLOSED || this.s.state === STATE_CLOSING) {\n      return;\n    }\n\n    for (const server of this.s.servers.values()) {\n      destroyServer(server, this);\n    }\n\n    this.s.servers.clear();\n\n    stateTransition(this, STATE_CLOSING);\n\n    drainWaitQueue(this[kWaitQueue], new MongoTopologyClosedError());\n    drainTimerQueue(this.s.connectionTimers);\n\n    if (this.s.srvPoller) {\n      this.s.srvPoller.stop();\n      this.s.srvPoller.removeListener(SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n    }\n\n    this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n\n    stateTransition(this, STATE_CLOSED);\n\n    // emit an event for close\n    this.emitAndLog(Topology.TOPOLOGY_CLOSED, new TopologyClosedEvent(this.s.id));\n  }\n\n  /**\n   * Selects a server according to the selection predicate provided\n   *\n   * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\n   * @param options - Optional settings related to server selection\n   * @param callback - The callback used to indicate success or failure\n   * @returns An instance of a `Server` meeting the criteria of the predicate provided\n   */\n  async selectServer(\n    selector: string | ReadPreference | ServerSelector,\n    options: SelectServerOptions\n  ): Promise<Server> {\n    let serverSelector;\n    if (typeof selector !== 'function') {\n      if (typeof selector === 'string') {\n        serverSelector = readPreferenceServerSelector(ReadPreference.fromString(selector));\n      } else {\n        let readPreference;\n        if (selector instanceof ReadPreference) {\n          readPreference = selector;\n        } else {\n          ReadPreference.translate(options);\n          readPreference = options.readPreference || ReadPreference.primary;\n        }\n\n        serverSelector = readPreferenceServerSelector(readPreference as ReadPreference);\n      }\n    } else {\n      serverSelector = selector;\n    }\n\n    options = { serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS, ...options };\n    if (\n      this.client.mongoLogger?.willLog(MongoLoggableComponent.SERVER_SELECTION, SeverityLevel.DEBUG)\n    ) {\n      this.client.mongoLogger?.debug(\n        MongoLoggableComponent.SERVER_SELECTION,\n        new ServerSelectionStartedEvent(selector, this.description, options.operationName)\n      );\n    }\n\n    const isSharded = this.description.type === TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n\n    if (isSharded && transaction && transaction.server) {\n      if (\n        this.client.mongoLogger?.willLog(\n          MongoLoggableComponent.SERVER_SELECTION,\n          SeverityLevel.DEBUG\n        )\n      ) {\n        this.client.mongoLogger?.debug(\n          MongoLoggableComponent.SERVER_SELECTION,\n          new ServerSelectionSucceededEvent(\n            selector,\n            this.description,\n            transaction.server.pool.address,\n            options.operationName\n          )\n        );\n      }\n      return transaction.server;\n    }\n\n    const { promise: serverPromise, resolve, reject } = promiseWithResolvers<Server>();\n    const timeout = Timeout.expires(options.serverSelectionTimeoutMS ?? 0);\n    const waitQueueMember: ServerSelectionRequest = {\n      serverSelector,\n      topologyDescription: this.description,\n      mongoLogger: this.client.mongoLogger,\n      transaction,\n      resolve,\n      reject,\n      timeout,\n      startTime: now(),\n      operationName: options.operationName,\n      waitingLogged: false,\n      previousServer: options.previousServer\n    };\n\n    this[kWaitQueue].push(waitQueueMember);\n    processWaitQueue(this);\n\n    try {\n      return await Promise.race([serverPromise, waitQueueMember.timeout]);\n    } catch (error) {\n      if (TimeoutError.is(error)) {\n        // Timeout\n        waitQueueMember[kCancelled] = true;\n        timeout.clear();\n        const timeoutError = new MongoServerSelectionError(\n          `Server selection timed out after ${options.serverSelectionTimeoutMS} ms`,\n          this.description\n        );\n        if (\n          this.client.mongoLogger?.willLog(\n            MongoLoggableComponent.SERVER_SELECTION,\n            SeverityLevel.DEBUG\n          )\n        ) {\n          this.client.mongoLogger?.debug(\n            MongoLoggableComponent.SERVER_SELECTION,\n            new ServerSelectionFailedEvent(\n              selector,\n              this.description,\n              timeoutError,\n              options.operationName\n            )\n          );\n        }\n\n        throw timeoutError;\n      }\n      // Other server selection error\n      throw error;\n    }\n  }\n  /**\n   * Update the internal TopologyDescription with a ServerDescription\n   *\n   * @param serverDescription - The server to update in the internal list of server descriptions\n   */\n  serverUpdateHandler(serverDescription: ServerDescription): void {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    }\n\n    // ignore this server update if its from an outdated topologyVersion\n    if (isStaleServerDescription(this.s.description, serverDescription)) {\n      return;\n    }\n\n    // these will be used for monitoring events later\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n    if (!previousServerDescription) {\n      return;\n    }\n\n    // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n    const clusterTime = serverDescription.$clusterTime;\n    if (clusterTime) {\n      _advanceClusterTime(this, clusterTime);\n    }\n\n    // If we already know all the information contained in this updated description, then\n    // we don't need to emit SDAM events, but still need to update the description, in order\n    // to keep client-tracked attributes like last update time and round trip time up to date\n    const equalDescriptions =\n      previousServerDescription && previousServerDescription.equals(serverDescription);\n\n    // first update the TopologyDescription\n    this.s.description = this.s.description.update(serverDescription);\n    if (this.s.description.compatibilityError) {\n      this.emit(Topology.ERROR, new MongoCompatibilityError(this.s.description.compatibilityError));\n      return;\n    }\n\n    // emit monitoring events for this change\n    if (!equalDescriptions) {\n      const newDescription = this.s.description.servers.get(serverDescription.address);\n      if (newDescription) {\n        this.emit(\n          Topology.SERVER_DESCRIPTION_CHANGED,\n          new ServerDescriptionChangedEvent(\n            this.s.id,\n            serverDescription.address,\n            previousServerDescription,\n            newDescription\n          )\n        );\n      }\n    }\n\n    // update server list from updated descriptions\n    updateServers(this, serverDescription);\n\n    // attempt to resolve any outstanding server selection attempts\n    if (this[kWaitQueue].length > 0) {\n      processWaitQueue(this);\n    }\n\n    if (!equalDescriptions) {\n      this.emitAndLog(\n        Topology.TOPOLOGY_DESCRIPTION_CHANGED,\n        new TopologyDescriptionChangedEvent(\n          this.s.id,\n          previousTopologyDescription,\n          this.s.description\n        )\n      );\n    }\n  }\n\n  auth(credentials?: MongoCredentials, callback?: Callback): void {\n    if (typeof credentials === 'function') (callback = credentials), (credentials = undefined);\n    if (typeof callback === 'function') callback(undefined, true);\n  }\n\n  get clientMetadata(): ClientMetadata {\n    return this.s.options.metadata;\n  }\n\n  isConnected(): boolean {\n    return this.s.state === STATE_CONNECTED;\n  }\n\n  isDestroyed(): boolean {\n    return this.s.state === STATE_CLOSED;\n  }\n\n  // NOTE: There are many places in code where we explicitly check the last hello\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first hello seen, which should suffice.\n  lastHello(): Document {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n    const sd = serverDescriptions.filter(\n      (sd: ServerDescription) => sd.type !== ServerType.Unknown\n    )[0];\n\n    const result = sd || { maxWireVersion: this.description.commonWireVersion };\n    return result;\n  }\n\n  get commonWireVersion(): number | undefined {\n    return this.description.commonWireVersion;\n  }\n\n  get logicalSessionTimeoutMinutes(): number | null {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n\n  get clusterTime(): ClusterTime | undefined {\n    return this.s.clusterTime;\n  }\n\n  set clusterTime(clusterTime: ClusterTime | undefined) {\n    this.s.clusterTime = clusterTime;\n  }\n}\n\n/** Destroys a server, and removes all event listeners from the instance */\nfunction destroyServer(server: Server, topology: Topology) {\n  for (const event of LOCAL_SERVER_EVENTS) {\n    server.removeAllListeners(event);\n  }\n\n  server.destroy();\n  topology.emitAndLog(\n    Topology.SERVER_CLOSED,\n    new ServerClosedEvent(topology.s.id, server.description.address)\n  );\n\n  for (const event of SERVER_RELAY_EVENTS) {\n    server.removeAllListeners(event);\n  }\n}\n\n/** Predicts the TopologyType from options */\nfunction topologyTypeFromOptions(options?: TopologyOptions) {\n  if (options?.directConnection) {\n    return TopologyType.Single;\n  }\n\n  if (options?.replicaSet) {\n    return TopologyType.ReplicaSetNoPrimary;\n  }\n\n  if (options?.loadBalanced) {\n    return TopologyType.LoadBalanced;\n  }\n\n  return TopologyType.Unknown;\n}\n\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n */\nfunction createAndConnectServer(topology: Topology, serverDescription: ServerDescription) {\n  topology.emitAndLog(\n    Topology.SERVER_OPENING,\n    new ServerOpeningEvent(topology.s.id, serverDescription.address)\n  );\n\n  const server = new Server(topology, serverDescription, topology.s.options);\n  for (const event of SERVER_RELAY_EVENTS) {\n    server.on(event, (e: any) => topology.emit(event, e));\n  }\n\n  server.on(Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n\n  server.connect();\n  return server;\n}\n\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\nfunction updateServers(topology: Topology, incomingServerDescription?: ServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n    if (server) {\n      server.s.description = incomingServerDescription;\n      if (\n        incomingServerDescription.error instanceof MongoError &&\n        incomingServerDescription.error.hasErrorLabel(MongoErrorLabel.ResetPool)\n      ) {\n        const interruptInUseConnections = incomingServerDescription.error.hasErrorLabel(\n          MongoErrorLabel.InterruptInUseConnections\n        );\n\n        server.pool.clear({ interruptInUseConnections });\n      } else if (incomingServerDescription.error == null) {\n        const newTopologyType = topology.s.description.type;\n        const shouldMarkPoolReady =\n          incomingServerDescription.isDataBearing ||\n          (incomingServerDescription.type !== ServerType.Unknown &&\n            newTopologyType === TopologyType.Single);\n        if (shouldMarkPoolReady) {\n          server.pool.ready();\n        }\n      }\n    }\n  }\n\n  // add new servers for all descriptions we currently don't know about locally\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  }\n\n  // for all servers no longer known, remove their descriptions and destroy their instances\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n\n    if (!topology.s.servers.has(serverAddress)) {\n      continue;\n    }\n\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress);\n\n    // prepare server for garbage collection\n    if (server) {\n      destroyServer(server, topology);\n    }\n  }\n}\n\nfunction drainWaitQueue(queue: List<ServerSelectionRequest>, drainError: MongoDriverError) {\n  while (queue.length) {\n    const waitQueueMember = queue.shift();\n    if (!waitQueueMember) {\n      continue;\n    }\n\n    waitQueueMember.timeout.clear();\n\n    if (!waitQueueMember[kCancelled]) {\n      if (\n        waitQueueMember.mongoLogger?.willLog(\n          MongoLoggableComponent.SERVER_SELECTION,\n          SeverityLevel.DEBUG\n        )\n      ) {\n        waitQueueMember.mongoLogger?.debug(\n          MongoLoggableComponent.SERVER_SELECTION,\n          new ServerSelectionFailedEvent(\n            waitQueueMember.serverSelector,\n            waitQueueMember.topologyDescription,\n            drainError,\n            waitQueueMember.operationName\n          )\n        );\n      }\n      waitQueueMember.reject(drainError);\n    }\n  }\n}\n\nfunction processWaitQueue(topology: Topology) {\n  if (topology.s.state === STATE_CLOSED) {\n    drainWaitQueue(topology[kWaitQueue], new MongoTopologyClosedError());\n    return;\n  }\n\n  const isSharded = topology.description.type === TopologyType.Sharded;\n  const serverDescriptions = Array.from(topology.description.servers.values());\n  const membersToProcess = topology[kWaitQueue].length;\n  for (let i = 0; i < membersToProcess; ++i) {\n    const waitQueueMember = topology[kWaitQueue].shift();\n    if (!waitQueueMember) {\n      continue;\n    }\n\n    if (waitQueueMember[kCancelled]) {\n      continue;\n    }\n\n    let selectedDescriptions;\n    try {\n      const serverSelector = waitQueueMember.serverSelector;\n      const previousServer = waitQueueMember.previousServer;\n      selectedDescriptions = serverSelector\n        ? serverSelector(\n            topology.description,\n            serverDescriptions,\n            previousServer ? [previousServer] : []\n          )\n        : serverDescriptions;\n    } catch (selectorError) {\n      waitQueueMember.timeout.clear();\n      if (\n        topology.client.mongoLogger?.willLog(\n          MongoLoggableComponent.SERVER_SELECTION,\n          SeverityLevel.DEBUG\n        )\n      ) {\n        topology.client.mongoLogger?.debug(\n          MongoLoggableComponent.SERVER_SELECTION,\n          new ServerSelectionFailedEvent(\n            waitQueueMember.serverSelector,\n            topology.description,\n            selectorError,\n            waitQueueMember.operationName\n          )\n        );\n      }\n      waitQueueMember.reject(selectorError);\n      continue;\n    }\n\n    let selectedServer: Server | undefined;\n    if (selectedDescriptions.length === 0) {\n      if (!waitQueueMember.waitingLogged) {\n        if (\n          topology.client.mongoLogger?.willLog(\n            MongoLoggableComponent.SERVER_SELECTION,\n            SeverityLevel.INFORMATIONAL\n          )\n        ) {\n          topology.client.mongoLogger?.info(\n            MongoLoggableComponent.SERVER_SELECTION,\n            new WaitingForSuitableServerEvent(\n              waitQueueMember.serverSelector,\n              topology.description,\n              topology.s.serverSelectionTimeoutMS !== 0\n                ? topology.s.serverSelectionTimeoutMS - (now() - waitQueueMember.startTime)\n                : -1,\n              waitQueueMember.operationName\n            )\n          );\n        }\n        waitQueueMember.waitingLogged = true;\n      }\n      topology[kWaitQueue].push(waitQueueMember);\n      continue;\n    } else if (selectedDescriptions.length === 1) {\n      selectedServer = topology.s.servers.get(selectedDescriptions[0].address);\n    } else {\n      const descriptions = shuffle(selectedDescriptions, 2);\n      const server1 = topology.s.servers.get(descriptions[0].address);\n      const server2 = topology.s.servers.get(descriptions[1].address);\n\n      selectedServer =\n        server1 && server2 && server1.s.operationCount < server2.s.operationCount\n          ? server1\n          : server2;\n    }\n\n    if (!selectedServer) {\n      const serverSelectionError = new MongoServerSelectionError(\n        'server selection returned a server description but the server was not found in the topology',\n        topology.description\n      );\n      if (\n        topology.client.mongoLogger?.willLog(\n          MongoLoggableComponent.SERVER_SELECTION,\n          SeverityLevel.DEBUG\n        )\n      ) {\n        topology.client.mongoLogger?.debug(\n          MongoLoggableComponent.SERVER_SELECTION,\n          new ServerSelectionFailedEvent(\n            waitQueueMember.serverSelector,\n            topology.description,\n            serverSelectionError,\n            waitQueueMember.operationName\n          )\n        );\n      }\n      waitQueueMember.reject(serverSelectionError);\n      return;\n    }\n    const transaction = waitQueueMember.transaction;\n    if (isSharded && transaction && transaction.isActive && selectedServer) {\n      transaction.pinServer(selectedServer);\n    }\n\n    waitQueueMember.timeout.clear();\n\n    if (\n      topology.client.mongoLogger?.willLog(\n        MongoLoggableComponent.SERVER_SELECTION,\n        SeverityLevel.DEBUG\n      )\n    ) {\n      topology.client.mongoLogger?.debug(\n        MongoLoggableComponent.SERVER_SELECTION,\n        new ServerSelectionSucceededEvent(\n          waitQueueMember.serverSelector,\n          waitQueueMember.topologyDescription,\n          selectedServer.pool.address,\n          waitQueueMember.operationName\n        )\n      );\n    }\n    waitQueueMember.resolve(selectedServer);\n  }\n\n  if (topology[kWaitQueue].length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    for (const [, server] of topology.s.servers) {\n      process.nextTick(function scheduleServerCheck() {\n        return server.requestCheck();\n      });\n    }\n  }\n}\n\nfunction isStaleServerDescription(\n  topologyDescription: TopologyDescription,\n  incomingServerDescription: ServerDescription\n) {\n  const currentServerDescription = topologyDescription.servers.get(\n    incomingServerDescription.address\n  );\n  const currentTopologyVersion = currentServerDescription?.topologyVersion;\n  return (\n    compareTopologyVersion(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0\n  );\n}\n\n/** @public */\nexport class ServerCapabilities {\n  maxWireVersion: number;\n  minWireVersion: number;\n\n  constructor(hello: Document) {\n    this.minWireVersion = hello.minWireVersion || 0;\n    this.maxWireVersion = hello.maxWireVersion || 0;\n  }\n\n  get hasAggregationCursor(): boolean {\n    return this.maxWireVersion >= 1;\n  }\n\n  get hasWriteCommands(): boolean {\n    return this.maxWireVersion >= 2;\n  }\n  get hasTextSearch(): boolean {\n    return this.minWireVersion >= 0;\n  }\n\n  get hasAuthCommands(): boolean {\n    return this.maxWireVersion >= 1;\n  }\n\n  get hasListCollectionsCommand(): boolean {\n    return this.maxWireVersion >= 3;\n  }\n\n  get hasListIndexesCommand(): boolean {\n    return this.maxWireVersion >= 3;\n  }\n\n  get supportsSnapshotReads(): boolean {\n    return this.maxWireVersion >= 13;\n  }\n\n  get commandsTakeWriteConcern(): boolean {\n    return this.maxWireVersion >= 5;\n  }\n\n  get commandsTakeCollation(): boolean {\n    return this.maxWireVersion >= 5;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}