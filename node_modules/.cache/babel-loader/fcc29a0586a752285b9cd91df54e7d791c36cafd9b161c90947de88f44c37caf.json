{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TopologyDescription = void 0;\nconst bson_1 = require(\"../bson\");\nconst WIRE_CONSTANTS = require(\"../cmap/wire_protocol/constants\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst server_description_1 = require(\"./server_description\");\n// constants related to compatibility checks\nconst MIN_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_SERVER_VERSION;\nconst MAX_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_SERVER_VERSION;\nconst MIN_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_WIRE_VERSION;\nconst MAX_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_WIRE_VERSION;\nconst MONGOS_OR_UNKNOWN = new Set([common_1.ServerType.Mongos, common_1.ServerType.Unknown]);\nconst MONGOS_OR_STANDALONE = new Set([common_1.ServerType.Mongos, common_1.ServerType.Standalone]);\nconst NON_PRIMARY_RS_MEMBERS = new Set([common_1.ServerType.RSSecondary, common_1.ServerType.RSArbiter, common_1.ServerType.RSOther]);\n/**\n * Representation of a deployment of servers\n * @public\n */\nclass TopologyDescription {\n  /**\n   * Create a TopologyDescription\n   */\n  constructor(topologyType) {\n    var _options, _options$heartbeatFre, _options$localThresho;\n    let serverDescriptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let setName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let maxSetVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    let maxElectionId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    let commonWireVersion = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n    let options = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n    options = (_options = options) !== null && _options !== void 0 ? _options : {};\n    this.type = topologyType !== null && topologyType !== void 0 ? topologyType : common_1.TopologyType.Unknown;\n    this.servers = serverDescriptions !== null && serverDescriptions !== void 0 ? serverDescriptions : new Map();\n    this.stale = false;\n    this.compatible = true;\n    this.heartbeatFrequencyMS = (_options$heartbeatFre = options.heartbeatFrequencyMS) !== null && _options$heartbeatFre !== void 0 ? _options$heartbeatFre : 0;\n    this.localThresholdMS = (_options$localThresho = options.localThresholdMS) !== null && _options$localThresho !== void 0 ? _options$localThresho : 15;\n    this.setName = setName !== null && setName !== void 0 ? setName : null;\n    this.maxElectionId = maxElectionId !== null && maxElectionId !== void 0 ? maxElectionId : null;\n    this.maxSetVersion = maxSetVersion !== null && maxSetVersion !== void 0 ? maxSetVersion : null;\n    this.commonWireVersion = commonWireVersion !== null && commonWireVersion !== void 0 ? commonWireVersion : 0;\n    // determine server compatibility\n    for (const serverDescription of this.servers.values()) {\n      // Load balancer mode is always compatible.\n      if (serverDescription.type === common_1.ServerType.Unknown || serverDescription.type === common_1.ServerType.LoadBalancer) {\n        continue;\n      }\n      if (serverDescription.minWireVersion > MAX_SUPPORTED_WIRE_VERSION) {\n        this.compatible = false;\n        this.compatibilityError = \"Server at \".concat(serverDescription.address, \" requires wire version \").concat(serverDescription.minWireVersion, \", but this version of the driver only supports up to \").concat(MAX_SUPPORTED_WIRE_VERSION, \" (MongoDB \").concat(MAX_SUPPORTED_SERVER_VERSION, \")\");\n      }\n      if (serverDescription.maxWireVersion < MIN_SUPPORTED_WIRE_VERSION) {\n        this.compatible = false;\n        this.compatibilityError = \"Server at \".concat(serverDescription.address, \" reports wire version \").concat(serverDescription.maxWireVersion, \", but this version of the driver requires at least \").concat(MIN_SUPPORTED_WIRE_VERSION, \" (MongoDB \").concat(MIN_SUPPORTED_SERVER_VERSION, \").\");\n        break;\n      }\n    }\n    // Whenever a client updates the TopologyDescription from a hello response, it MUST set\n    // TopologyDescription.logicalSessionTimeoutMinutes to the smallest logicalSessionTimeoutMinutes\n    // value among ServerDescriptions of all data-bearing server types. If any have a null\n    // logicalSessionTimeoutMinutes, then TopologyDescription.logicalSessionTimeoutMinutes MUST be\n    // set to null.\n    this.logicalSessionTimeoutMinutes = null;\n    for (const [, server] of this.servers) {\n      if (server.isReadable) {\n        if (server.logicalSessionTimeoutMinutes == null) {\n          // If any of the servers have a null logicalSessionsTimeout, then the whole topology does\n          this.logicalSessionTimeoutMinutes = null;\n          break;\n        }\n        if (this.logicalSessionTimeoutMinutes == null) {\n          // First server with a non null logicalSessionsTimeout\n          this.logicalSessionTimeoutMinutes = server.logicalSessionTimeoutMinutes;\n          continue;\n        }\n        // Always select the smaller of the:\n        // current server logicalSessionsTimeout and the topologies logicalSessionsTimeout\n        this.logicalSessionTimeoutMinutes = Math.min(this.logicalSessionTimeoutMinutes, server.logicalSessionTimeoutMinutes);\n      }\n    }\n  }\n  /**\n   * Returns a new TopologyDescription based on the SrvPollingEvent\n   * @internal\n   */\n  updateFromSrvPollingEvent(ev) {\n    let srvMaxHosts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    /** The SRV addresses defines the set of addresses we should be using */\n    const incomingHostnames = ev.hostnames();\n    const currentHostnames = new Set(this.servers.keys());\n    const hostnamesToAdd = new Set(incomingHostnames);\n    const hostnamesToRemove = new Set();\n    for (const hostname of currentHostnames) {\n      // filter hostnamesToAdd (made from incomingHostnames) down to what is *not* present in currentHostnames\n      hostnamesToAdd.delete(hostname);\n      if (!incomingHostnames.has(hostname)) {\n        // If the SRV Records no longer include this hostname\n        // we have to stop using it\n        hostnamesToRemove.add(hostname);\n      }\n    }\n    if (hostnamesToAdd.size === 0 && hostnamesToRemove.size === 0) {\n      // No new hosts to add and none to remove\n      return this;\n    }\n    const serverDescriptions = new Map(this.servers);\n    for (const removedHost of hostnamesToRemove) {\n      serverDescriptions.delete(removedHost);\n    }\n    if (hostnamesToAdd.size > 0) {\n      if (srvMaxHosts === 0) {\n        // Add all!\n        for (const hostToAdd of hostnamesToAdd) {\n          serverDescriptions.set(hostToAdd, new server_description_1.ServerDescription(hostToAdd));\n        }\n      } else if (serverDescriptions.size < srvMaxHosts) {\n        // Add only the amount needed to get us back to srvMaxHosts\n        const selectedHosts = (0, utils_1.shuffle)(hostnamesToAdd, srvMaxHosts - serverDescriptions.size);\n        for (const selectedHostToAdd of selectedHosts) {\n          serverDescriptions.set(selectedHostToAdd, new server_description_1.ServerDescription(selectedHostToAdd));\n        }\n      }\n    }\n    return new TopologyDescription(this.type, serverDescriptions, this.setName, this.maxSetVersion, this.maxElectionId, this.commonWireVersion, {\n      heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n      localThresholdMS: this.localThresholdMS\n    });\n  }\n  /**\n   * Returns a copy of this description updated with a given ServerDescription\n   * @internal\n   */\n  update(serverDescription) {\n    const address = serverDescription.address;\n    // potentially mutated values\n    let {\n      type: topologyType,\n      setName,\n      maxSetVersion,\n      maxElectionId,\n      commonWireVersion\n    } = this;\n    const serverType = serverDescription.type;\n    const serverDescriptions = new Map(this.servers);\n    // update common wire version\n    if (serverDescription.maxWireVersion !== 0) {\n      if (commonWireVersion == null) {\n        commonWireVersion = serverDescription.maxWireVersion;\n      } else {\n        commonWireVersion = Math.min(commonWireVersion, serverDescription.maxWireVersion);\n      }\n    }\n    if (typeof serverDescription.setName === 'string' && typeof setName === 'string' && serverDescription.setName !== setName) {\n      if (topologyType === common_1.TopologyType.Single) {\n        // \"Single\" Topology with setName mismatch is direct connection usage, mark unknown do not remove\n        serverDescription = new server_description_1.ServerDescription(address);\n      } else {\n        serverDescriptions.delete(address);\n      }\n    }\n    // update the actual server description\n    serverDescriptions.set(address, serverDescription);\n    if (topologyType === common_1.TopologyType.Single) {\n      // once we are defined as single, that never changes\n      return new TopologyDescription(common_1.TopologyType.Single, serverDescriptions, setName, maxSetVersion, maxElectionId, commonWireVersion, {\n        heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n        localThresholdMS: this.localThresholdMS\n      });\n    }\n    if (topologyType === common_1.TopologyType.Unknown) {\n      if (serverType === common_1.ServerType.Standalone && this.servers.size !== 1) {\n        serverDescriptions.delete(address);\n      } else {\n        topologyType = topologyTypeForServerType(serverType);\n      }\n    }\n    if (topologyType === common_1.TopologyType.Sharded) {\n      if (!MONGOS_OR_UNKNOWN.has(serverType)) {\n        serverDescriptions.delete(address);\n      }\n    }\n    if (topologyType === common_1.TopologyType.ReplicaSetNoPrimary) {\n      if (MONGOS_OR_STANDALONE.has(serverType)) {\n        serverDescriptions.delete(address);\n      }\n      if (serverType === common_1.ServerType.RSPrimary) {\n        const result = updateRsFromPrimary(serverDescriptions, serverDescription, setName, maxSetVersion, maxElectionId);\n        topologyType = result[0];\n        setName = result[1];\n        maxSetVersion = result[2];\n        maxElectionId = result[3];\n      } else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {\n        const result = updateRsNoPrimaryFromMember(serverDescriptions, serverDescription, setName);\n        topologyType = result[0];\n        setName = result[1];\n      }\n    }\n    if (topologyType === common_1.TopologyType.ReplicaSetWithPrimary) {\n      if (MONGOS_OR_STANDALONE.has(serverType)) {\n        serverDescriptions.delete(address);\n        topologyType = checkHasPrimary(serverDescriptions);\n      } else if (serverType === common_1.ServerType.RSPrimary) {\n        const result = updateRsFromPrimary(serverDescriptions, serverDescription, setName, maxSetVersion, maxElectionId);\n        topologyType = result[0];\n        setName = result[1];\n        maxSetVersion = result[2];\n        maxElectionId = result[3];\n      } else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {\n        topologyType = updateRsWithPrimaryFromMember(serverDescriptions, serverDescription, setName);\n      } else {\n        topologyType = checkHasPrimary(serverDescriptions);\n      }\n    }\n    return new TopologyDescription(topologyType, serverDescriptions, setName, maxSetVersion, maxElectionId, commonWireVersion, {\n      heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n      localThresholdMS: this.localThresholdMS\n    });\n  }\n  get error() {\n    const descriptionsWithError = Array.from(this.servers.values()).filter(sd => sd.error);\n    if (descriptionsWithError.length > 0) {\n      return descriptionsWithError[0].error;\n    }\n    return null;\n  }\n  /**\n   * Determines if the topology description has any known servers\n   */\n  get hasKnownServers() {\n    return Array.from(this.servers.values()).some(sd => sd.type !== common_1.ServerType.Unknown);\n  }\n  /**\n   * Determines if this topology description has a data-bearing server available.\n   */\n  get hasDataBearingServers() {\n    return Array.from(this.servers.values()).some(sd => sd.isDataBearing);\n  }\n  /**\n   * Determines if the topology has a definition for the provided address\n   * @internal\n   */\n  hasServer(address) {\n    return this.servers.has(address);\n  }\n  /**\n   * Returns a JSON-serializable representation of the TopologyDescription.  This is primarily\n   * intended for use with JSON.stringify().\n   *\n   * This method will not throw.\n   */\n  toJSON() {\n    return bson_1.EJSON.serialize(this);\n  }\n}\nexports.TopologyDescription = TopologyDescription;\nfunction topologyTypeForServerType(serverType) {\n  switch (serverType) {\n    case common_1.ServerType.Standalone:\n      return common_1.TopologyType.Single;\n    case common_1.ServerType.Mongos:\n      return common_1.TopologyType.Sharded;\n    case common_1.ServerType.RSPrimary:\n      return common_1.TopologyType.ReplicaSetWithPrimary;\n    case common_1.ServerType.RSOther:\n    case common_1.ServerType.RSSecondary:\n      return common_1.TopologyType.ReplicaSetNoPrimary;\n    default:\n      return common_1.TopologyType.Unknown;\n  }\n}\nfunction updateRsFromPrimary(serverDescriptions, serverDescription) {\n  let setName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let maxSetVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  let maxElectionId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  setName = setName || serverDescription.setName;\n  if (setName !== serverDescription.setName) {\n    serverDescriptions.delete(serverDescription.address);\n    return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n  }\n  if (serverDescription.maxWireVersion >= 17) {\n    var _maxSetVersion, _serverDescription$se;\n    const electionIdComparison = (0, utils_1.compareObjectId)(maxElectionId, serverDescription.electionId);\n    const maxElectionIdIsEqual = electionIdComparison === 0;\n    const maxElectionIdIsLess = electionIdComparison === -1;\n    const maxSetVersionIsLessOrEqual = ((_maxSetVersion = maxSetVersion) !== null && _maxSetVersion !== void 0 ? _maxSetVersion : -1) <= ((_serverDescription$se = serverDescription.setVersion) !== null && _serverDescription$se !== void 0 ? _serverDescription$se : -1);\n    if (maxElectionIdIsLess || maxElectionIdIsEqual && maxSetVersionIsLessOrEqual) {\n      // The reported electionId was greater\n      // or the electionId was equal and reported setVersion was greater\n      // Always update both values, they are a tuple\n      maxElectionId = serverDescription.electionId;\n      maxSetVersion = serverDescription.setVersion;\n    } else {\n      // Stale primary\n      // replace serverDescription with a default ServerDescription of type \"Unknown\"\n      serverDescriptions.set(serverDescription.address, new server_description_1.ServerDescription(serverDescription.address));\n      return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n    }\n  } else {\n    const electionId = serverDescription.electionId ? serverDescription.electionId : null;\n    if (serverDescription.setVersion && electionId) {\n      if (maxSetVersion && maxElectionId) {\n        if (maxSetVersion > serverDescription.setVersion || (0, utils_1.compareObjectId)(maxElectionId, electionId) > 0) {\n          // this primary is stale, we must remove it\n          serverDescriptions.set(serverDescription.address, new server_description_1.ServerDescription(serverDescription.address));\n          return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n        }\n      }\n      maxElectionId = serverDescription.electionId;\n    }\n    if (serverDescription.setVersion != null && (maxSetVersion == null || serverDescription.setVersion > maxSetVersion)) {\n      maxSetVersion = serverDescription.setVersion;\n    }\n  }\n  // We've heard from the primary. Is it the same primary as before?\n  for (const [address, server] of serverDescriptions) {\n    if (server.type === common_1.ServerType.RSPrimary && server.address !== serverDescription.address) {\n      // Reset old primary's type to Unknown.\n      serverDescriptions.set(address, new server_description_1.ServerDescription(server.address));\n      // There can only be one primary\n      break;\n    }\n  }\n  // Discover new hosts from this primary's response.\n  serverDescription.allHosts.forEach(address => {\n    if (!serverDescriptions.has(address)) {\n      serverDescriptions.set(address, new server_description_1.ServerDescription(address));\n    }\n  });\n  // Remove hosts not in the response.\n  const currentAddresses = Array.from(serverDescriptions.keys());\n  const responseAddresses = serverDescription.allHosts;\n  currentAddresses.filter(addr => responseAddresses.indexOf(addr) === -1).forEach(address => {\n    serverDescriptions.delete(address);\n  });\n  return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n}\nfunction updateRsWithPrimaryFromMember(serverDescriptions, serverDescription) {\n  let setName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  if (setName == null) {\n    // TODO(NODE-3483): should be an appropriate runtime error\n    throw new error_1.MongoRuntimeError('Argument \"setName\" is required if connected to a replica set');\n  }\n  if (setName !== serverDescription.setName || serverDescription.me && serverDescription.address !== serverDescription.me) {\n    serverDescriptions.delete(serverDescription.address);\n  }\n  return checkHasPrimary(serverDescriptions);\n}\nfunction updateRsNoPrimaryFromMember(serverDescriptions, serverDescription) {\n  var _setName;\n  let setName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  const topologyType = common_1.TopologyType.ReplicaSetNoPrimary;\n  setName = (_setName = setName) !== null && _setName !== void 0 ? _setName : serverDescription.setName;\n  if (setName !== serverDescription.setName) {\n    serverDescriptions.delete(serverDescription.address);\n    return [topologyType, setName];\n  }\n  serverDescription.allHosts.forEach(address => {\n    if (!serverDescriptions.has(address)) {\n      serverDescriptions.set(address, new server_description_1.ServerDescription(address));\n    }\n  });\n  if (serverDescription.me && serverDescription.address !== serverDescription.me) {\n    serverDescriptions.delete(serverDescription.address);\n  }\n  return [topologyType, setName];\n}\nfunction checkHasPrimary(serverDescriptions) {\n  for (const serverDescription of serverDescriptions.values()) {\n    if (serverDescription.type === common_1.ServerType.RSPrimary) {\n      return common_1.TopologyType.ReplicaSetWithPrimary;\n    }\n  }\n  return common_1.TopologyType.ReplicaSetNoPrimary;\n}","map":{"version":3,"names":["bson_1","require","WIRE_CONSTANTS","error_1","utils_1","common_1","server_description_1","MIN_SUPPORTED_SERVER_VERSION","MAX_SUPPORTED_SERVER_VERSION","MIN_SUPPORTED_WIRE_VERSION","MAX_SUPPORTED_WIRE_VERSION","MONGOS_OR_UNKNOWN","Set","ServerType","Mongos","Unknown","MONGOS_OR_STANDALONE","Standalone","NON_PRIMARY_RS_MEMBERS","RSSecondary","RSArbiter","RSOther","TopologyDescription","constructor","topologyType","_options","_options$heartbeatFre","_options$localThresho","serverDescriptions","arguments","length","undefined","setName","maxSetVersion","maxElectionId","commonWireVersion","options","type","TopologyType","servers","Map","stale","compatible","heartbeatFrequencyMS","localThresholdMS","serverDescription","values","LoadBalancer","minWireVersion","compatibilityError","concat","address","maxWireVersion","logicalSessionTimeoutMinutes","server","isReadable","Math","min","updateFromSrvPollingEvent","ev","srvMaxHosts","incomingHostnames","hostnames","currentHostnames","keys","hostnamesToAdd","hostnamesToRemove","hostname","delete","has","add","size","removedHost","hostToAdd","set","ServerDescription","selectedHosts","shuffle","selectedHostToAdd","update","serverType","Single","topologyTypeForServerType","Sharded","ReplicaSetNoPrimary","RSPrimary","result","updateRsFromPrimary","updateRsNoPrimaryFromMember","ReplicaSetWithPrimary","checkHasPrimary","updateRsWithPrimaryFromMember","error","descriptionsWithError","Array","from","filter","sd","hasKnownServers","some","hasDataBearingServers","isDataBearing","hasServer","toJSON","EJSON","serialize","exports","_maxSetVersion","_serverDescription$se","electionIdComparison","compareObjectId","electionId","maxElectionIdIsEqual","maxElectionIdIsLess","maxSetVersionIsLessOrEqual","setVersion","allHosts","forEach","currentAddresses","responseAddresses","addr","indexOf","MongoRuntimeError","me","_setName"],"sources":["/Users/Regan/Documents/GitHub/BadBank/node_modules/mongodb/src/sdam/topology_description.ts"],"sourcesContent":["import { EJSON, type ObjectId } from '../bson';\nimport * as WIRE_CONSTANTS from '../cmap/wire_protocol/constants';\nimport { type MongoError, MongoRuntimeError } from '../error';\nimport { compareObjectId, shuffle } from '../utils';\nimport { ServerType, TopologyType } from './common';\nimport { ServerDescription } from './server_description';\nimport type { SrvPollingEvent } from './srv_polling';\n\n// constants related to compatibility checks\nconst MIN_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_SERVER_VERSION;\nconst MAX_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_SERVER_VERSION;\nconst MIN_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_WIRE_VERSION;\nconst MAX_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_WIRE_VERSION;\n\nconst MONGOS_OR_UNKNOWN = new Set<ServerType>([ServerType.Mongos, ServerType.Unknown]);\nconst MONGOS_OR_STANDALONE = new Set<ServerType>([ServerType.Mongos, ServerType.Standalone]);\nconst NON_PRIMARY_RS_MEMBERS = new Set<ServerType>([\n  ServerType.RSSecondary,\n  ServerType.RSArbiter,\n  ServerType.RSOther\n]);\n\n/** @public */\nexport interface TopologyDescriptionOptions {\n  heartbeatFrequencyMS?: number;\n  localThresholdMS?: number;\n}\n\n/**\n * Representation of a deployment of servers\n * @public\n */\nexport class TopologyDescription {\n  type: TopologyType;\n  setName: string | null;\n  maxSetVersion: number | null;\n  maxElectionId: ObjectId | null;\n  servers: Map<string, ServerDescription>;\n  stale: boolean;\n  compatible: boolean;\n  compatibilityError?: string;\n  logicalSessionTimeoutMinutes: number | null;\n  heartbeatFrequencyMS: number;\n  localThresholdMS: number;\n  commonWireVersion: number;\n\n  /**\n   * Create a TopologyDescription\n   */\n  constructor(\n    topologyType: TopologyType,\n    serverDescriptions: Map<string, ServerDescription> | null = null,\n    setName: string | null = null,\n    maxSetVersion: number | null = null,\n    maxElectionId: ObjectId | null = null,\n    commonWireVersion: number | null = null,\n    options: TopologyDescriptionOptions | null = null\n  ) {\n    options = options ?? {};\n\n    this.type = topologyType ?? TopologyType.Unknown;\n    this.servers = serverDescriptions ?? new Map();\n    this.stale = false;\n    this.compatible = true;\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 0;\n    this.localThresholdMS = options.localThresholdMS ?? 15;\n    this.setName = setName ?? null;\n    this.maxElectionId = maxElectionId ?? null;\n    this.maxSetVersion = maxSetVersion ?? null;\n    this.commonWireVersion = commonWireVersion ?? 0;\n\n    // determine server compatibility\n    for (const serverDescription of this.servers.values()) {\n      // Load balancer mode is always compatible.\n      if (\n        serverDescription.type === ServerType.Unknown ||\n        serverDescription.type === ServerType.LoadBalancer\n      ) {\n        continue;\n      }\n\n      if (serverDescription.minWireVersion > MAX_SUPPORTED_WIRE_VERSION) {\n        this.compatible = false;\n        this.compatibilityError = `Server at ${serverDescription.address} requires wire version ${serverDescription.minWireVersion}, but this version of the driver only supports up to ${MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${MAX_SUPPORTED_SERVER_VERSION})`;\n      }\n\n      if (serverDescription.maxWireVersion < MIN_SUPPORTED_WIRE_VERSION) {\n        this.compatible = false;\n        this.compatibilityError = `Server at ${serverDescription.address} reports wire version ${serverDescription.maxWireVersion}, but this version of the driver requires at least ${MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${MIN_SUPPORTED_SERVER_VERSION}).`;\n        break;\n      }\n    }\n\n    // Whenever a client updates the TopologyDescription from a hello response, it MUST set\n    // TopologyDescription.logicalSessionTimeoutMinutes to the smallest logicalSessionTimeoutMinutes\n    // value among ServerDescriptions of all data-bearing server types. If any have a null\n    // logicalSessionTimeoutMinutes, then TopologyDescription.logicalSessionTimeoutMinutes MUST be\n    // set to null.\n    this.logicalSessionTimeoutMinutes = null;\n    for (const [, server] of this.servers) {\n      if (server.isReadable) {\n        if (server.logicalSessionTimeoutMinutes == null) {\n          // If any of the servers have a null logicalSessionsTimeout, then the whole topology does\n          this.logicalSessionTimeoutMinutes = null;\n          break;\n        }\n\n        if (this.logicalSessionTimeoutMinutes == null) {\n          // First server with a non null logicalSessionsTimeout\n          this.logicalSessionTimeoutMinutes = server.logicalSessionTimeoutMinutes;\n          continue;\n        }\n\n        // Always select the smaller of the:\n        // current server logicalSessionsTimeout and the topologies logicalSessionsTimeout\n        this.logicalSessionTimeoutMinutes = Math.min(\n          this.logicalSessionTimeoutMinutes,\n          server.logicalSessionTimeoutMinutes\n        );\n      }\n    }\n  }\n\n  /**\n   * Returns a new TopologyDescription based on the SrvPollingEvent\n   * @internal\n   */\n  updateFromSrvPollingEvent(ev: SrvPollingEvent, srvMaxHosts = 0): TopologyDescription {\n    /** The SRV addresses defines the set of addresses we should be using */\n    const incomingHostnames = ev.hostnames();\n    const currentHostnames = new Set(this.servers.keys());\n\n    const hostnamesToAdd = new Set<string>(incomingHostnames);\n    const hostnamesToRemove = new Set<string>();\n    for (const hostname of currentHostnames) {\n      // filter hostnamesToAdd (made from incomingHostnames) down to what is *not* present in currentHostnames\n      hostnamesToAdd.delete(hostname);\n      if (!incomingHostnames.has(hostname)) {\n        // If the SRV Records no longer include this hostname\n        // we have to stop using it\n        hostnamesToRemove.add(hostname);\n      }\n    }\n\n    if (hostnamesToAdd.size === 0 && hostnamesToRemove.size === 0) {\n      // No new hosts to add and none to remove\n      return this;\n    }\n\n    const serverDescriptions = new Map(this.servers);\n    for (const removedHost of hostnamesToRemove) {\n      serverDescriptions.delete(removedHost);\n    }\n\n    if (hostnamesToAdd.size > 0) {\n      if (srvMaxHosts === 0) {\n        // Add all!\n        for (const hostToAdd of hostnamesToAdd) {\n          serverDescriptions.set(hostToAdd, new ServerDescription(hostToAdd));\n        }\n      } else if (serverDescriptions.size < srvMaxHosts) {\n        // Add only the amount needed to get us back to srvMaxHosts\n        const selectedHosts = shuffle(hostnamesToAdd, srvMaxHosts - serverDescriptions.size);\n        for (const selectedHostToAdd of selectedHosts) {\n          serverDescriptions.set(selectedHostToAdd, new ServerDescription(selectedHostToAdd));\n        }\n      }\n    }\n\n    return new TopologyDescription(\n      this.type,\n      serverDescriptions,\n      this.setName,\n      this.maxSetVersion,\n      this.maxElectionId,\n      this.commonWireVersion,\n      { heartbeatFrequencyMS: this.heartbeatFrequencyMS, localThresholdMS: this.localThresholdMS }\n    );\n  }\n\n  /**\n   * Returns a copy of this description updated with a given ServerDescription\n   * @internal\n   */\n  update(serverDescription: ServerDescription): TopologyDescription {\n    const address = serverDescription.address;\n\n    // potentially mutated values\n    let { type: topologyType, setName, maxSetVersion, maxElectionId, commonWireVersion } = this;\n\n    const serverType = serverDescription.type;\n    const serverDescriptions = new Map(this.servers);\n\n    // update common wire version\n    if (serverDescription.maxWireVersion !== 0) {\n      if (commonWireVersion == null) {\n        commonWireVersion = serverDescription.maxWireVersion;\n      } else {\n        commonWireVersion = Math.min(commonWireVersion, serverDescription.maxWireVersion);\n      }\n    }\n\n    if (\n      typeof serverDescription.setName === 'string' &&\n      typeof setName === 'string' &&\n      serverDescription.setName !== setName\n    ) {\n      if (topologyType === TopologyType.Single) {\n        // \"Single\" Topology with setName mismatch is direct connection usage, mark unknown do not remove\n        serverDescription = new ServerDescription(address);\n      } else {\n        serverDescriptions.delete(address);\n      }\n    }\n\n    // update the actual server description\n    serverDescriptions.set(address, serverDescription);\n\n    if (topologyType === TopologyType.Single) {\n      // once we are defined as single, that never changes\n      return new TopologyDescription(\n        TopologyType.Single,\n        serverDescriptions,\n        setName,\n        maxSetVersion,\n        maxElectionId,\n        commonWireVersion,\n        { heartbeatFrequencyMS: this.heartbeatFrequencyMS, localThresholdMS: this.localThresholdMS }\n      );\n    }\n\n    if (topologyType === TopologyType.Unknown) {\n      if (serverType === ServerType.Standalone && this.servers.size !== 1) {\n        serverDescriptions.delete(address);\n      } else {\n        topologyType = topologyTypeForServerType(serverType);\n      }\n    }\n\n    if (topologyType === TopologyType.Sharded) {\n      if (!MONGOS_OR_UNKNOWN.has(serverType)) {\n        serverDescriptions.delete(address);\n      }\n    }\n\n    if (topologyType === TopologyType.ReplicaSetNoPrimary) {\n      if (MONGOS_OR_STANDALONE.has(serverType)) {\n        serverDescriptions.delete(address);\n      }\n\n      if (serverType === ServerType.RSPrimary) {\n        const result = updateRsFromPrimary(\n          serverDescriptions,\n          serverDescription,\n          setName,\n          maxSetVersion,\n          maxElectionId\n        );\n\n        topologyType = result[0];\n        setName = result[1];\n        maxSetVersion = result[2];\n        maxElectionId = result[3];\n      } else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {\n        const result = updateRsNoPrimaryFromMember(serverDescriptions, serverDescription, setName);\n        topologyType = result[0];\n        setName = result[1];\n      }\n    }\n\n    if (topologyType === TopologyType.ReplicaSetWithPrimary) {\n      if (MONGOS_OR_STANDALONE.has(serverType)) {\n        serverDescriptions.delete(address);\n        topologyType = checkHasPrimary(serverDescriptions);\n      } else if (serverType === ServerType.RSPrimary) {\n        const result = updateRsFromPrimary(\n          serverDescriptions,\n          serverDescription,\n          setName,\n          maxSetVersion,\n          maxElectionId\n        );\n\n        topologyType = result[0];\n        setName = result[1];\n        maxSetVersion = result[2];\n        maxElectionId = result[3];\n      } else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {\n        topologyType = updateRsWithPrimaryFromMember(\n          serverDescriptions,\n          serverDescription,\n          setName\n        );\n      } else {\n        topologyType = checkHasPrimary(serverDescriptions);\n      }\n    }\n\n    return new TopologyDescription(\n      topologyType,\n      serverDescriptions,\n      setName,\n      maxSetVersion,\n      maxElectionId,\n      commonWireVersion,\n      { heartbeatFrequencyMS: this.heartbeatFrequencyMS, localThresholdMS: this.localThresholdMS }\n    );\n  }\n\n  get error(): MongoError | null {\n    const descriptionsWithError = Array.from(this.servers.values()).filter(\n      (sd: ServerDescription) => sd.error\n    );\n\n    if (descriptionsWithError.length > 0) {\n      return descriptionsWithError[0].error;\n    }\n\n    return null;\n  }\n\n  /**\n   * Determines if the topology description has any known servers\n   */\n  get hasKnownServers(): boolean {\n    return Array.from(this.servers.values()).some(\n      (sd: ServerDescription) => sd.type !== ServerType.Unknown\n    );\n  }\n\n  /**\n   * Determines if this topology description has a data-bearing server available.\n   */\n  get hasDataBearingServers(): boolean {\n    return Array.from(this.servers.values()).some((sd: ServerDescription) => sd.isDataBearing);\n  }\n\n  /**\n   * Determines if the topology has a definition for the provided address\n   * @internal\n   */\n  hasServer(address: string): boolean {\n    return this.servers.has(address);\n  }\n\n  /**\n   * Returns a JSON-serializable representation of the TopologyDescription.  This is primarily\n   * intended for use with JSON.stringify().\n   *\n   * This method will not throw.\n   */\n  toJSON() {\n    return EJSON.serialize(this);\n  }\n}\n\nfunction topologyTypeForServerType(serverType: ServerType): TopologyType {\n  switch (serverType) {\n    case ServerType.Standalone:\n      return TopologyType.Single;\n    case ServerType.Mongos:\n      return TopologyType.Sharded;\n    case ServerType.RSPrimary:\n      return TopologyType.ReplicaSetWithPrimary;\n    case ServerType.RSOther:\n    case ServerType.RSSecondary:\n      return TopologyType.ReplicaSetNoPrimary;\n    default:\n      return TopologyType.Unknown;\n  }\n}\n\nfunction updateRsFromPrimary(\n  serverDescriptions: Map<string, ServerDescription>,\n  serverDescription: ServerDescription,\n  setName: string | null = null,\n  maxSetVersion: number | null = null,\n  maxElectionId: ObjectId | null = null\n): [TopologyType, string | null, number | null, ObjectId | null] {\n  setName = setName || serverDescription.setName;\n  if (setName !== serverDescription.setName) {\n    serverDescriptions.delete(serverDescription.address);\n    return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n  }\n\n  if (serverDescription.maxWireVersion >= 17) {\n    const electionIdComparison = compareObjectId(maxElectionId, serverDescription.electionId);\n    const maxElectionIdIsEqual = electionIdComparison === 0;\n    const maxElectionIdIsLess = electionIdComparison === -1;\n    const maxSetVersionIsLessOrEqual =\n      (maxSetVersion ?? -1) <= (serverDescription.setVersion ?? -1);\n\n    if (maxElectionIdIsLess || (maxElectionIdIsEqual && maxSetVersionIsLessOrEqual)) {\n      // The reported electionId was greater\n      // or the electionId was equal and reported setVersion was greater\n      // Always update both values, they are a tuple\n      maxElectionId = serverDescription.electionId;\n      maxSetVersion = serverDescription.setVersion;\n    } else {\n      // Stale primary\n      // replace serverDescription with a default ServerDescription of type \"Unknown\"\n      serverDescriptions.set(\n        serverDescription.address,\n        new ServerDescription(serverDescription.address)\n      );\n\n      return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n    }\n  } else {\n    const electionId = serverDescription.electionId ? serverDescription.electionId : null;\n    if (serverDescription.setVersion && electionId) {\n      if (maxSetVersion && maxElectionId) {\n        if (\n          maxSetVersion > serverDescription.setVersion ||\n          compareObjectId(maxElectionId, electionId) > 0\n        ) {\n          // this primary is stale, we must remove it\n          serverDescriptions.set(\n            serverDescription.address,\n            new ServerDescription(serverDescription.address)\n          );\n\n          return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n        }\n      }\n\n      maxElectionId = serverDescription.electionId;\n    }\n\n    if (\n      serverDescription.setVersion != null &&\n      (maxSetVersion == null || serverDescription.setVersion > maxSetVersion)\n    ) {\n      maxSetVersion = serverDescription.setVersion;\n    }\n  }\n\n  // We've heard from the primary. Is it the same primary as before?\n  for (const [address, server] of serverDescriptions) {\n    if (server.type === ServerType.RSPrimary && server.address !== serverDescription.address) {\n      // Reset old primary's type to Unknown.\n      serverDescriptions.set(address, new ServerDescription(server.address));\n\n      // There can only be one primary\n      break;\n    }\n  }\n\n  // Discover new hosts from this primary's response.\n  serverDescription.allHosts.forEach((address: string) => {\n    if (!serverDescriptions.has(address)) {\n      serverDescriptions.set(address, new ServerDescription(address));\n    }\n  });\n\n  // Remove hosts not in the response.\n  const currentAddresses = Array.from(serverDescriptions.keys());\n  const responseAddresses = serverDescription.allHosts;\n  currentAddresses\n    .filter((addr: string) => responseAddresses.indexOf(addr) === -1)\n    .forEach((address: string) => {\n      serverDescriptions.delete(address);\n    });\n\n  return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n}\n\nfunction updateRsWithPrimaryFromMember(\n  serverDescriptions: Map<string, ServerDescription>,\n  serverDescription: ServerDescription,\n  setName: string | null = null\n): TopologyType {\n  if (setName == null) {\n    // TODO(NODE-3483): should be an appropriate runtime error\n    throw new MongoRuntimeError('Argument \"setName\" is required if connected to a replica set');\n  }\n\n  if (\n    setName !== serverDescription.setName ||\n    (serverDescription.me && serverDescription.address !== serverDescription.me)\n  ) {\n    serverDescriptions.delete(serverDescription.address);\n  }\n\n  return checkHasPrimary(serverDescriptions);\n}\n\nfunction updateRsNoPrimaryFromMember(\n  serverDescriptions: Map<string, ServerDescription>,\n  serverDescription: ServerDescription,\n  setName: string | null = null\n): [TopologyType, string | null] {\n  const topologyType = TopologyType.ReplicaSetNoPrimary;\n  setName = setName ?? serverDescription.setName;\n  if (setName !== serverDescription.setName) {\n    serverDescriptions.delete(serverDescription.address);\n    return [topologyType, setName];\n  }\n\n  serverDescription.allHosts.forEach((address: string) => {\n    if (!serverDescriptions.has(address)) {\n      serverDescriptions.set(address, new ServerDescription(address));\n    }\n  });\n\n  if (serverDescription.me && serverDescription.address !== serverDescription.me) {\n    serverDescriptions.delete(serverDescription.address);\n  }\n\n  return [topologyType, setName];\n}\n\nfunction checkHasPrimary(serverDescriptions: Map<string, ServerDescription>): TopologyType {\n  for (const serverDescription of serverDescriptions.values()) {\n    if (serverDescription.type === ServerType.RSPrimary) {\n      return TopologyType.ReplicaSetWithPrimary;\n    }\n  }\n\n  return TopologyType.ReplicaSetNoPrimary;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}