{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoLogger = exports.defaultLogTransform = exports.stringifyWithMaxLen = exports.createStdioLogger = exports.parseSeverityFromString = exports.MongoLoggableComponent = exports.SEVERITY_LEVEL_MAP = exports.DEFAULT_MAX_DOCUMENT_LENGTH = exports.SeverityLevel = void 0;\nconst util_1 = require(\"util\");\nconst bson_1 = require(\"./bson\");\nconst constants_1 = require(\"./constants\");\nconst utils_1 = require(\"./utils\");\n/** @internal */\nexports.SeverityLevel = Object.freeze({\n  EMERGENCY: 'emergency',\n  ALERT: 'alert',\n  CRITICAL: 'critical',\n  ERROR: 'error',\n  WARNING: 'warn',\n  NOTICE: 'notice',\n  INFORMATIONAL: 'info',\n  DEBUG: 'debug',\n  TRACE: 'trace',\n  OFF: 'off'\n});\n/** @internal */\nexports.DEFAULT_MAX_DOCUMENT_LENGTH = 1000;\n/** @internal */\nclass SeverityLevelMap extends Map {\n  constructor(entries) {\n    const newEntries = [];\n    for (const [level, value] of entries) {\n      newEntries.push([value, level]);\n    }\n    newEntries.push(...entries);\n    super(newEntries);\n  }\n  getNumericSeverityLevel(severity) {\n    return this.get(severity);\n  }\n  getSeverityLevelName(level) {\n    return this.get(level);\n  }\n}\n/** @internal */\nexports.SEVERITY_LEVEL_MAP = new SeverityLevelMap([[exports.SeverityLevel.OFF, -Infinity], [exports.SeverityLevel.EMERGENCY, 0], [exports.SeverityLevel.ALERT, 1], [exports.SeverityLevel.CRITICAL, 2], [exports.SeverityLevel.ERROR, 3], [exports.SeverityLevel.WARNING, 4], [exports.SeverityLevel.NOTICE, 5], [exports.SeverityLevel.INFORMATIONAL, 6], [exports.SeverityLevel.DEBUG, 7], [exports.SeverityLevel.TRACE, 8]]);\n/** @internal */\nexports.MongoLoggableComponent = Object.freeze({\n  COMMAND: 'command',\n  TOPOLOGY: 'topology',\n  SERVER_SELECTION: 'serverSelection',\n  CONNECTION: 'connection',\n  CLIENT: 'client'\n});\n/**\n * Parses a string as one of SeverityLevel\n * @internal\n *\n * @param s - the value to be parsed\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\n */\nfunction parseSeverityFromString(s) {\n  const validSeverities = Object.values(exports.SeverityLevel);\n  const lowerSeverity = s === null || s === void 0 ? void 0 : s.toLowerCase();\n  if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\n    return lowerSeverity;\n  }\n  return null;\n}\nexports.parseSeverityFromString = parseSeverityFromString;\n/** @internal */\nfunction createStdioLogger(stream) {\n  return {\n    write: (0, util_1.promisify)((log, cb) => {\n      const logLine = (0, util_1.inspect)(log, {\n        compact: true,\n        breakLength: Infinity\n      });\n      stream.write(\"\".concat(logLine, \"\\n\"), 'utf-8', cb);\n      return;\n    })\n  };\n}\nexports.createStdioLogger = createStdioLogger;\n/**\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\n * mongo client options respectively. The mongodbLogPath can be either 'stdout', 'stderr', a NodeJS\n * Writable or an object which has a `write` method with the signature:\n * ```ts\n * write(log: Log): void\n * ```\n *\n * @returns the MongoDBLogWritable object to write logs to\n */\nfunction resolveLogPath(_ref, _ref2) {\n  let {\n    MONGODB_LOG_PATH\n  } = _ref;\n  let {\n    mongodbLogPath\n  } = _ref2;\n  if (typeof mongodbLogPath === 'string' && /^stderr$/i.test(mongodbLogPath)) {\n    return {\n      mongodbLogPath: createStdioLogger(process.stderr),\n      mongodbLogPathIsStdErr: true\n    };\n  }\n  if (typeof mongodbLogPath === 'string' && /^stdout$/i.test(mongodbLogPath)) {\n    return {\n      mongodbLogPath: createStdioLogger(process.stdout),\n      mongodbLogPathIsStdErr: false\n    };\n  }\n  if (typeof mongodbLogPath === 'object' && typeof (mongodbLogPath === null || mongodbLogPath === void 0 ? void 0 : mongodbLogPath.write) === 'function') {\n    return {\n      mongodbLogPath: mongodbLogPath,\n      mongodbLogPathIsStdErr: false\n    };\n  }\n  if (MONGODB_LOG_PATH && /^stderr$/i.test(MONGODB_LOG_PATH)) {\n    return {\n      mongodbLogPath: createStdioLogger(process.stderr),\n      mongodbLogPathIsStdErr: true\n    };\n  }\n  if (MONGODB_LOG_PATH && /^stdout$/i.test(MONGODB_LOG_PATH)) {\n    return {\n      mongodbLogPath: createStdioLogger(process.stdout),\n      mongodbLogPathIsStdErr: false\n    };\n  }\n  return {\n    mongodbLogPath: createStdioLogger(process.stderr),\n    mongodbLogPathIsStdErr: true\n  };\n}\nfunction resolveSeverityConfiguration(clientOption, environmentOption, defaultSeverity) {\n  var _ref3, _parseSeverityFromStr;\n  return (_ref3 = (_parseSeverityFromStr = parseSeverityFromString(clientOption)) !== null && _parseSeverityFromStr !== void 0 ? _parseSeverityFromStr : parseSeverityFromString(environmentOption)) !== null && _ref3 !== void 0 ? _ref3 : defaultSeverity;\n}\nfunction compareSeverity(s0, s1) {\n  const s0Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s0);\n  const s1Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s1);\n  return s0Num < s1Num ? -1 : s0Num > s1Num ? 1 : 0;\n}\n/** @internal */\nfunction stringifyWithMaxLen(value, maxDocumentLength) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let strToTruncate = '';\n  if (typeof value === 'string') {\n    strToTruncate = value;\n  } else if (typeof value === 'function') {\n    strToTruncate = value.name;\n  } else {\n    try {\n      strToTruncate = bson_1.EJSON.stringify(value, options);\n    } catch (e) {\n      strToTruncate = \"Extended JSON serialization failed with: \".concat(e.message);\n    }\n  }\n  // handle truncation that occurs in the middle of multi-byte codepoints\n  if (maxDocumentLength !== 0 && strToTruncate.length > maxDocumentLength && strToTruncate.charCodeAt(maxDocumentLength - 1) !== strToTruncate.codePointAt(maxDocumentLength - 1)) {\n    maxDocumentLength--;\n    if (maxDocumentLength === 0) {\n      return '';\n    }\n  }\n  return maxDocumentLength !== 0 && strToTruncate.length > maxDocumentLength ? \"\".concat(strToTruncate.slice(0, maxDocumentLength), \"...\") : strToTruncate;\n}\nexports.stringifyWithMaxLen = stringifyWithMaxLen;\nfunction isLogConvertible(obj) {\n  const objAsLogConvertible = obj;\n  // eslint-disable-next-line no-restricted-syntax\n  return objAsLogConvertible.toLog !== undefined && typeof objAsLogConvertible.toLog === 'function';\n}\nfunction attachServerSelectionFields(log, serverSelectionEvent) {\n  let maxDocumentLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : exports.DEFAULT_MAX_DOCUMENT_LENGTH;\n  const {\n    selector,\n    operation,\n    topologyDescription,\n    message\n  } = serverSelectionEvent;\n  log.selector = stringifyWithMaxLen(selector, maxDocumentLength);\n  log.operation = operation;\n  log.topologyDescription = stringifyWithMaxLen(topologyDescription, maxDocumentLength);\n  log.message = message;\n  return log;\n}\nfunction attachCommandFields(log, commandEvent) {\n  log.commandName = commandEvent.commandName;\n  log.requestId = commandEvent.requestId;\n  log.driverConnectionId = commandEvent.connectionId;\n  const {\n    host,\n    port\n  } = utils_1.HostAddress.fromString(commandEvent.address).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n  if (commandEvent !== null && commandEvent !== void 0 && commandEvent.serviceId) {\n    log.serviceId = commandEvent.serviceId.toHexString();\n  }\n  log.databaseName = commandEvent.databaseName;\n  log.serverConnectionId = commandEvent.serverConnectionId;\n  return log;\n}\nfunction attachConnectionFields(log, event) {\n  const {\n    host,\n    port\n  } = utils_1.HostAddress.fromString(event.address).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n  return log;\n}\nfunction attachSDAMFields(log, sdamEvent) {\n  log.topologyId = sdamEvent.topologyId;\n  return log;\n}\nfunction attachServerHeartbeatFields(log, serverHeartbeatEvent) {\n  const {\n    awaited,\n    connectionId\n  } = serverHeartbeatEvent;\n  log.awaited = awaited;\n  log.driverConnectionId = serverHeartbeatEvent.connectionId;\n  const {\n    host,\n    port\n  } = utils_1.HostAddress.fromString(connectionId).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n  return log;\n}\n/** @internal */\nfunction defaultLogTransform(logObject) {\n  var _logObject$failure, _logObject$failure$me, _logObject$failure2, _logObject$serviceId, _logObject$failure3;\n  let maxDocumentLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : exports.DEFAULT_MAX_DOCUMENT_LENGTH;\n  let log = Object.create(null);\n  switch (logObject.name) {\n    case constants_1.SERVER_SELECTION_STARTED:\n      log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n      return log;\n    case constants_1.SERVER_SELECTION_FAILED:\n      log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n      log.failure = (_logObject$failure = logObject.failure) === null || _logObject$failure === void 0 ? void 0 : _logObject$failure.message;\n      return log;\n    case constants_1.SERVER_SELECTION_SUCCEEDED:\n      log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n      log.serverHost = logObject.serverHost;\n      log.serverPort = logObject.serverPort;\n      return log;\n    case constants_1.WAITING_FOR_SUITABLE_SERVER:\n      log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n      log.remainingTimeMS = logObject.remainingTimeMS;\n      return log;\n    case constants_1.COMMAND_STARTED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command started';\n      log.command = stringifyWithMaxLen(logObject.command, maxDocumentLength, {\n        relaxed: true\n      });\n      log.databaseName = logObject.databaseName;\n      return log;\n    case constants_1.COMMAND_SUCCEEDED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command succeeded';\n      log.durationMS = logObject.duration;\n      log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength, {\n        relaxed: true\n      });\n      return log;\n    case constants_1.COMMAND_FAILED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command failed';\n      log.durationMS = logObject.duration;\n      log.failure = (_logObject$failure$me = (_logObject$failure2 = logObject.failure) === null || _logObject$failure2 === void 0 ? void 0 : _logObject$failure2.message) !== null && _logObject$failure$me !== void 0 ? _logObject$failure$me : '(redacted)';\n      return log;\n    case constants_1.CONNECTION_POOL_CREATED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool created';\n      if (logObject.options) {\n        const {\n          maxIdleTimeMS,\n          minPoolSize,\n          maxPoolSize,\n          maxConnecting,\n          waitQueueTimeoutMS\n        } = logObject.options;\n        log = {\n          ...log,\n          maxIdleTimeMS,\n          minPoolSize,\n          maxPoolSize,\n          maxConnecting,\n          waitQueueTimeoutMS\n        };\n      }\n      return log;\n    case constants_1.CONNECTION_POOL_READY:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool ready';\n      return log;\n    case constants_1.CONNECTION_POOL_CLEARED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool cleared';\n      if (((_logObject$serviceId = logObject.serviceId) === null || _logObject$serviceId === void 0 ? void 0 : _logObject$serviceId._bsontype) === 'ObjectId') {\n        var _logObject$serviceId2;\n        log.serviceId = (_logObject$serviceId2 = logObject.serviceId) === null || _logObject$serviceId2 === void 0 ? void 0 : _logObject$serviceId2.toHexString();\n      }\n      return log;\n    case constants_1.CONNECTION_POOL_CLOSED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool closed';\n      return log;\n    case constants_1.CONNECTION_CREATED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection created';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case constants_1.CONNECTION_READY:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection ready';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case constants_1.CONNECTION_CLOSED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection closed';\n      log.driverConnectionId = logObject.connectionId;\n      switch (logObject.reason) {\n        case 'stale':\n          log.reason = 'Connection became stale because the pool was cleared';\n          break;\n        case 'idle':\n          log.reason = 'Connection has been available but unused for longer than the configured max idle time';\n          break;\n        case 'error':\n          log.reason = 'An error occurred while using the connection';\n          if (logObject.error) {\n            log.error = logObject.error;\n          }\n          break;\n        case 'poolClosed':\n          log.reason = 'Connection pool was closed';\n          break;\n        default:\n          log.reason = \"Unknown close reason: \".concat(logObject.reason);\n      }\n      return log;\n    case constants_1.CONNECTION_CHECK_OUT_STARTED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checkout started';\n      return log;\n    case constants_1.CONNECTION_CHECK_OUT_FAILED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checkout failed';\n      switch (logObject.reason) {\n        case 'poolClosed':\n          log.reason = 'Connection pool was closed';\n          break;\n        case 'timeout':\n          log.reason = 'Wait queue timeout elapsed without a connection becoming available';\n          break;\n        case 'connectionError':\n          log.reason = 'An error occurred while trying to establish a new connection';\n          if (logObject.error) {\n            log.error = logObject.error;\n          }\n          break;\n        default:\n          log.reason = \"Unknown close reason: \".concat(logObject.reason);\n      }\n      return log;\n    case constants_1.CONNECTION_CHECKED_OUT:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checked out';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case constants_1.CONNECTION_CHECKED_IN:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checked in';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case constants_1.SERVER_OPENING:\n      log = attachSDAMFields(log, logObject);\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Starting server monitoring';\n      return log;\n    case constants_1.SERVER_CLOSED:\n      log = attachSDAMFields(log, logObject);\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Stopped server monitoring';\n      return log;\n    case constants_1.SERVER_HEARTBEAT_STARTED:\n      log = attachSDAMFields(log, logObject);\n      log = attachServerHeartbeatFields(log, logObject);\n      log.message = 'Server heartbeat started';\n      return log;\n    case constants_1.SERVER_HEARTBEAT_SUCCEEDED:\n      log = attachSDAMFields(log, logObject);\n      log = attachServerHeartbeatFields(log, logObject);\n      log.message = 'Server heartbeat succeeded';\n      log.durationMS = logObject.duration;\n      log.serverConnectionId = logObject.serverConnectionId;\n      log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength, {\n        relaxed: true\n      });\n      return log;\n    case constants_1.SERVER_HEARTBEAT_FAILED:\n      log = attachSDAMFields(log, logObject);\n      log = attachServerHeartbeatFields(log, logObject);\n      log.message = 'Server heartbeat failed';\n      log.durationMS = logObject.duration;\n      log.failure = (_logObject$failure3 = logObject.failure) === null || _logObject$failure3 === void 0 ? void 0 : _logObject$failure3.message;\n      return log;\n    case constants_1.TOPOLOGY_OPENING:\n      log = attachSDAMFields(log, logObject);\n      log.message = 'Starting topology monitoring';\n      return log;\n    case constants_1.TOPOLOGY_CLOSED:\n      log = attachSDAMFields(log, logObject);\n      log.message = 'Stopped topology monitoring';\n      return log;\n    case constants_1.TOPOLOGY_DESCRIPTION_CHANGED:\n      log = attachSDAMFields(log, logObject);\n      log.message = 'Topology description changed';\n      log.previousDescription = log.reply = stringifyWithMaxLen(logObject.previousDescription, maxDocumentLength);\n      log.newDescription = log.reply = stringifyWithMaxLen(logObject.newDescription, maxDocumentLength);\n      return log;\n    default:\n      for (const [key, value] of Object.entries(logObject)) {\n        if (value != null) log[key] = value;\n      }\n  }\n  return log;\n}\nexports.defaultLogTransform = defaultLogTransform;\n/** @internal */\nclass MongoLogger {\n  constructor(options) {\n    this.pendingLog = null;\n    /**\n     * This method should be used when logging errors that do not have a public driver API for\n     * reporting errors.\n     */\n    this.error = this.log.bind(this, 'error');\n    /**\n     * This method should be used to log situations where undesirable application behaviour might\n     * occur. For example, failing to end sessions on `MongoClient.close`.\n     */\n    this.warn = this.log.bind(this, 'warn');\n    /**\n     * This method should be used to report high-level information about normal driver behaviour.\n     * For example, the creation of a `MongoClient`.\n     */\n    this.info = this.log.bind(this, 'info');\n    /**\n     * This method should be used to report information that would be helpful when debugging an\n     * application. For example, a command starting, succeeding or failing.\n     */\n    this.debug = this.log.bind(this, 'debug');\n    /**\n     * This method should be used to report fine-grained details related to logic flow. For example,\n     * entering and exiting a function body.\n     */\n    this.trace = this.log.bind(this, 'trace');\n    this.componentSeverities = options.componentSeverities;\n    this.maxDocumentLength = options.maxDocumentLength;\n    this.logDestination = options.logDestination;\n    this.logDestinationIsStdErr = options.logDestinationIsStdErr;\n    this.severities = this.createLoggingSeverities();\n  }\n  createLoggingSeverities() {\n    const severities = Object();\n    for (const component of Object.values(exports.MongoLoggableComponent)) {\n      severities[component] = {};\n      for (const severityLevel of Object.values(exports.SeverityLevel)) {\n        severities[component][severityLevel] = compareSeverity(severityLevel, this.componentSeverities[component]) <= 0;\n      }\n    }\n    return severities;\n  }\n  turnOffSeverities() {\n    for (const component of Object.values(exports.MongoLoggableComponent)) {\n      this.componentSeverities[component] = exports.SeverityLevel.OFF;\n      for (const severityLevel of Object.values(exports.SeverityLevel)) {\n        this.severities[component][severityLevel] = false;\n      }\n    }\n  }\n  logWriteFailureHandler(error) {\n    if (this.logDestinationIsStdErr) {\n      this.turnOffSeverities();\n      this.clearPendingLog();\n      return;\n    }\n    this.logDestination = createStdioLogger(process.stderr);\n    this.logDestinationIsStdErr = true;\n    this.clearPendingLog();\n    this.error(exports.MongoLoggableComponent.CLIENT, {\n      toLog: function () {\n        return {\n          message: 'User input for mongodbLogPath is now invalid. Logging is halted.',\n          error: error.message\n        };\n      }\n    });\n    this.turnOffSeverities();\n    this.clearPendingLog();\n  }\n  clearPendingLog() {\n    this.pendingLog = null;\n  }\n  willLog(component, severity) {\n    if (severity === exports.SeverityLevel.OFF) return false;\n    return this.severities[component][severity];\n  }\n  log(severity, component, message) {\n    if (!this.willLog(component, severity)) return;\n    let logMessage = {\n      t: new Date(),\n      c: component,\n      s: severity\n    };\n    if (typeof message === 'string') {\n      logMessage.message = message;\n    } else if (typeof message === 'object') {\n      if (isLogConvertible(message)) {\n        logMessage = {\n          ...logMessage,\n          ...message.toLog()\n        };\n      } else {\n        logMessage = {\n          ...logMessage,\n          ...defaultLogTransform(message, this.maxDocumentLength)\n        };\n      }\n    }\n    if ((0, utils_1.isPromiseLike)(this.pendingLog)) {\n      this.pendingLog = this.pendingLog\n      // eslint-disable-next-line github/no-then\n      .then(() => this.logDestination.write(logMessage))\n      // eslint-disable-next-line github/no-then\n      .then(this.clearPendingLog.bind(this), this.logWriteFailureHandler.bind(this));\n      return;\n    }\n    try {\n      const logResult = this.logDestination.write(logMessage);\n      if ((0, utils_1.isPromiseLike)(logResult)) {\n        // eslint-disable-next-line github/no-then\n        this.pendingLog = logResult.then(this.clearPendingLog.bind(this), this.logWriteFailureHandler.bind(this));\n      }\n    } catch (error) {\n      this.logWriteFailureHandler(error);\n    }\n  }\n  /**\n   * Merges options set through environment variables and the MongoClient, preferring environment\n   * variables when both are set, and substituting defaults for values not set. Options set in\n   * constructor take precedence over both environment variables and MongoClient options.\n   *\n   * @remarks\n   * When parsing component severity levels, invalid values are treated as unset and replaced with\n   * the default severity.\n   *\n   * @param envOptions - options set for the logger from the environment\n   * @param clientOptions - options set for the logger in the MongoClient options\n   * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\n   */\n  static resolveOptions(envOptions, clientOptions) {\n    var _combinedOptions$mong, _combinedOptions$mong2, _combinedOptions$mong3, _combinedOptions$mong4, _combinedOptions$mong5, _combinedOptions$mong6, _ref4, _combinedOptions$mong7;\n    // client options take precedence over env options\n    const resolvedLogPath = resolveLogPath(envOptions, clientOptions);\n    const combinedOptions = {\n      ...envOptions,\n      ...clientOptions,\n      mongodbLogPath: resolvedLogPath.mongodbLogPath,\n      mongodbLogPathIsStdErr: resolvedLogPath.mongodbLogPathIsStdErr\n    };\n    const defaultSeverity = resolveSeverityConfiguration((_combinedOptions$mong = combinedOptions.mongodbLogComponentSeverities) === null || _combinedOptions$mong === void 0 ? void 0 : _combinedOptions$mong.default, combinedOptions.MONGODB_LOG_ALL, exports.SeverityLevel.OFF);\n    return {\n      componentSeverities: {\n        command: resolveSeverityConfiguration((_combinedOptions$mong2 = combinedOptions.mongodbLogComponentSeverities) === null || _combinedOptions$mong2 === void 0 ? void 0 : _combinedOptions$mong2.command, combinedOptions.MONGODB_LOG_COMMAND, defaultSeverity),\n        topology: resolveSeverityConfiguration((_combinedOptions$mong3 = combinedOptions.mongodbLogComponentSeverities) === null || _combinedOptions$mong3 === void 0 ? void 0 : _combinedOptions$mong3.topology, combinedOptions.MONGODB_LOG_TOPOLOGY, defaultSeverity),\n        serverSelection: resolveSeverityConfiguration((_combinedOptions$mong4 = combinedOptions.mongodbLogComponentSeverities) === null || _combinedOptions$mong4 === void 0 ? void 0 : _combinedOptions$mong4.serverSelection, combinedOptions.MONGODB_LOG_SERVER_SELECTION, defaultSeverity),\n        connection: resolveSeverityConfiguration((_combinedOptions$mong5 = combinedOptions.mongodbLogComponentSeverities) === null || _combinedOptions$mong5 === void 0 ? void 0 : _combinedOptions$mong5.connection, combinedOptions.MONGODB_LOG_CONNECTION, defaultSeverity),\n        client: resolveSeverityConfiguration((_combinedOptions$mong6 = combinedOptions.mongodbLogComponentSeverities) === null || _combinedOptions$mong6 === void 0 ? void 0 : _combinedOptions$mong6.client, combinedOptions.MONGODB_LOG_CLIENT, defaultSeverity),\n        default: defaultSeverity\n      },\n      maxDocumentLength: (_ref4 = (_combinedOptions$mong7 = combinedOptions.mongodbLogMaxDocumentLength) !== null && _combinedOptions$mong7 !== void 0 ? _combinedOptions$mong7 : (0, utils_1.parseUnsignedInteger)(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH)) !== null && _ref4 !== void 0 ? _ref4 : 1000,\n      logDestination: combinedOptions.mongodbLogPath,\n      logDestinationIsStdErr: combinedOptions.mongodbLogPathIsStdErr\n    };\n  }\n}\nexports.MongoLogger = MongoLogger;","map":{"version":3,"names":["util_1","require","bson_1","constants_1","utils_1","exports","SeverityLevel","Object","freeze","EMERGENCY","ALERT","CRITICAL","ERROR","WARNING","NOTICE","INFORMATIONAL","DEBUG","TRACE","OFF","DEFAULT_MAX_DOCUMENT_LENGTH","SeverityLevelMap","Map","constructor","entries","newEntries","level","value","push","getNumericSeverityLevel","severity","get","getSeverityLevelName","SEVERITY_LEVEL_MAP","Infinity","MongoLoggableComponent","COMMAND","TOPOLOGY","SERVER_SELECTION","CONNECTION","CLIENT","parseSeverityFromString","s","validSeverities","values","lowerSeverity","toLowerCase","includes","createStdioLogger","stream","write","promisify","log","cb","logLine","inspect","compact","breakLength","concat","resolveLogPath","_ref","_ref2","MONGODB_LOG_PATH","mongodbLogPath","test","process","stderr","mongodbLogPathIsStdErr","stdout","resolveSeverityConfiguration","clientOption","environmentOption","defaultSeverity","_ref3","_parseSeverityFromStr","compareSeverity","s0","s1","s0Num","s1Num","stringifyWithMaxLen","maxDocumentLength","options","arguments","length","undefined","strToTruncate","name","EJSON","stringify","e","message","charCodeAt","codePointAt","slice","isLogConvertible","obj","objAsLogConvertible","toLog","attachServerSelectionFields","serverSelectionEvent","selector","operation","topologyDescription","attachCommandFields","commandEvent","commandName","requestId","driverConnectionId","connectionId","host","port","HostAddress","fromString","address","toHostPort","serverHost","serverPort","serviceId","toHexString","databaseName","serverConnectionId","attachConnectionFields","event","attachSDAMFields","sdamEvent","topologyId","attachServerHeartbeatFields","serverHeartbeatEvent","awaited","defaultLogTransform","logObject","_logObject$failure","_logObject$failure$me","_logObject$failure2","_logObject$serviceId","_logObject$failure3","create","SERVER_SELECTION_STARTED","SERVER_SELECTION_FAILED","failure","SERVER_SELECTION_SUCCEEDED","WAITING_FOR_SUITABLE_SERVER","remainingTimeMS","COMMAND_STARTED","command","relaxed","COMMAND_SUCCEEDED","durationMS","duration","reply","COMMAND_FAILED","CONNECTION_POOL_CREATED","maxIdleTimeMS","minPoolSize","maxPoolSize","maxConnecting","waitQueueTimeoutMS","CONNECTION_POOL_READY","CONNECTION_POOL_CLEARED","_bsontype","_logObject$serviceId2","CONNECTION_POOL_CLOSED","CONNECTION_CREATED","CONNECTION_READY","CONNECTION_CLOSED","reason","error","CONNECTION_CHECK_OUT_STARTED","CONNECTION_CHECK_OUT_FAILED","CONNECTION_CHECKED_OUT","CONNECTION_CHECKED_IN","SERVER_OPENING","SERVER_CLOSED","SERVER_HEARTBEAT_STARTED","SERVER_HEARTBEAT_SUCCEEDED","SERVER_HEARTBEAT_FAILED","TOPOLOGY_OPENING","TOPOLOGY_CLOSED","TOPOLOGY_DESCRIPTION_CHANGED","previousDescription","newDescription","key","MongoLogger","pendingLog","bind","warn","info","debug","trace","componentSeverities","logDestination","logDestinationIsStdErr","severities","createLoggingSeverities","component","severityLevel","turnOffSeverities","logWriteFailureHandler","clearPendingLog","willLog","logMessage","t","Date","c","isPromiseLike","then","logResult","resolveOptions","envOptions","clientOptions","_combinedOptions$mong","_combinedOptions$mong2","_combinedOptions$mong3","_combinedOptions$mong4","_combinedOptions$mong5","_combinedOptions$mong6","_ref4","_combinedOptions$mong7","resolvedLogPath","combinedOptions","mongodbLogComponentSeverities","default","MONGODB_LOG_ALL","MONGODB_LOG_COMMAND","topology","MONGODB_LOG_TOPOLOGY","serverSelection","MONGODB_LOG_SERVER_SELECTION","connection","MONGODB_LOG_CONNECTION","client","MONGODB_LOG_CLIENT","mongodbLogMaxDocumentLength","parseUnsignedInteger","MONGODB_LOG_MAX_DOCUMENT_LENGTH"],"sources":["/Users/Regan/Documents/GitHub/BadBank/node_modules/mongodb/src/mongo_logger.ts"],"sourcesContent":["import { inspect, promisify } from 'util';\n\nimport { type Document, EJSON, type EJSONOptions, type ObjectId } from './bson';\nimport type { CommandStartedEvent } from './cmap/command_monitoring_events';\nimport type {\n  ConnectionCheckedInEvent,\n  ConnectionCheckedOutEvent,\n  ConnectionCheckOutFailedEvent,\n  ConnectionCheckOutStartedEvent,\n  ConnectionClosedEvent,\n  ConnectionCreatedEvent,\n  ConnectionPoolClearedEvent,\n  ConnectionPoolClosedEvent,\n  ConnectionPoolCreatedEvent,\n  ConnectionPoolReadyEvent,\n  ConnectionReadyEvent\n} from './cmap/connection_pool_events';\nimport {\n  COMMAND_FAILED,\n  COMMAND_STARTED,\n  COMMAND_SUCCEEDED,\n  CONNECTION_CHECK_OUT_FAILED,\n  CONNECTION_CHECK_OUT_STARTED,\n  CONNECTION_CHECKED_IN,\n  CONNECTION_CHECKED_OUT,\n  CONNECTION_CLOSED,\n  CONNECTION_CREATED,\n  CONNECTION_POOL_CLEARED,\n  CONNECTION_POOL_CLOSED,\n  CONNECTION_POOL_CREATED,\n  CONNECTION_POOL_READY,\n  CONNECTION_READY,\n  SERVER_CLOSED,\n  SERVER_HEARTBEAT_FAILED,\n  SERVER_HEARTBEAT_STARTED,\n  SERVER_HEARTBEAT_SUCCEEDED,\n  SERVER_OPENING,\n  SERVER_SELECTION_FAILED,\n  SERVER_SELECTION_STARTED,\n  SERVER_SELECTION_SUCCEEDED,\n  TOPOLOGY_CLOSED,\n  TOPOLOGY_DESCRIPTION_CHANGED,\n  TOPOLOGY_OPENING,\n  WAITING_FOR_SUITABLE_SERVER\n} from './constants';\nimport type {\n  ServerClosedEvent,\n  ServerOpeningEvent,\n  TopologyClosedEvent,\n  TopologyDescriptionChangedEvent,\n  TopologyOpeningEvent\n} from './sdam/events';\nimport type {\n  ServerSelectionEvent,\n  ServerSelectionFailedEvent,\n  ServerSelectionStartedEvent,\n  ServerSelectionSucceededEvent,\n  WaitingForSuitableServerEvent\n} from './sdam/server_selection_events';\nimport { HostAddress, isPromiseLike, parseUnsignedInteger } from './utils';\n\n/** @internal */\nexport const SeverityLevel = Object.freeze({\n  EMERGENCY: 'emergency',\n  ALERT: 'alert',\n  CRITICAL: 'critical',\n  ERROR: 'error',\n  WARNING: 'warn',\n  NOTICE: 'notice',\n  INFORMATIONAL: 'info',\n  DEBUG: 'debug',\n  TRACE: 'trace',\n  OFF: 'off'\n} as const);\n\n/** @internal */\nexport const DEFAULT_MAX_DOCUMENT_LENGTH = 1000;\n/** @internal */\nexport type SeverityLevel = (typeof SeverityLevel)[keyof typeof SeverityLevel];\n\n/** @internal */\nclass SeverityLevelMap extends Map<SeverityLevel | number, SeverityLevel | number> {\n  constructor(entries: [SeverityLevel | number, SeverityLevel | number][]) {\n    const newEntries: [number | SeverityLevel, SeverityLevel | number][] = [];\n    for (const [level, value] of entries) {\n      newEntries.push([value, level]);\n    }\n\n    newEntries.push(...entries);\n    super(newEntries);\n  }\n\n  getNumericSeverityLevel(severity: SeverityLevel): number {\n    return this.get(severity) as number;\n  }\n\n  getSeverityLevelName(level: number): SeverityLevel | undefined {\n    return this.get(level) as SeverityLevel | undefined;\n  }\n}\n\n/** @internal */\nexport const SEVERITY_LEVEL_MAP = new SeverityLevelMap([\n  [SeverityLevel.OFF, -Infinity],\n  [SeverityLevel.EMERGENCY, 0],\n  [SeverityLevel.ALERT, 1],\n  [SeverityLevel.CRITICAL, 2],\n  [SeverityLevel.ERROR, 3],\n  [SeverityLevel.WARNING, 4],\n  [SeverityLevel.NOTICE, 5],\n  [SeverityLevel.INFORMATIONAL, 6],\n  [SeverityLevel.DEBUG, 7],\n  [SeverityLevel.TRACE, 8]\n]);\n\n/** @internal */\nexport const MongoLoggableComponent = Object.freeze({\n  COMMAND: 'command',\n  TOPOLOGY: 'topology',\n  SERVER_SELECTION: 'serverSelection',\n  CONNECTION: 'connection',\n  CLIENT: 'client'\n} as const);\n\n/** @internal */\nexport type MongoLoggableComponent =\n  (typeof MongoLoggableComponent)[keyof typeof MongoLoggableComponent];\n\n/** @internal */\nexport interface MongoLoggerEnvOptions {\n  /** Severity level for command component */\n  MONGODB_LOG_COMMAND?: string;\n  /** Severity level for topology component */\n  MONGODB_LOG_TOPOLOGY?: string;\n  /** Severity level for server selection component */\n  MONGODB_LOG_SERVER_SELECTION?: string;\n  /** Severity level for CMAP */\n  MONGODB_LOG_CONNECTION?: string;\n  /** Severity level for client */\n  MONGODB_LOG_CLIENT?: string;\n  /** Default severity level to be if any of the above are unset */\n  MONGODB_LOG_ALL?: string;\n  /** Max length of embedded EJSON docs. Setting to 0 disables truncation. Defaults to 1000. */\n  MONGODB_LOG_MAX_DOCUMENT_LENGTH?: string;\n  /** Destination for log messages. Must be 'stderr', 'stdout'. Defaults to 'stderr'. */\n  MONGODB_LOG_PATH?: string;\n}\n\n/** @internal */\nexport interface LogComponentSeveritiesClientOptions {\n  /** Optional severity level for command component */\n  command?: SeverityLevel;\n  /** Optional severity level for topology component */\n  topology?: SeverityLevel;\n  /** Optionsl severity level for server selection component */\n  serverSelection?: SeverityLevel;\n  /** Optional severity level for connection component */\n  connection?: SeverityLevel;\n  /** Optional severity level for client component */\n  client?: SeverityLevel;\n  /** Optional default severity level to be used if any of the above are unset */\n  default?: SeverityLevel;\n}\n\n/** @internal */\nexport interface MongoLoggerMongoClientOptions {\n  /** Destination for log messages */\n  mongodbLogPath?: 'stdout' | 'stderr' | MongoDBLogWritable;\n  /** Severity levels for logger components */\n  mongodbLogComponentSeverities?: LogComponentSeveritiesClientOptions;\n  /** Max length of embedded EJSON docs. Setting to 0 disables truncation. Defaults to 1000. */\n  mongodbLogMaxDocumentLength?: number;\n}\n\n/** @internal */\nexport interface MongoLoggerOptions {\n  componentSeverities: {\n    /** Severity level for command component */\n    command: SeverityLevel;\n    /** Severity level for topology component */\n    topology: SeverityLevel;\n    /** Severity level for server selection component */\n    serverSelection: SeverityLevel;\n    /** Severity level for connection component */\n    connection: SeverityLevel;\n    /** Severity level for client component */\n    client: SeverityLevel;\n    /** Default severity level to be used if any of the above are unset */\n    default: SeverityLevel;\n  };\n  /** Max length of embedded EJSON docs. Setting to 0 disables truncation. Defaults to 1000. */\n  maxDocumentLength: number;\n  /** Destination for log messages. */\n  logDestination: MongoDBLogWritable;\n  /** For internal check to see if error should stop logging. */\n  logDestinationIsStdErr: boolean;\n}\n\n/**\n * Parses a string as one of SeverityLevel\n * @internal\n *\n * @param s - the value to be parsed\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\n */\nexport function parseSeverityFromString(s?: string): SeverityLevel | null {\n  const validSeverities: string[] = Object.values(SeverityLevel);\n  const lowerSeverity = s?.toLowerCase();\n\n  if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\n    return lowerSeverity as SeverityLevel;\n  }\n\n  return null;\n}\n\n/** @internal */\nexport function createStdioLogger(stream: {\n  write: NodeJS.WriteStream['write'];\n}): MongoDBLogWritable {\n  return {\n    write: promisify((log: Log, cb: (error?: Error) => void): unknown => {\n      const logLine = inspect(log, { compact: true, breakLength: Infinity });\n      stream.write(`${logLine}\\n`, 'utf-8', cb);\n      return;\n    })\n  };\n}\n\n/**\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\n * mongo client options respectively. The mongodbLogPath can be either 'stdout', 'stderr', a NodeJS\n * Writable or an object which has a `write` method with the signature:\n * ```ts\n * write(log: Log): void\n * ```\n *\n * @returns the MongoDBLogWritable object to write logs to\n */\nfunction resolveLogPath(\n  { MONGODB_LOG_PATH }: MongoLoggerEnvOptions,\n  { mongodbLogPath }: MongoLoggerMongoClientOptions\n): { mongodbLogPath: MongoDBLogWritable; mongodbLogPathIsStdErr: boolean } {\n  if (typeof mongodbLogPath === 'string' && /^stderr$/i.test(mongodbLogPath)) {\n    return { mongodbLogPath: createStdioLogger(process.stderr), mongodbLogPathIsStdErr: true };\n  }\n  if (typeof mongodbLogPath === 'string' && /^stdout$/i.test(mongodbLogPath)) {\n    return { mongodbLogPath: createStdioLogger(process.stdout), mongodbLogPathIsStdErr: false };\n  }\n\n  if (typeof mongodbLogPath === 'object' && typeof mongodbLogPath?.write === 'function') {\n    return { mongodbLogPath: mongodbLogPath, mongodbLogPathIsStdErr: false };\n  }\n\n  if (MONGODB_LOG_PATH && /^stderr$/i.test(MONGODB_LOG_PATH)) {\n    return { mongodbLogPath: createStdioLogger(process.stderr), mongodbLogPathIsStdErr: true };\n  }\n  if (MONGODB_LOG_PATH && /^stdout$/i.test(MONGODB_LOG_PATH)) {\n    return { mongodbLogPath: createStdioLogger(process.stdout), mongodbLogPathIsStdErr: false };\n  }\n\n  return { mongodbLogPath: createStdioLogger(process.stderr), mongodbLogPathIsStdErr: true };\n}\n\nfunction resolveSeverityConfiguration(\n  clientOption: string | undefined,\n  environmentOption: string | undefined,\n  defaultSeverity: SeverityLevel\n): SeverityLevel {\n  return (\n    parseSeverityFromString(clientOption) ??\n    parseSeverityFromString(environmentOption) ??\n    defaultSeverity\n  );\n}\n\n/** @internal */\nexport interface Log extends Record<string, any> {\n  t: Date;\n  c: MongoLoggableComponent;\n  s: SeverityLevel;\n  message?: string;\n}\n\n/**\n * @internal\n * TODO: NODE-5671 - remove internal flag and add API comments\n */\nexport interface MongoDBLogWritable {\n  write(log: Log): PromiseLike<unknown> | unknown;\n}\n\nfunction compareSeverity(s0: SeverityLevel, s1: SeverityLevel): 1 | 0 | -1 {\n  const s0Num = SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s0);\n  const s1Num = SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s1);\n\n  return s0Num < s1Num ? -1 : s0Num > s1Num ? 1 : 0;\n}\n\n/**\n * @internal\n * Must be separate from Events API due to differences in spec requirements for logging a command success\n */\nexport type LoggableCommandSucceededEvent = {\n  address: string;\n  connectionId?: string | number;\n  requestId: number;\n  duration: number;\n  commandName: string;\n  reply: Document | undefined;\n  serviceId?: ObjectId;\n  name: typeof COMMAND_SUCCEEDED;\n  serverConnectionId: bigint | null;\n  databaseName: string;\n};\n\n/**\n * @internal\n * Must be separate from Events API due to differences in spec requirements for logging a command failure\n */\nexport type LoggableCommandFailedEvent = {\n  address: string;\n  connectionId?: string | number;\n  requestId: number;\n  duration: number;\n  commandName: string;\n  failure: Error;\n  serviceId?: ObjectId;\n  name: typeof COMMAND_FAILED;\n  serverConnectionId: bigint | null;\n  databaseName: string;\n};\n\n/**\n * @internal\n * Must be separate from Events API due to differences in spec requirements for logging server heartbeat beginning\n */\nexport type LoggableServerHeartbeatStartedEvent = {\n  topologyId: number;\n  awaited: boolean;\n  connectionId: string;\n  name: typeof SERVER_HEARTBEAT_STARTED;\n};\n\n/**\n * @internal\n * Must be separate from Events API due to differences in spec requirements for logging server heartbeat success\n */\nexport type LoggableServerHeartbeatSucceededEvent = {\n  topologyId: number;\n  awaited: boolean;\n  connectionId: string;\n  reply: Document;\n  serverConnectionId: number | '<monitor>';\n  duration: number;\n  name: typeof SERVER_HEARTBEAT_SUCCEEDED;\n};\n\n/**\n * @internal\n * Must be separate from Events API due to differences in spec requirements for logging server heartbeat failure\n */\nexport type LoggableServerHeartbeatFailedEvent = {\n  topologyId: number;\n  awaited: boolean;\n  connectionId: string;\n  failure: Error;\n  duration: number;\n  name: typeof SERVER_HEARTBEAT_FAILED;\n};\n\ntype SDAMLoggableEvent =\n  | ServerClosedEvent\n  | LoggableServerHeartbeatFailedEvent\n  | LoggableServerHeartbeatStartedEvent\n  | LoggableServerHeartbeatSucceededEvent\n  | ServerOpeningEvent\n  | TopologyClosedEvent\n  | TopologyDescriptionChangedEvent\n  | TopologyOpeningEvent;\n\n/** @internal */\nexport type LoggableEvent =\n  | ServerSelectionStartedEvent\n  | ServerSelectionFailedEvent\n  | ServerSelectionSucceededEvent\n  | WaitingForSuitableServerEvent\n  | CommandStartedEvent\n  | LoggableCommandSucceededEvent\n  | LoggableCommandFailedEvent\n  | ConnectionPoolCreatedEvent\n  | ConnectionPoolReadyEvent\n  | ConnectionPoolClosedEvent\n  | ConnectionPoolClearedEvent\n  | ConnectionCreatedEvent\n  | ConnectionReadyEvent\n  | ConnectionClosedEvent\n  | ConnectionCheckedInEvent\n  | ConnectionCheckedOutEvent\n  | ConnectionCheckOutStartedEvent\n  | ConnectionCheckOutFailedEvent\n  | ServerClosedEvent\n  | LoggableServerHeartbeatFailedEvent\n  | LoggableServerHeartbeatStartedEvent\n  | LoggableServerHeartbeatSucceededEvent\n  | ServerOpeningEvent\n  | TopologyClosedEvent\n  | TopologyDescriptionChangedEvent\n  | TopologyOpeningEvent;\n\n/** @internal */\nexport interface LogConvertible extends Record<string, any> {\n  toLog(): Record<string, any>;\n}\n\n/** @internal */\nexport function stringifyWithMaxLen(\n  value: any,\n  maxDocumentLength: number,\n  options: EJSONOptions = {}\n): string {\n  let strToTruncate = '';\n\n  if (typeof value === 'string') {\n    strToTruncate = value;\n  } else if (typeof value === 'function') {\n    strToTruncate = value.name;\n  } else {\n    try {\n      strToTruncate = EJSON.stringify(value, options);\n    } catch (e) {\n      strToTruncate = `Extended JSON serialization failed with: ${e.message}`;\n    }\n  }\n\n  // handle truncation that occurs in the middle of multi-byte codepoints\n  if (\n    maxDocumentLength !== 0 &&\n    strToTruncate.length > maxDocumentLength &&\n    strToTruncate.charCodeAt(maxDocumentLength - 1) !==\n      strToTruncate.codePointAt(maxDocumentLength - 1)\n  ) {\n    maxDocumentLength--;\n    if (maxDocumentLength === 0) {\n      return '';\n    }\n  }\n\n  return maxDocumentLength !== 0 && strToTruncate.length > maxDocumentLength\n    ? `${strToTruncate.slice(0, maxDocumentLength)}...`\n    : strToTruncate;\n}\n\n/** @internal */\nexport type Loggable = LoggableEvent | LogConvertible;\n\nfunction isLogConvertible(obj: Loggable): obj is LogConvertible {\n  const objAsLogConvertible = obj as LogConvertible;\n  // eslint-disable-next-line no-restricted-syntax\n  return objAsLogConvertible.toLog !== undefined && typeof objAsLogConvertible.toLog === 'function';\n}\n\nfunction attachServerSelectionFields(\n  log: Record<string, any>,\n  serverSelectionEvent: ServerSelectionEvent,\n  maxDocumentLength: number = DEFAULT_MAX_DOCUMENT_LENGTH\n) {\n  const { selector, operation, topologyDescription, message } = serverSelectionEvent;\n  log.selector = stringifyWithMaxLen(selector, maxDocumentLength);\n  log.operation = operation;\n  log.topologyDescription = stringifyWithMaxLen(topologyDescription, maxDocumentLength);\n  log.message = message;\n\n  return log;\n}\n\nfunction attachCommandFields(\n  log: Record<string, any>,\n  commandEvent: CommandStartedEvent | LoggableCommandSucceededEvent | LoggableCommandFailedEvent\n) {\n  log.commandName = commandEvent.commandName;\n  log.requestId = commandEvent.requestId;\n  log.driverConnectionId = commandEvent.connectionId;\n  const { host, port } = HostAddress.fromString(commandEvent.address).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n  if (commandEvent?.serviceId) {\n    log.serviceId = commandEvent.serviceId.toHexString();\n  }\n  log.databaseName = commandEvent.databaseName;\n  log.serverConnectionId = commandEvent.serverConnectionId;\n\n  return log;\n}\n\nfunction attachConnectionFields(log: Record<string, any>, event: any) {\n  const { host, port } = HostAddress.fromString(event.address).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n\n  return log;\n}\n\nfunction attachSDAMFields(log: Record<string, any>, sdamEvent: SDAMLoggableEvent) {\n  log.topologyId = sdamEvent.topologyId;\n  return log;\n}\n\nfunction attachServerHeartbeatFields(\n  log: Record<string, any>,\n  serverHeartbeatEvent:\n    | LoggableServerHeartbeatFailedEvent\n    | LoggableServerHeartbeatStartedEvent\n    | LoggableServerHeartbeatSucceededEvent\n) {\n  const { awaited, connectionId } = serverHeartbeatEvent;\n  log.awaited = awaited;\n  log.driverConnectionId = serverHeartbeatEvent.connectionId;\n  const { host, port } = HostAddress.fromString(connectionId).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n  return log;\n}\n\n/** @internal */\nexport function defaultLogTransform(\n  logObject: LoggableEvent | Record<string, any>,\n  maxDocumentLength: number = DEFAULT_MAX_DOCUMENT_LENGTH\n): Omit<Log, 's' | 't' | 'c'> {\n  let log: Omit<Log, 's' | 't' | 'c'> = Object.create(null);\n\n  switch (logObject.name) {\n    case SERVER_SELECTION_STARTED:\n      log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n      return log;\n    case SERVER_SELECTION_FAILED:\n      log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n      log.failure = logObject.failure?.message;\n      return log;\n    case SERVER_SELECTION_SUCCEEDED:\n      log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n      log.serverHost = logObject.serverHost;\n      log.serverPort = logObject.serverPort;\n      return log;\n    case WAITING_FOR_SUITABLE_SERVER:\n      log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n      log.remainingTimeMS = logObject.remainingTimeMS;\n      return log;\n    case COMMAND_STARTED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command started';\n      log.command = stringifyWithMaxLen(logObject.command, maxDocumentLength, { relaxed: true });\n      log.databaseName = logObject.databaseName;\n      return log;\n    case COMMAND_SUCCEEDED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command succeeded';\n      log.durationMS = logObject.duration;\n      log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength, { relaxed: true });\n      return log;\n    case COMMAND_FAILED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command failed';\n      log.durationMS = logObject.duration;\n      log.failure = logObject.failure?.message ?? '(redacted)';\n      return log;\n    case CONNECTION_POOL_CREATED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool created';\n      if (logObject.options) {\n        const { maxIdleTimeMS, minPoolSize, maxPoolSize, maxConnecting, waitQueueTimeoutMS } =\n          logObject.options;\n        log = {\n          ...log,\n          maxIdleTimeMS,\n          minPoolSize,\n          maxPoolSize,\n          maxConnecting,\n          waitQueueTimeoutMS\n        };\n      }\n      return log;\n    case CONNECTION_POOL_READY:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool ready';\n      return log;\n    case CONNECTION_POOL_CLEARED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool cleared';\n      if (logObject.serviceId?._bsontype === 'ObjectId') {\n        log.serviceId = logObject.serviceId?.toHexString();\n      }\n      return log;\n    case CONNECTION_POOL_CLOSED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool closed';\n      return log;\n    case CONNECTION_CREATED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection created';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case CONNECTION_READY:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection ready';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case CONNECTION_CLOSED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection closed';\n      log.driverConnectionId = logObject.connectionId;\n      switch (logObject.reason) {\n        case 'stale':\n          log.reason = 'Connection became stale because the pool was cleared';\n          break;\n        case 'idle':\n          log.reason =\n            'Connection has been available but unused for longer than the configured max idle time';\n          break;\n        case 'error':\n          log.reason = 'An error occurred while using the connection';\n          if (logObject.error) {\n            log.error = logObject.error;\n          }\n          break;\n        case 'poolClosed':\n          log.reason = 'Connection pool was closed';\n          break;\n        default:\n          log.reason = `Unknown close reason: ${logObject.reason}`;\n      }\n      return log;\n    case CONNECTION_CHECK_OUT_STARTED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checkout started';\n      return log;\n    case CONNECTION_CHECK_OUT_FAILED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checkout failed';\n      switch (logObject.reason) {\n        case 'poolClosed':\n          log.reason = 'Connection pool was closed';\n          break;\n        case 'timeout':\n          log.reason = 'Wait queue timeout elapsed without a connection becoming available';\n          break;\n        case 'connectionError':\n          log.reason = 'An error occurred while trying to establish a new connection';\n          if (logObject.error) {\n            log.error = logObject.error;\n          }\n          break;\n        default:\n          log.reason = `Unknown close reason: ${logObject.reason}`;\n      }\n      return log;\n    case CONNECTION_CHECKED_OUT:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checked out';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case CONNECTION_CHECKED_IN:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checked in';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case SERVER_OPENING:\n      log = attachSDAMFields(log, logObject);\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Starting server monitoring';\n      return log;\n    case SERVER_CLOSED:\n      log = attachSDAMFields(log, logObject);\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Stopped server monitoring';\n      return log;\n    case SERVER_HEARTBEAT_STARTED:\n      log = attachSDAMFields(log, logObject);\n      log = attachServerHeartbeatFields(log, logObject);\n      log.message = 'Server heartbeat started';\n      return log;\n    case SERVER_HEARTBEAT_SUCCEEDED:\n      log = attachSDAMFields(log, logObject);\n      log = attachServerHeartbeatFields(log, logObject);\n      log.message = 'Server heartbeat succeeded';\n      log.durationMS = logObject.duration;\n      log.serverConnectionId = logObject.serverConnectionId;\n      log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength, { relaxed: true });\n      return log;\n    case SERVER_HEARTBEAT_FAILED:\n      log = attachSDAMFields(log, logObject);\n      log = attachServerHeartbeatFields(log, logObject);\n      log.message = 'Server heartbeat failed';\n      log.durationMS = logObject.duration;\n      log.failure = logObject.failure?.message;\n      return log;\n    case TOPOLOGY_OPENING:\n      log = attachSDAMFields(log, logObject);\n      log.message = 'Starting topology monitoring';\n      return log;\n    case TOPOLOGY_CLOSED:\n      log = attachSDAMFields(log, logObject);\n      log.message = 'Stopped topology monitoring';\n      return log;\n    case TOPOLOGY_DESCRIPTION_CHANGED:\n      log = attachSDAMFields(log, logObject);\n      log.message = 'Topology description changed';\n      log.previousDescription = log.reply = stringifyWithMaxLen(\n        logObject.previousDescription,\n        maxDocumentLength\n      );\n      log.newDescription = log.reply = stringifyWithMaxLen(\n        logObject.newDescription,\n        maxDocumentLength\n      );\n      return log;\n    default:\n      for (const [key, value] of Object.entries(logObject)) {\n        if (value != null) log[key] = value;\n      }\n  }\n  return log;\n}\n\n/** @internal */\nexport class MongoLogger {\n  componentSeverities: Record<MongoLoggableComponent, SeverityLevel>;\n  maxDocumentLength: number;\n  logDestination: MongoDBLogWritable;\n  logDestinationIsStdErr: boolean;\n  pendingLog: PromiseLike<unknown> | unknown = null;\n  private severities: Record<MongoLoggableComponent, Record<SeverityLevel, boolean>>;\n\n  /**\n   * This method should be used when logging errors that do not have a public driver API for\n   * reporting errors.\n   */\n  error = this.log.bind(this, 'error');\n  /**\n   * This method should be used to log situations where undesirable application behaviour might\n   * occur. For example, failing to end sessions on `MongoClient.close`.\n   */\n  warn = this.log.bind(this, 'warn');\n  /**\n   * This method should be used to report high-level information about normal driver behaviour.\n   * For example, the creation of a `MongoClient`.\n   */\n  info = this.log.bind(this, 'info');\n  /**\n   * This method should be used to report information that would be helpful when debugging an\n   * application. For example, a command starting, succeeding or failing.\n   */\n  debug = this.log.bind(this, 'debug');\n  /**\n   * This method should be used to report fine-grained details related to logic flow. For example,\n   * entering and exiting a function body.\n   */\n  trace = this.log.bind(this, 'trace');\n\n  constructor(options: MongoLoggerOptions) {\n    this.componentSeverities = options.componentSeverities;\n    this.maxDocumentLength = options.maxDocumentLength;\n    this.logDestination = options.logDestination;\n    this.logDestinationIsStdErr = options.logDestinationIsStdErr;\n    this.severities = this.createLoggingSeverities();\n  }\n\n  createLoggingSeverities(): Record<MongoLoggableComponent, Record<SeverityLevel, boolean>> {\n    const severities = Object();\n    for (const component of Object.values(MongoLoggableComponent)) {\n      severities[component] = {};\n      for (const severityLevel of Object.values(SeverityLevel)) {\n        severities[component][severityLevel] =\n          compareSeverity(severityLevel, this.componentSeverities[component]) <= 0;\n      }\n    }\n    return severities;\n  }\n\n  turnOffSeverities() {\n    for (const component of Object.values(MongoLoggableComponent)) {\n      this.componentSeverities[component] = SeverityLevel.OFF;\n      for (const severityLevel of Object.values(SeverityLevel)) {\n        this.severities[component][severityLevel] = false;\n      }\n    }\n  }\n\n  private logWriteFailureHandler(error: Error) {\n    if (this.logDestinationIsStdErr) {\n      this.turnOffSeverities();\n      this.clearPendingLog();\n      return;\n    }\n    this.logDestination = createStdioLogger(process.stderr);\n    this.logDestinationIsStdErr = true;\n    this.clearPendingLog();\n    this.error(MongoLoggableComponent.CLIENT, {\n      toLog: function () {\n        return {\n          message: 'User input for mongodbLogPath is now invalid. Logging is halted.',\n          error: error.message\n        };\n      }\n    });\n    this.turnOffSeverities();\n    this.clearPendingLog();\n  }\n\n  private clearPendingLog() {\n    this.pendingLog = null;\n  }\n\n  willLog(component: MongoLoggableComponent, severity: SeverityLevel): boolean {\n    if (severity === SeverityLevel.OFF) return false;\n    return this.severities[component][severity];\n  }\n\n  private log(\n    severity: SeverityLevel,\n    component: MongoLoggableComponent,\n    message: Loggable | string\n  ): void {\n    if (!this.willLog(component, severity)) return;\n\n    let logMessage: Log = { t: new Date(), c: component, s: severity };\n    if (typeof message === 'string') {\n      logMessage.message = message;\n    } else if (typeof message === 'object') {\n      if (isLogConvertible(message)) {\n        logMessage = { ...logMessage, ...message.toLog() };\n      } else {\n        logMessage = { ...logMessage, ...defaultLogTransform(message, this.maxDocumentLength) };\n      }\n    }\n\n    if (isPromiseLike(this.pendingLog)) {\n      this.pendingLog = this.pendingLog\n        // eslint-disable-next-line github/no-then\n        .then(() => this.logDestination.write(logMessage))\n        // eslint-disable-next-line github/no-then\n        .then(this.clearPendingLog.bind(this), this.logWriteFailureHandler.bind(this));\n      return;\n    }\n\n    try {\n      const logResult = this.logDestination.write(logMessage);\n      if (isPromiseLike(logResult)) {\n        // eslint-disable-next-line github/no-then\n        this.pendingLog = logResult.then(\n          this.clearPendingLog.bind(this),\n          this.logWriteFailureHandler.bind(this)\n        );\n      }\n    } catch (error) {\n      this.logWriteFailureHandler(error);\n    }\n  }\n\n  /**\n   * Merges options set through environment variables and the MongoClient, preferring environment\n   * variables when both are set, and substituting defaults for values not set. Options set in\n   * constructor take precedence over both environment variables and MongoClient options.\n   *\n   * @remarks\n   * When parsing component severity levels, invalid values are treated as unset and replaced with\n   * the default severity.\n   *\n   * @param envOptions - options set for the logger from the environment\n   * @param clientOptions - options set for the logger in the MongoClient options\n   * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\n   */\n  static resolveOptions(\n    envOptions: MongoLoggerEnvOptions,\n    clientOptions: MongoLoggerMongoClientOptions\n  ): MongoLoggerOptions {\n    // client options take precedence over env options\n    const resolvedLogPath = resolveLogPath(envOptions, clientOptions);\n    const combinedOptions = {\n      ...envOptions,\n      ...clientOptions,\n      mongodbLogPath: resolvedLogPath.mongodbLogPath,\n      mongodbLogPathIsStdErr: resolvedLogPath.mongodbLogPathIsStdErr\n    };\n    const defaultSeverity = resolveSeverityConfiguration(\n      combinedOptions.mongodbLogComponentSeverities?.default,\n      combinedOptions.MONGODB_LOG_ALL,\n      SeverityLevel.OFF\n    );\n\n    return {\n      componentSeverities: {\n        command: resolveSeverityConfiguration(\n          combinedOptions.mongodbLogComponentSeverities?.command,\n          combinedOptions.MONGODB_LOG_COMMAND,\n          defaultSeverity\n        ),\n        topology: resolveSeverityConfiguration(\n          combinedOptions.mongodbLogComponentSeverities?.topology,\n          combinedOptions.MONGODB_LOG_TOPOLOGY,\n          defaultSeverity\n        ),\n        serverSelection: resolveSeverityConfiguration(\n          combinedOptions.mongodbLogComponentSeverities?.serverSelection,\n          combinedOptions.MONGODB_LOG_SERVER_SELECTION,\n          defaultSeverity\n        ),\n        connection: resolveSeverityConfiguration(\n          combinedOptions.mongodbLogComponentSeverities?.connection,\n          combinedOptions.MONGODB_LOG_CONNECTION,\n          defaultSeverity\n        ),\n        client: resolveSeverityConfiguration(\n          combinedOptions.mongodbLogComponentSeverities?.client,\n          combinedOptions.MONGODB_LOG_CLIENT,\n          defaultSeverity\n        ),\n        default: defaultSeverity\n      },\n      maxDocumentLength:\n        combinedOptions.mongodbLogMaxDocumentLength ??\n        parseUnsignedInteger(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH) ??\n        1000,\n      logDestination: combinedOptions.mongodbLogPath,\n      logDestinationIsStdErr: combinedOptions.mongodbLogPathIsStdErr\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}