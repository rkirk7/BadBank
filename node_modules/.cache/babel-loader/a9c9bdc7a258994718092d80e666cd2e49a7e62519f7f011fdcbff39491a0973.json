{"ast":null,"code":"const MongoClient = require('mongodb').MongoClient;\nconst url = 'mongodb://localhost:27017';\nlet db = null;\nconst initializeApp = require(\"firebase/app\");\nimport { getAuth, createUserWithEmailAndPassword } from \"firebase/auth\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDhKNCusOPW2y52bMwLnOrXIy-u1y1Q4KI\",\n  authDomain: \"bank-f0c47.firebaseapp.com\",\n  projectId: \"bank-f0c47\",\n  storageBucket: \"bank-f0c47.appspot.com\",\n  messagingSenderId: \"710670974978\",\n  appId: \"1:710670974978:web:b724e76530555264b8271b\"\n};\nconst firebaseApp = initializeApp(firebaseConfig);\n\n//connect to Mongo\nMongoClient.connect(url).then(client => {\n  console.log('Connected to MongoDB!');\n  db = client.db('myproject');\n}).catch(err => {\n  console.error('failed to connect to MongoDB', err);\n});\n\n//create user account\n\nasync function createFirebase(name, email, password) {\n  const auth = getAuth();\n  createUserWithEmailAndPassword(auth, email, password).then(userCredential => {\n    const user = userCredential.user;\n    return user;\n  }).catch(error => {\n    const errorCode = error.code;\n    const errorMessage = error.message;\n  });\n}\nasync function create(name, email, password) {\n  if (!db) {\n    throw new Error('database connection not successful');\n  }\n  const collection = db.collection('users');\n  const doc = {\n    name,\n    email,\n    password,\n    balance: 0\n  };\n  try {\n    const result = await collection.insertOne(doc);\n    return result;\n  } catch (err) {\n    console.error('error inserting doc', err);\n    throw err;\n  }\n}\nasync function all() {\n  if (!db) {\n    throw new Error('database connection not successful');\n  }\n  try {\n    const docs = await db.collection('users').find().toArray();\n    return docs;\n  } catch (err) {\n    console.error('error retrieving docs', err);\n    throw err;\n  }\n}\nasync function balance(email) {\n  if (!db) {\n    throw new Error('database connection not successful');\n  }\n  try {\n    const docs = await db.collection('users').find({\n      \"email\": email\n    }).toArray();\n    console.log(docs);\n    return docs[0];\n  } catch (err) {\n    console.error('error retrieving docs', err);\n  }\n}\nasync function updateBalance(email, newamount) {\n  if (!db) {\n    throw new Error('database connection not successful');\n  }\n  try {\n    const result = await db.collection('users').updateOne({\n      email: email\n    }, {\n      $set: {\n        balance: newamount\n      }\n    });\n    return newamount;\n  } catch (err) {\n    console.error('Error updating balance:', err);\n    throw err;\n  }\n}\nasync function login(email, password) {\n  if (!db) {\n    throw new Error('database connection not successful');\n  }\n  try {\n    const docs = await db.collection('users').find({\n      \"email\": email\n    }).toArray();\n    return docs[0];\n  } catch (err) {\n    console.error('error retrieving docs', err);\n  }\n}\nmodule.exports = {\n  create,\n  all,\n  balance,\n  updateBalance,\n  login\n};","map":{"version":3,"names":["MongoClient","require","url","db","initializeApp","getAuth","createUserWithEmailAndPassword","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","connect","then","client","console","log","catch","err","error","createFirebase","name","email","password","auth","userCredential","user","errorCode","code","errorMessage","message","create","Error","collection","doc","balance","result","insertOne","all","docs","find","toArray","updateBalance","newamount","updateOne","$set","login","module","exports"],"sources":["/Users/Regan/Documents/GitHub/BadBank/dal.js"],"sourcesContent":["const MongoClient = require('mongodb').MongoClient;\nconst url          = 'mongodb://localhost:27017';\nlet db              = null;\nconst initializeApp = require(\"firebase/app\");\nimport { getAuth, createUserWithEmailAndPassword } from \"firebase/auth\";\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDhKNCusOPW2y52bMwLnOrXIy-u1y1Q4KI\",\n    authDomain: \"bank-f0c47.firebaseapp.com\",\n    projectId: \"bank-f0c47\",\n    storageBucket: \"bank-f0c47.appspot.com\",\n    messagingSenderId: \"710670974978\",\n    appId: \"1:710670974978:web:b724e76530555264b8271b\"\n  };\n  \n  const firebaseApp = initializeApp(firebaseConfig);\n\n//connect to Mongo\nMongoClient.connect(url)\n  .then((client) => {\n    console.log('Connected to MongoDB!')\n\n     db = client.db('myproject');\n  })\n  .catch(err => {\n    console.error('failed to connect to MongoDB', err);\n  });\n\n  //create user account\n\n  async function createFirebase(name, email, password) {\n    const auth = getAuth();\n    createUserWithEmailAndPassword(auth, email, password)\n      .then((userCredential) => {\n        const user = userCredential.user;\n        return user;\n      })\n      .catch((error) => {\n        const errorCode = error.code;\n        const errorMessage = error.message;\n      });\n  }\n\n  async function create(name, email, password) {\n    if (!db) {\n        throw new Error('database connection not successful');\n    }\n    const collection = db.collection('users');\n    const doc = {name, email, password, balance: 0};\n    try {\n        const result = await collection.insertOne(doc);\n        return result;\n    } catch (err) {\n        console.error('error inserting doc', err);\n        throw err;\n    }\n  }\n\n  async function all() {\n    if (!db) {\n        throw new Error('database connection not successful');\n    }\n    try {\n        const docs = await db.collection('users').find().toArray();\n        return docs\n    } catch (err) {\n        console.error('error retrieving docs', err);\n        throw err;\n    }\n}\n\nasync function balance(email) {\n    if (!db) {\n        throw new Error('database connection not successful');\n    }\n    try {\n        const docs = await db.collection('users').find( {\"email\" : email}).toArray();\n        console.log(docs);\n        return docs[0];\n    } catch (err) {\n        console.error('error retrieving docs', err);\n    }\n}\n\nasync function updateBalance(email, newamount) {\n    if (!db) {\n        throw new Error('database connection not successful');\n    }\n    try {\n        const result = await db.collection('users').updateOne(\n            { email: email },\n            { $set: { balance: newamount } }\n        );\n        return newamount;\n    } catch (err) {\n        console.error('Error updating balance:', err);\n        throw err;\n    }\n}\n\nasync function login(email, password) {\n    if (!db) {\n        throw new Error('database connection not successful');\n    }\n    try {\n        const docs = await db.collection('users').find( {\"email\" : email}).toArray();\n        return docs[0];\n    } catch (err) {\n        console.error('error retrieving docs', err);\n        \n}\n}\n\n\n  module.exports = {create,all, balance, updateBalance, login}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}