{"ast":null,"code":"const {\n  getAuth,\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  browserSessionPersistence,\n  setPersistence,\n  signOut\n} = require(\"firebase/auth\");\nconst {\n  initializeApp\n} = require('firebase-admin/app');\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDhKNCusOPW2y52bMwLnOrXIy-u1y1Q4KI\",\n  authDomain: \"bank-f0c47.firebaseapp.com\",\n  projectId: \"bank-f0c47\",\n  storageBucket: \"bank-f0c47.appspot.com\",\n  messagingSenderId: \"710670974978\",\n  appId: \"1:710670974978:web:b724e76530555264b8271b\"\n};\nconst firebaseApp = initializeApp(firebaseConfig);\nconst auth = getAuth();\nsetPersistence(auth, browserSessionPersistence);\nasync function createFirebase(name, email, password, requestedRole) {\n  if (!db) {\n    throw new Error('Database connection not established');\n  }\n  try {\n    if (await checkAccount(email)) {\n      return true;\n    } else {\n      await createUserWithEmailAndPassword(auth, email, password);\n      return console.log('successfully created account in firebase');\n      // return await create(name, email, requestedRole);          \n    }\n  } catch (error) {\n    console.error('Error creating user with Firebase:', error.code, error.message);\n    throw error;\n  }\n}\nasync function checkAccount(email) {\n  try {\n    getAuth().getUserByEmail(email).then(userRecord => {\n      // See the UserRecord reference doc for the contents of userRecord.\n      console.log(\"Successfully fetched user data: \".concat(userRecord.toJSON()));\n    }).catch(error => {\n      console.log('Error fetching user data:', error);\n    });\n  } catch (error) {\n    throw error;\n  }\n}\nasync function loginFirebase(email, password) {\n  try {\n    await signInWithEmailAndPassword(auth, email, password);\n    return console.log('successfully logged into account in firebase');\n\n    //return await login(email);\n  } catch (error) {\n    console.error('Error logging in with Firebase:', error.code, error.message);\n    return error;\n  }\n}\nasync function logout() {\n  try {\n    await signOut(auth);\n    return;\n  } catch (error) {\n    console.error('Error during logout:', error);\n    throw error;\n  }\n}\nasync function checkAuthorization() {\n  const user = auth.currentUser;\n  if (user) {\n    return console.log(user.email);\n  } else {\n    return false;\n  }\n}\nmodule.exports = {\n  createFirebase,\n  loginFirebase,\n  logout,\n  checkAuthorization\n};","map":{"version":3,"names":["getAuth","createUserWithEmailAndPassword","signInWithEmailAndPassword","browserSessionPersistence","setPersistence","signOut","require","initializeApp","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","auth","createFirebase","name","email","password","requestedRole","db","Error","checkAccount","console","log","error","code","message","getUserByEmail","then","userRecord","concat","toJSON","catch","loginFirebase","logout","checkAuthorization","user","currentUser","module","exports"],"sources":["/Users/Regan/Documents/GitHub/BadBank/public/src/firebase.js"],"sourcesContent":["const { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, browserSessionPersistence, setPersistence, signOut } = require(\"firebase/auth\");\nconst { initializeApp } = require('firebase-admin/app');\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDhKNCusOPW2y52bMwLnOrXIy-u1y1Q4KI\",\n    authDomain: \"bank-f0c47.firebaseapp.com\",\n    projectId: \"bank-f0c47\",\n    storageBucket: \"bank-f0c47.appspot.com\",\n    messagingSenderId: \"710670974978\",\n    appId: \"1:710670974978:web:b724e76530555264b8271b\"\n  };\n  \n  const firebaseApp = initializeApp(firebaseConfig);\n  const auth = getAuth();\n  setPersistence(auth, browserSessionPersistence);\n\n  async function createFirebase(name, email, password, requestedRole) {\n    if (!db) {\n        throw new Error('Database connection not established');\n    }\n    try {\n        if (await checkAccount(email)) {\n            return true;\n        } else {\n                await createUserWithEmailAndPassword(auth, email, password);\n                return console.log('successfully created account in firebase');\n               // return await create(name, email, requestedRole);          \n        }\n      } catch (error) {\n        console.error('Error creating user with Firebase:', error.code, error.message);\n        throw error;\n      }\n  }\n\n  async function checkAccount(email) {\n    try {\n        getAuth()\n  .getUserByEmail(email)\n  .then((userRecord) => {\n    // See the UserRecord reference doc for the contents of userRecord.\n    console.log(`Successfully fetched user data: ${userRecord.toJSON()}`);\n  })\n  .catch((error) => {\n    console.log('Error fetching user data:', error);\n  });\n      } catch (error) {\n        throw error;\n      }\n  }\n\n  async function loginFirebase(email, password) {\n    try {\n        await signInWithEmailAndPassword(auth, email, password);\n        return console.log('successfully logged into account in firebase');\n\n        //return await login(email);\n\n    } catch (error) {\n        console.error('Error logging in with Firebase:', error.code, error.message);\n        return(error);\n    }\n}\n\nasync function logout() {\n    try {\n        await signOut(auth);\n        return;\n    } catch (error) {\n        console.error('Error during logout:', error);\n        throw error;\n    }\n}\n\nasync function checkAuthorization() {\n    const user = auth.currentUser;\n\n    if (user) {\n      return console.log(user.email);\n    } else {\n     return false;\n    }\n}\n\n\n  module.exports = {createFirebase, loginFirebase, logout, checkAuthorization}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}