{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CreateSearchIndexesOperation = void 0;\nconst operation_1 = require(\"../operation\");\n/** @internal */\nclass CreateSearchIndexesOperation extends operation_1.AbstractOperation {\n  constructor(collection, descriptions) {\n    super();\n    this.collection = collection;\n    this.descriptions = descriptions;\n  }\n  get commandName() {\n    return 'createSearchIndexes';\n  }\n  async execute(server, session) {\n    var _res$indexesCreated;\n    const namespace = this.collection.fullNamespace;\n    const command = {\n      createSearchIndexes: namespace.collection,\n      indexes: this.descriptions\n    };\n    const res = await server.command(namespace, command, {\n      session\n    });\n    const indexesCreated = (_res$indexesCreated = res === null || res === void 0 ? void 0 : res.indexesCreated) !== null && _res$indexesCreated !== void 0 ? _res$indexesCreated : [];\n    return indexesCreated.map(_ref => {\n      let {\n        name\n      } = _ref;\n      return name;\n    });\n  }\n}\nexports.CreateSearchIndexesOperation = CreateSearchIndexesOperation;","map":{"version":3,"names":["operation_1","require","CreateSearchIndexesOperation","AbstractOperation","constructor","collection","descriptions","commandName","execute","server","session","_res$indexesCreated","namespace","fullNamespace","command","createSearchIndexes","indexes","res","indexesCreated","map","_ref","name","exports"],"sources":["/Users/Regan/Documents/GitHub/BadBank/node_modules/mongodb/src/operations/search_indexes/create.ts"],"sourcesContent":["import type { Document } from 'bson';\n\nimport type { Collection } from '../../collection';\nimport type { Server } from '../../sdam/server';\nimport type { ClientSession } from '../../sessions';\nimport { AbstractOperation } from '../operation';\n\n/**\n * @public\n */\nexport interface SearchIndexDescription extends Document {\n  /** The name of the index. */\n  name?: string;\n\n  /** The index definition. */\n  definition: Document;\n\n  /** The type of the index.  Currently `search` or `vectorSearch` are supported. */\n  type?: string;\n}\n\n/** @internal */\nexport class CreateSearchIndexesOperation extends AbstractOperation<string[]> {\n  constructor(\n    private readonly collection: Collection,\n    private readonly descriptions: ReadonlyArray<SearchIndexDescription>\n  ) {\n    super();\n  }\n\n  override get commandName() {\n    return 'createSearchIndexes' as const;\n  }\n\n  override async execute(server: Server, session: ClientSession | undefined): Promise<string[]> {\n    const namespace = this.collection.fullNamespace;\n    const command = {\n      createSearchIndexes: namespace.collection,\n      indexes: this.descriptions\n    };\n\n    const res = await server.command(namespace, command, { session });\n\n    const indexesCreated: Array<{ name: string }> = res?.indexesCreated ?? [];\n    return indexesCreated.map(({ name }) => name);\n  }\n}\n"],"mappings":";;;;;;AAKA,MAAAA,WAAA,GAAAC,OAAA;AAgBA;AACA,MAAaC,4BAA6B,SAAQF,WAAA,CAAAG,iBAA2B;EAC3EC,YACmBC,UAAsB,EACtBC,YAAmD;IAEpE,KAAK,EAAE;IAHU,KAAAD,UAAU,GAAVA,UAAU;IACV,KAAAC,YAAY,GAAZA,YAAY;EAG/B;EAEA,IAAaC,WAAWA,CAAA;IACtB,OAAO,qBAA8B;EACvC;EAES,MAAMC,OAAOA,CAACC,MAAc,EAAEC,OAAkC;IAAA,IAAAC,mBAAA;IACvE,MAAMC,SAAS,GAAG,IAAI,CAACP,UAAU,CAACQ,aAAa;IAC/C,MAAMC,OAAO,GAAG;MACdC,mBAAmB,EAAEH,SAAS,CAACP,UAAU;MACzCW,OAAO,EAAE,IAAI,CAACV;KACf;IAED,MAAMW,GAAG,GAAG,MAAMR,MAAM,CAACK,OAAO,CAACF,SAAS,EAAEE,OAAO,EAAE;MAAEJ;IAAO,CAAE,CAAC;IAEjE,MAAMQ,cAAc,IAAAP,mBAAA,GAA4BM,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEC,cAAc,cAAAP,mBAAA,cAAAA,mBAAA,GAAI,EAAE;IACzE,OAAOO,cAAc,CAACC,GAAG,CAACC,IAAA;MAAA,IAAC;QAAEC;MAAI,CAAE,GAAAD,IAAA;MAAA,OAAKC,IAAI;IAAA,EAAC;EAC/C;;AAvBFC,OAAA,CAAApB,4BAAA,GAAAA,4BAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}