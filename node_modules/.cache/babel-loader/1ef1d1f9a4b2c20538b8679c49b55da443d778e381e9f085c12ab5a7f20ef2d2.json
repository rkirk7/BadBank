{"ast":null,"code":"import React from \"react\";\nimport { Card, CurrentUser } from \"./context\";\nimport { useNavigate } from \"react-router-dom\";\nexport default function Withdraw() {\n  const {\n    currentUser,\n    setCurrentUser\n  } = React.useContext(CurrentUser);\n  const [withdrawal, setWithdrawal] = React.useState(0);\n  const [lastWithdrawal, setLastWithdrawal] = React.useState(0);\n  const [balance, setBalance] = React.useState(currentUser.balance);\n  const [formFilled, setFormFilled] = React.useState(true);\n  const [withdrawalComplete, setWtihdrawalComplete] = React.useState(false);\n  const navigate = useNavigate();\n  const authorizationURL = \"/account/authorization/\";\n  async function reviewAuthorization() {\n    var res = await fetch(authorizationURL);\n    if (res.ok) {\n      let user = await res.json();\n      if (!user.email) {\n        setTimeout(() => {\n          navigate('/');\n        }, 0);\n      }\n    }\n    ;\n  }\n  React.useEffect(() => {\n    if (currentUser.email === '') {\n      reviewAuthorization();\n    } else {\n      getBalance();\n    }\n  }, []);\n  async function getBalance() {\n    const url = \"/account/balance/\".concat(currentUser.email);\n    var res = await fetch(url);\n    var data = await res.json();\n    setBalance(parseInt(data.balance));\n  }\n  function makeWithdrawal() {\n    if (isNaN(Number(withdrawal))) {\n      alert('Your withdrawal must be a valid number.');\n      return;\n    }\n    if (Number(withdrawal) <= 0) {\n      alert('Please enter your withdrawal amount as a positive number.');\n      return;\n    }\n    if (!Number.isInteger(Number(withdrawal))) {\n      alert('Error: You must withdraw dollars only, not cents. Please round up or down and try again.');\n      return;\n    }\n    if (Number(withdrawal) > Number(balance)) {\n      alert('Your balance is too low. Please enter a lower withdrawal amount.');\n      return;\n    } else {\n      let newBalance = parseInt(balance) - parseInt(withdrawal);\n      setBalance(newBalance);\n      const updateUrl = \"/account/updateBalance/\".concat(currentUser.email, \"/\").concat(newBalance, \"/withdrawal/\").concat(withdrawal);\n      (async () => {\n        await fetch(updateUrl);\n        setBalance(newBalance);\n        setCurrentUser(user => ({\n          ...user,\n          balance: newBalance\n        }));\n        setLastWithdrawal(withdrawal);\n        setWithdrawal(0);\n        setWtihdrawalComplete(true);\n      })();\n    }\n  }\n  React.useEffect(() => {\n    setFormFilled(withdrawal != '0' && withdrawal != '');\n  }, [withdrawal]);\n  return /*#__PURE__*/React.createElement(Card, {\n    bgcolor: \"primary\",\n    txtcolor: \"white\",\n    header: \"Make a Withdrawal\",\n    text: \"\".concat(currentUser.name, \", your balance is $\").concat(balance, \".\"),\n    title: withdrawalComplete && \"You have successfully withdrawn $\".concat(lastWithdrawal, \"!\"),\n    body: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"form\", null, \"Withdrawal Amount\", /*#__PURE__*/React.createElement(\"br\", null), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"input\",\n      className: \"form-control\",\n      id: \"withdrawal\",\n      placeholder: \"Enter Withdrawal Amount\",\n      value: withdrawal,\n      onChange: e => {\n        setWithdrawal(e.currentTarget.value);\n        setWtihdrawalComplete(false);\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", null))),\n    centered: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-light\",\n      onClick: makeWithdrawal,\n      disabled: !formFilled\n    }, \"Make Withdrawal\"), \" \", /*#__PURE__*/React.createElement(\"br\", null))\n  });\n}","map":{"version":3,"names":["React","Card","CurrentUser","useNavigate","Withdraw","currentUser","setCurrentUser","useContext","withdrawal","setWithdrawal","useState","lastWithdrawal","setLastWithdrawal","balance","setBalance","formFilled","setFormFilled","withdrawalComplete","setWtihdrawalComplete","navigate","authorizationURL","reviewAuthorization","res","fetch","ok","user","json","email","setTimeout","useEffect","getBalance","url","concat","data","parseInt","makeWithdrawal","isNaN","Number","alert","isInteger","newBalance","updateUrl","createElement","bgcolor","txtcolor","header","text","name","title","body","Fragment","type","className","id","placeholder","value","onChange","e","currentTarget","centered","onClick","disabled"],"sources":["/Users/Regan/Documents/GitHub/BadBank/public/src/Components/withdraw.js"],"sourcesContent":["import React from \"react\";\nimport { Card, CurrentUser } from \"./context\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function Withdraw(){\n    const { currentUser, setCurrentUser } = React.useContext(CurrentUser);\n    const [withdrawal, setWithdrawal] = React.useState(0);\n    const [lastWithdrawal, setLastWithdrawal] = React.useState(0);\n    const [balance, setBalance] = React.useState(currentUser.balance);\n    const [formFilled, setFormFilled] = React.useState(true);\n    const [withdrawalComplete, setWtihdrawalComplete] = React.useState(false);\n\n    const navigate = useNavigate();\n\n    const authorizationURL = `/account/authorization/`;\n    async function reviewAuthorization() {\n       var res = await fetch(authorizationURL);\n       if (res.ok) {\n       let user = await res.json();\n       if (!user.email) {\n           setTimeout(() => {\n            navigate('/');\n        }, 0);\n      }\n      }; \n    }\n\n    React.useEffect(() => {\n        if (currentUser.email === '') {\n        reviewAuthorization();\n        }  else {\n            getBalance();\n        }\n      }, []);\n\n      async function getBalance() {\n        const url = `/account/balance/${currentUser.email}`;\n        var res = await fetch(url);\n        var data = await res.json();\n        setBalance(parseInt(data.balance));\n     }\n\n\n\n    function makeWithdrawal() {\n        if (isNaN(Number(withdrawal))) {\n            alert('Your withdrawal must be a valid number.'); \n            return;\n        }\n        if ((Number(withdrawal)) <= 0) {\n            alert('Please enter your withdrawal amount as a positive number.'); \n            return;\n        }\n        if (!Number.isInteger(Number(withdrawal))) {\n            alert('Error: You must withdraw dollars only, not cents. Please round up or down and try again.'); \n            return;\n        }\n        if (Number(withdrawal) > Number(balance)) {\n            alert('Your balance is too low. Please enter a lower withdrawal amount.'); \n            return;\n        }\n\n        else {\n        let newBalance = parseInt(balance) - parseInt(withdrawal)\n        setBalance(newBalance);\n        const updateUrl = `/account/updateBalance/${currentUser.email}/${newBalance}/withdrawal/${withdrawal}`;\n        (async () => {\n       await fetch(updateUrl);\n       setBalance(newBalance);\n       setCurrentUser(user => ({\n        ...user,\n        balance: newBalance\n      })); \n        setLastWithdrawal(withdrawal);\n        setWithdrawal(0);\n        setWtihdrawalComplete(true);\n        })();\n        } \n    }\n\n    React.useEffect(() =>{\n        setFormFilled(withdrawal != '0' && withdrawal != ''); \n    }, [withdrawal])\n    \n    return (\n        <Card \n        bgcolor=\"primary\"\n        txtcolor=\"white\"\n        header=\"Make a Withdrawal\"\n        text={`${currentUser.name}, your balance is $${balance}.`}       \n        title={withdrawalComplete && `You have successfully withdrawn $${lastWithdrawal}!`}       \n        body= {\n            <>\n            <form>\n            Withdrawal Amount<br/>\n            <input type=\"input\" className=\"form-control\" id=\"withdrawal\" placeholder=\"Enter Withdrawal Amount\" value={withdrawal} onChange={e => {\n                setWithdrawal(e.currentTarget.value);\n                setWtihdrawalComplete(false);\n                }} /> <br /> \n                </form>\n            </>\n        }\n        \n        centered={\n        <>          \n  <button type=\"submit\" className=\"btn btn-light\" onClick={makeWithdrawal} disabled={!formFilled}>Make Withdrawal</button> <br />\n        </>\n        }\n        />\n     );\n }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}