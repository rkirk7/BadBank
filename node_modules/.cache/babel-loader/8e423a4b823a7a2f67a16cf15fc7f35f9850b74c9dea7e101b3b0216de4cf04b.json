{"ast":null,"code":"\"use strict\";\n\nvar _a;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AutoEncrypter = exports.AutoEncryptionLoggerLevel = void 0;\nconst bson_1 = require(\"../bson\");\nconst deps_1 = require(\"../deps\");\nconst error_1 = require(\"../error\");\nconst mongo_client_1 = require(\"../mongo_client\");\nconst utils_1 = require(\"../utils\");\nconst cryptoCallbacks = require(\"./crypto_callbacks\");\nconst errors_1 = require(\"./errors\");\nconst mongocryptd_manager_1 = require(\"./mongocryptd_manager\");\nconst providers_1 = require(\"./providers\");\nconst state_machine_1 = require(\"./state_machine\");\n/** @public */\nexports.AutoEncryptionLoggerLevel = Object.freeze({\n  FatalError: 0,\n  Error: 1,\n  Warning: 2,\n  Info: 3,\n  Trace: 4\n});\n// Typescript errors if we index objects with `Symbol.for(...)`, so\n// to avoid TS errors we pull them out into variables.  Then we can type\n// the objects (and class) that we expect to see them on and prevent TS\n// errors.\n/** @internal */\nconst kDecorateResult = Symbol.for('@@mdb.decorateDecryptionResult');\n/** @internal */\nconst kDecoratedKeys = Symbol.for('@@mdb.decryptedKeys');\n/**\n * @internal An internal class to be used by the driver for auto encryption\n * **NOTE**: Not meant to be instantiated directly, this is for internal use only.\n */\nclass AutoEncrypter {\n  /** @internal */\n  static getMongoCrypt() {\n    const encryption = (0, deps_1.getMongoDBClientEncryption)();\n    if ('kModuleError' in encryption) {\n      throw encryption.kModuleError;\n    }\n    return encryption.MongoCrypt;\n  }\n  /**\n   * Create an AutoEncrypter\n   *\n   * **Note**: Do not instantiate this class directly. Rather, supply the relevant options to a MongoClient\n   *\n   * **Note**: Supplying `options.schemaMap` provides more security than relying on JSON Schemas obtained from the server.\n   * It protects against a malicious server advertising a false JSON Schema, which could trick the client into sending unencrypted data that should be encrypted.\n   * Schemas supplied in the schemaMap only apply to configuring automatic encryption for Client-Side Field Level Encryption.\n   * Other validation rules in the JSON schema will not be enforced by the driver and will result in an error.\n   *\n   * @example <caption>Create an AutoEncrypter that makes use of mongocryptd</caption>\n   * ```ts\n   * // Enabling autoEncryption via a MongoClient using mongocryptd\n   * const { MongoClient } = require('mongodb');\n   * const client = new MongoClient(URL, {\n   *   autoEncryption: {\n   *     kmsProviders: {\n   *       aws: {\n   *         accessKeyId: AWS_ACCESS_KEY,\n   *         secretAccessKey: AWS_SECRET_KEY\n   *       }\n   *     }\n   *   }\n   * });\n   * ```\n   *\n   * await client.connect();\n   * // From here on, the client will be encrypting / decrypting automatically\n   * @example <caption>Create an AutoEncrypter that makes use of libmongocrypt's CSFLE shared library</caption>\n   * ```ts\n   * // Enabling autoEncryption via a MongoClient using CSFLE shared library\n   * const { MongoClient } = require('mongodb');\n   * const client = new MongoClient(URL, {\n   *   autoEncryption: {\n   *     kmsProviders: {\n   *       aws: {}\n   *     },\n   *     extraOptions: {\n   *       cryptSharedLibPath: '/path/to/local/crypt/shared/lib',\n   *       cryptSharedLibRequired: true\n   *     }\n   *   }\n   * });\n   * ```\n   *\n   * await client.connect();\n   * // From here on, the client will be encrypting / decrypting automatically\n   */\n  constructor(client, options) {\n    var _options$options;\n    /**\n     * Used by devtools to enable decorating decryption results.\n     *\n     * When set and enabled, `decrypt` will automatically recursively\n     * traverse a decrypted document and if a field has been decrypted,\n     * it will mark it as decrypted.  Compass uses this to determine which\n     * fields were decrypted.\n     */\n    this[_a] = false;\n    this._client = client;\n    this._bypassEncryption = options.bypassAutoEncryption === true;\n    this._keyVaultNamespace = options.keyVaultNamespace || 'admin.datakeys';\n    this._keyVaultClient = options.keyVaultClient || client;\n    this._metaDataClient = options.metadataClient || client;\n    this._proxyOptions = options.proxyOptions || {};\n    this._tlsOptions = options.tlsOptions || {};\n    this._kmsProviders = options.kmsProviders || {};\n    const mongoCryptOptions = {\n      cryptoCallbacks\n    };\n    if (options.schemaMap) {\n      mongoCryptOptions.schemaMap = Buffer.isBuffer(options.schemaMap) ? options.schemaMap : (0, bson_1.serialize)(options.schemaMap);\n    }\n    if (options.encryptedFieldsMap) {\n      mongoCryptOptions.encryptedFieldsMap = Buffer.isBuffer(options.encryptedFieldsMap) ? options.encryptedFieldsMap : (0, bson_1.serialize)(options.encryptedFieldsMap);\n    }\n    mongoCryptOptions.kmsProviders = !Buffer.isBuffer(this._kmsProviders) ? (0, bson_1.serialize)(this._kmsProviders) : this._kmsProviders;\n    if ((_options$options = options.options) !== null && _options$options !== void 0 && _options$options.logger) {\n      mongoCryptOptions.logger = options.options.logger;\n    }\n    if (options.extraOptions && options.extraOptions.cryptSharedLibPath) {\n      mongoCryptOptions.cryptSharedLibPath = options.extraOptions.cryptSharedLibPath;\n    }\n    if (options.bypassQueryAnalysis) {\n      mongoCryptOptions.bypassQueryAnalysis = options.bypassQueryAnalysis;\n    }\n    this._bypassMongocryptdAndCryptShared = this._bypassEncryption || !!options.bypassQueryAnalysis;\n    if (options.extraOptions && options.extraOptions.cryptSharedLibSearchPaths) {\n      // Only for driver testing\n      mongoCryptOptions.cryptSharedLibSearchPaths = options.extraOptions.cryptSharedLibSearchPaths;\n    } else if (!this._bypassMongocryptdAndCryptShared) {\n      mongoCryptOptions.cryptSharedLibSearchPaths = ['$SYSTEM'];\n    }\n    const MongoCrypt = AutoEncrypter.getMongoCrypt();\n    this._mongocrypt = new MongoCrypt(mongoCryptOptions);\n    this._contextCounter = 0;\n    if (options.extraOptions && options.extraOptions.cryptSharedLibRequired && !this.cryptSharedLibVersionInfo) {\n      throw new errors_1.MongoCryptInvalidArgumentError('`cryptSharedLibRequired` set but no crypt_shared library loaded');\n    }\n    // Only instantiate mongocryptd manager/client once we know for sure\n    // that we are not using the CSFLE shared library.\n    if (!this._bypassMongocryptdAndCryptShared && !this.cryptSharedLibVersionInfo) {\n      this._mongocryptdManager = new mongocryptd_manager_1.MongocryptdManager(options.extraOptions);\n      const clientOptions = {\n        serverSelectionTimeoutMS: 10000\n      };\n      if (options.extraOptions == null || typeof options.extraOptions.mongocryptdURI !== 'string') {\n        clientOptions.family = 4;\n      }\n      this._mongocryptdClient = new mongo_client_1.MongoClient(this._mongocryptdManager.uri, clientOptions);\n    }\n  }\n  /**\n   * Initializes the auto encrypter by spawning a mongocryptd and connecting to it.\n   *\n   * This function is a no-op when bypassSpawn is set or the crypt shared library is used.\n   */\n  async init() {\n    if (this._bypassMongocryptdAndCryptShared || this.cryptSharedLibVersionInfo) {\n      return;\n    }\n    if (!this._mongocryptdManager) {\n      throw new error_1.MongoRuntimeError('Reached impossible state: mongocryptdManager is undefined when neither bypassSpawn nor the shared lib are specified.');\n    }\n    if (!this._mongocryptdClient) {\n      throw new error_1.MongoRuntimeError('Reached impossible state: mongocryptdClient is undefined when neither bypassSpawn nor the shared lib are specified.');\n    }\n    if (!this._mongocryptdManager.bypassSpawn) {\n      await this._mongocryptdManager.spawn();\n    }\n    try {\n      const client = await this._mongocryptdClient.connect();\n      return client;\n    } catch (error) {\n      const {\n        message\n      } = error;\n      if (message && (message.match(/timed out after/) || message.match(/ENOTFOUND/))) {\n        throw new error_1.MongoRuntimeError('Unable to connect to `mongocryptd`, please make sure it is running or in your PATH for auto-spawn', {\n          cause: error\n        });\n      }\n      throw error;\n    }\n  }\n  /**\n   * Cleans up the `_mongocryptdClient`, if present.\n   */\n  async teardown(force) {\n    var _this$_mongocryptdCli;\n    await ((_this$_mongocryptdCli = this._mongocryptdClient) === null || _this$_mongocryptdCli === void 0 ? void 0 : _this$_mongocryptdCli.close(force));\n  }\n  /**\n   * Encrypt a command for a given namespace.\n   */\n  async encrypt(ns, cmd) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (this._bypassEncryption) {\n      // If `bypassAutoEncryption` has been specified, don't encrypt\n      return cmd;\n    }\n    const commandBuffer = Buffer.isBuffer(cmd) ? cmd : (0, bson_1.serialize)(cmd, options);\n    const context = this._mongocrypt.makeEncryptionContext(utils_1.MongoDBCollectionNamespace.fromString(ns).db, commandBuffer);\n    context.id = this._contextCounter++;\n    context.ns = ns;\n    context.document = cmd;\n    const stateMachine = new state_machine_1.StateMachine({\n      promoteValues: false,\n      promoteLongs: false,\n      proxyOptions: this._proxyOptions,\n      tlsOptions: this._tlsOptions\n    });\n    return await stateMachine.execute(this, context);\n  }\n  /**\n   * Decrypt a command response\n   */\n  async decrypt(response) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const buffer = Buffer.isBuffer(response) ? response : (0, bson_1.serialize)(response, options);\n    const context = this._mongocrypt.makeDecryptionContext(buffer);\n    context.id = this._contextCounter++;\n    const stateMachine = new state_machine_1.StateMachine({\n      ...options,\n      proxyOptions: this._proxyOptions,\n      tlsOptions: this._tlsOptions\n    });\n    const decorateResult = this[kDecorateResult];\n    const result = await stateMachine.execute(this, context);\n    if (decorateResult) {\n      decorateDecryptionResult(result, response);\n    }\n    return result;\n  }\n  /**\n   * Ask the user for KMS credentials.\n   *\n   * This returns anything that looks like the kmsProviders original input\n   * option. It can be empty, and any provider specified here will override\n   * the original ones.\n   */\n  async askForKMSCredentials() {\n    return await (0, providers_1.refreshKMSCredentials)(this._kmsProviders);\n  }\n  /**\n   * Return the current libmongocrypt's CSFLE shared library version\n   * as `{ version: bigint, versionStr: string }`, or `null` if no CSFLE\n   * shared library was loaded.\n   */\n  get cryptSharedLibVersionInfo() {\n    return this._mongocrypt.cryptSharedLibVersionInfo;\n  }\n  static get libmongocryptVersion() {\n    return AutoEncrypter.getMongoCrypt().libmongocryptVersion;\n  }\n}\nexports.AutoEncrypter = AutoEncrypter;\n_a = kDecorateResult;\n/**\n * Recurse through the (identically-shaped) `decrypted` and `original`\n * objects and attach a `decryptedKeys` property on each sub-object that\n * contained encrypted fields. Because we only call this on BSON responses,\n * we do not need to worry about circular references.\n *\n * @internal\n */\nfunction decorateDecryptionResult(decrypted, original) {\n  let isTopLevelDecorateCall = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  if (isTopLevelDecorateCall) {\n    // The original value could have been either a JS object or a BSON buffer\n    if (Buffer.isBuffer(original)) {\n      original = (0, bson_1.deserialize)(original);\n    }\n    if (Buffer.isBuffer(decrypted)) {\n      throw new error_1.MongoRuntimeError('Expected result of decryption to be deserialized BSON object');\n    }\n  }\n  if (!decrypted || typeof decrypted !== 'object') return;\n  for (const k of Object.keys(decrypted)) {\n    const originalValue = original[k];\n    // An object was decrypted by libmongocrypt if and only if it was\n    // a BSON Binary object with subtype 6.\n    if (originalValue && originalValue._bsontype === 'Binary' && originalValue.sub_type === 6) {\n      if (!decrypted[kDecoratedKeys]) {\n        Object.defineProperty(decrypted, kDecoratedKeys, {\n          value: [],\n          configurable: true,\n          enumerable: false,\n          writable: false\n        });\n      }\n      // this is defined in the preceding if-statement\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      decrypted[kDecoratedKeys].push(k);\n      // Do not recurse into this decrypted value. It could be a sub-document/array,\n      // in which case there is no original value associated with its subfields.\n      continue;\n    }\n    decorateDecryptionResult(decrypted[k], originalValue, false);\n  }\n}","map":{"version":3,"names":["bson_1","require","deps_1","error_1","mongo_client_1","utils_1","cryptoCallbacks","errors_1","mongocryptd_manager_1","providers_1","state_machine_1","exports","AutoEncryptionLoggerLevel","Object","freeze","FatalError","Error","Warning","Info","Trace","kDecorateResult","Symbol","for","kDecoratedKeys","AutoEncrypter","getMongoCrypt","encryption","getMongoDBClientEncryption","kModuleError","MongoCrypt","constructor","client","options","_options$options","_a","_client","_bypassEncryption","bypassAutoEncryption","_keyVaultNamespace","keyVaultNamespace","_keyVaultClient","keyVaultClient","_metaDataClient","metadataClient","_proxyOptions","proxyOptions","_tlsOptions","tlsOptions","_kmsProviders","kmsProviders","mongoCryptOptions","schemaMap","Buffer","isBuffer","serialize","encryptedFieldsMap","logger","extraOptions","cryptSharedLibPath","bypassQueryAnalysis","_bypassMongocryptdAndCryptShared","cryptSharedLibSearchPaths","_mongocrypt","_contextCounter","cryptSharedLibRequired","cryptSharedLibVersionInfo","MongoCryptInvalidArgumentError","_mongocryptdManager","MongocryptdManager","clientOptions","serverSelectionTimeoutMS","mongocryptdURI","family","_mongocryptdClient","MongoClient","uri","init","MongoRuntimeError","bypassSpawn","spawn","connect","error","message","match","cause","teardown","force","_this$_mongocryptdCli","close","encrypt","ns","cmd","arguments","length","undefined","commandBuffer","context","makeEncryptionContext","MongoDBCollectionNamespace","fromString","db","id","document","stateMachine","StateMachine","promoteValues","promoteLongs","execute","decrypt","response","buffer","makeDecryptionContext","decorateResult","result","decorateDecryptionResult","askForKMSCredentials","refreshKMSCredentials","libmongocryptVersion","decrypted","original","isTopLevelDecorateCall","deserialize","k","keys","originalValue","_bsontype","sub_type","defineProperty","value","configurable","enumerable","writable","push"],"sources":["/Users/Regan/Documents/GitHub/BadBank/node_modules/mongodb/src/client-side-encryption/auto_encrypter.ts"],"sourcesContent":["import {\n  type MongoCrypt,\n  type MongoCryptConstructor,\n  type MongoCryptOptions\n} from 'mongodb-client-encryption';\n\nimport { deserialize, type Document, serialize } from '../bson';\nimport { type CommandOptions, type ProxyOptions } from '../cmap/connection';\nimport { getMongoDBClientEncryption } from '../deps';\nimport { MongoRuntimeError } from '../error';\nimport { MongoClient, type MongoClientOptions } from '../mongo_client';\nimport { MongoDBCollectionNamespace } from '../utils';\nimport * as cryptoCallbacks from './crypto_callbacks';\nimport { MongoCryptInvalidArgumentError } from './errors';\nimport { MongocryptdManager } from './mongocryptd_manager';\nimport { type KMSProviders, refreshKMSCredentials } from './providers';\nimport { type CSFLEKMSTlsOptions, StateMachine } from './state_machine';\n\n/** @public */\nexport interface AutoEncryptionOptions {\n  /** @internal client for metadata lookups */\n  metadataClient?: MongoClient;\n  /** A `MongoClient` used to fetch keys from a key vault */\n  keyVaultClient?: MongoClient;\n  /** The namespace where keys are stored in the key vault */\n  keyVaultNamespace?: string;\n  /** Configuration options that are used by specific KMS providers during key generation, encryption, and decryption. */\n  kmsProviders?: {\n    /** Configuration options for using 'aws' as your KMS provider */\n    aws?:\n      | {\n          /** The access key used for the AWS KMS provider */\n          accessKeyId: string;\n          /** The secret access key used for the AWS KMS provider */\n          secretAccessKey: string;\n          /**\n           * An optional AWS session token that will be used as the\n           * X-Amz-Security-Token header for AWS requests.\n           */\n          sessionToken?: string;\n        }\n      | Record<string, never>;\n    /** Configuration options for using 'local' as your KMS provider */\n    local?: {\n      /**\n       * The master key used to encrypt/decrypt data keys.\n       * A 96-byte long Buffer or base64 encoded string.\n       */\n      key: Buffer | string;\n    };\n    /** Configuration options for using 'azure' as your KMS provider */\n    azure?:\n      | {\n          /** The tenant ID identifies the organization for the account */\n          tenantId: string;\n          /** The client ID to authenticate a registered application */\n          clientId: string;\n          /** The client secret to authenticate a registered application */\n          clientSecret: string;\n          /**\n           * If present, a host with optional port. E.g. \"example.com\" or \"example.com:443\".\n           * This is optional, and only needed if customer is using a non-commercial Azure instance\n           * (e.g. a government or China account, which use different URLs).\n           * Defaults to \"login.microsoftonline.com\"\n           */\n          identityPlatformEndpoint?: string | undefined;\n        }\n      | {\n          /**\n           * If present, an access token to authenticate with Azure.\n           */\n          accessToken: string;\n        }\n      | Record<string, never>;\n    /** Configuration options for using 'gcp' as your KMS provider */\n    gcp?:\n      | {\n          /** The service account email to authenticate */\n          email: string;\n          /** A PKCS#8 encrypted key. This can either be a base64 string or a binary representation */\n          privateKey: string | Buffer;\n          /**\n           * If present, a host with optional port. E.g. \"example.com\" or \"example.com:443\".\n           * Defaults to \"oauth2.googleapis.com\"\n           */\n          endpoint?: string | undefined;\n        }\n      | {\n          /**\n           * If present, an access token to authenticate with GCP.\n           */\n          accessToken: string;\n        }\n      | Record<string, never>;\n    /**\n     * Configuration options for using 'kmip' as your KMS provider\n     */\n    kmip?: {\n      /**\n       * The output endpoint string.\n       * The endpoint consists of a hostname and port separated by a colon.\n       * E.g. \"example.com:123\". A port is always present.\n       */\n      endpoint?: string;\n    };\n  };\n  /**\n   * A map of namespaces to a local JSON schema for encryption\n   *\n   * **NOTE**: Supplying options.schemaMap provides more security than relying on JSON Schemas obtained from the server.\n   * It protects against a malicious server advertising a false JSON Schema, which could trick the client into sending decrypted data that should be encrypted.\n   * Schemas supplied in the schemaMap only apply to configuring automatic encryption for Client-Side Field Level Encryption.\n   * Other validation rules in the JSON schema will not be enforced by the driver and will result in an error.\n   */\n  schemaMap?: Document;\n  /** Supply a schema for the encrypted fields in the document  */\n  encryptedFieldsMap?: Document;\n  /** Allows the user to bypass auto encryption, maintaining implicit decryption */\n  bypassAutoEncryption?: boolean;\n  /** Allows users to bypass query analysis */\n  bypassQueryAnalysis?: boolean;\n  options?: {\n    /** An optional hook to catch logging messages from the underlying encryption engine */\n    logger?: (level: AutoEncryptionLoggerLevel, message: string) => void;\n  };\n  extraOptions?: {\n    /**\n     * A local process the driver communicates with to determine how to encrypt values in a command.\n     * Defaults to \"mongodb://%2Fvar%2Fmongocryptd.sock\" if domain sockets are available or \"mongodb://localhost:27020\" otherwise\n     */\n    mongocryptdURI?: string;\n    /** If true, autoEncryption will not attempt to spawn a mongocryptd before connecting  */\n    mongocryptdBypassSpawn?: boolean;\n    /** The path to the mongocryptd executable on the system */\n    mongocryptdSpawnPath?: string;\n    /** Command line arguments to use when auto-spawning a mongocryptd */\n    mongocryptdSpawnArgs?: string[];\n    /**\n     * Full path to a MongoDB Crypt shared library to be used (instead of mongocryptd).\n     *\n     * This needs to be the path to the file itself, not a directory.\n     * It can be an absolute or relative path. If the path is relative and\n     * its first component is `$ORIGIN`, it will be replaced by the directory\n     * containing the mongodb-client-encryption native addon file. Otherwise,\n     * the path will be interpreted relative to the current working directory.\n     *\n     * Currently, loading different MongoDB Crypt shared library files from different\n     * MongoClients in the same process is not supported.\n     *\n     * If this option is provided and no MongoDB Crypt shared library could be loaded\n     * from the specified location, creating the MongoClient will fail.\n     *\n     * If this option is not provided and `cryptSharedLibRequired` is not specified,\n     * the AutoEncrypter will attempt to spawn and/or use mongocryptd according\n     * to the mongocryptd-specific `extraOptions` options.\n     *\n     * Specifying a path prevents mongocryptd from being used as a fallback.\n     *\n     * Requires the MongoDB Crypt shared library, available in MongoDB 6.0 or higher.\n     */\n    cryptSharedLibPath?: string;\n    /**\n     * If specified, never use mongocryptd and instead fail when the MongoDB Crypt\n     * shared library could not be loaded.\n     *\n     * This is always true when `cryptSharedLibPath` is specified.\n     *\n     * Requires the MongoDB Crypt shared library, available in MongoDB 6.0 or higher.\n     */\n    cryptSharedLibRequired?: boolean;\n    /**\n     * Search paths for a MongoDB Crypt shared library to be used (instead of mongocryptd)\n     * Only for driver testing!\n     * @internal\n     */\n    cryptSharedLibSearchPaths?: string[];\n  };\n  proxyOptions?: ProxyOptions;\n  /** The TLS options to use connecting to the KMS provider */\n  tlsOptions?: CSFLEKMSTlsOptions;\n}\n\n/**\n * @public\n *\n * Extra options related to the mongocryptd process\n * \\* _Available in MongoDB 6.0 or higher._\n */\nexport type AutoEncryptionExtraOptions = NonNullable<AutoEncryptionOptions['extraOptions']>;\n\n/** @public */\nexport const AutoEncryptionLoggerLevel = Object.freeze({\n  FatalError: 0,\n  Error: 1,\n  Warning: 2,\n  Info: 3,\n  Trace: 4\n} as const);\n\n/**\n * @public\n * The level of severity of the log message\n *\n * | Value | Level |\n * |-------|-------|\n * | 0 | Fatal Error |\n * | 1 | Error |\n * | 2 | Warning |\n * | 3 | Info |\n * | 4 | Trace |\n */\nexport type AutoEncryptionLoggerLevel =\n  (typeof AutoEncryptionLoggerLevel)[keyof typeof AutoEncryptionLoggerLevel];\n\n// Typescript errors if we index objects with `Symbol.for(...)`, so\n// to avoid TS errors we pull them out into variables.  Then we can type\n// the objects (and class) that we expect to see them on and prevent TS\n// errors.\n/** @internal */\nconst kDecorateResult = Symbol.for('@@mdb.decorateDecryptionResult');\n/** @internal */\nconst kDecoratedKeys = Symbol.for('@@mdb.decryptedKeys');\n\n/**\n * @internal An internal class to be used by the driver for auto encryption\n * **NOTE**: Not meant to be instantiated directly, this is for internal use only.\n */\nexport class AutoEncrypter {\n  _client: MongoClient;\n  _bypassEncryption: boolean;\n  _keyVaultNamespace: string;\n  _keyVaultClient: MongoClient;\n  _metaDataClient: MongoClient;\n  _proxyOptions: ProxyOptions;\n  _tlsOptions: CSFLEKMSTlsOptions;\n  _kmsProviders: KMSProviders;\n  _bypassMongocryptdAndCryptShared: boolean;\n  _contextCounter: number;\n\n  _mongocryptdManager?: MongocryptdManager;\n  _mongocryptdClient?: MongoClient;\n\n  /** @internal */\n  _mongocrypt: MongoCrypt;\n\n  /**\n   * Used by devtools to enable decorating decryption results.\n   *\n   * When set and enabled, `decrypt` will automatically recursively\n   * traverse a decrypted document and if a field has been decrypted,\n   * it will mark it as decrypted.  Compass uses this to determine which\n   * fields were decrypted.\n   */\n  [kDecorateResult] = false;\n\n  /** @internal */\n  static getMongoCrypt(): MongoCryptConstructor {\n    const encryption = getMongoDBClientEncryption();\n    if ('kModuleError' in encryption) {\n      throw encryption.kModuleError;\n    }\n    return encryption.MongoCrypt;\n  }\n\n  /**\n   * Create an AutoEncrypter\n   *\n   * **Note**: Do not instantiate this class directly. Rather, supply the relevant options to a MongoClient\n   *\n   * **Note**: Supplying `options.schemaMap` provides more security than relying on JSON Schemas obtained from the server.\n   * It protects against a malicious server advertising a false JSON Schema, which could trick the client into sending unencrypted data that should be encrypted.\n   * Schemas supplied in the schemaMap only apply to configuring automatic encryption for Client-Side Field Level Encryption.\n   * Other validation rules in the JSON schema will not be enforced by the driver and will result in an error.\n   *\n   * @example <caption>Create an AutoEncrypter that makes use of mongocryptd</caption>\n   * ```ts\n   * // Enabling autoEncryption via a MongoClient using mongocryptd\n   * const { MongoClient } = require('mongodb');\n   * const client = new MongoClient(URL, {\n   *   autoEncryption: {\n   *     kmsProviders: {\n   *       aws: {\n   *         accessKeyId: AWS_ACCESS_KEY,\n   *         secretAccessKey: AWS_SECRET_KEY\n   *       }\n   *     }\n   *   }\n   * });\n   * ```\n   *\n   * await client.connect();\n   * // From here on, the client will be encrypting / decrypting automatically\n   * @example <caption>Create an AutoEncrypter that makes use of libmongocrypt's CSFLE shared library</caption>\n   * ```ts\n   * // Enabling autoEncryption via a MongoClient using CSFLE shared library\n   * const { MongoClient } = require('mongodb');\n   * const client = new MongoClient(URL, {\n   *   autoEncryption: {\n   *     kmsProviders: {\n   *       aws: {}\n   *     },\n   *     extraOptions: {\n   *       cryptSharedLibPath: '/path/to/local/crypt/shared/lib',\n   *       cryptSharedLibRequired: true\n   *     }\n   *   }\n   * });\n   * ```\n   *\n   * await client.connect();\n   * // From here on, the client will be encrypting / decrypting automatically\n   */\n  constructor(client: MongoClient, options: AutoEncryptionOptions) {\n    this._client = client;\n    this._bypassEncryption = options.bypassAutoEncryption === true;\n\n    this._keyVaultNamespace = options.keyVaultNamespace || 'admin.datakeys';\n    this._keyVaultClient = options.keyVaultClient || client;\n    this._metaDataClient = options.metadataClient || client;\n    this._proxyOptions = options.proxyOptions || {};\n    this._tlsOptions = options.tlsOptions || {};\n    this._kmsProviders = options.kmsProviders || {};\n\n    const mongoCryptOptions: MongoCryptOptions = {\n      cryptoCallbacks\n    };\n    if (options.schemaMap) {\n      mongoCryptOptions.schemaMap = Buffer.isBuffer(options.schemaMap)\n        ? options.schemaMap\n        : (serialize(options.schemaMap) as Buffer);\n    }\n\n    if (options.encryptedFieldsMap) {\n      mongoCryptOptions.encryptedFieldsMap = Buffer.isBuffer(options.encryptedFieldsMap)\n        ? options.encryptedFieldsMap\n        : (serialize(options.encryptedFieldsMap) as Buffer);\n    }\n\n    mongoCryptOptions.kmsProviders = !Buffer.isBuffer(this._kmsProviders)\n      ? (serialize(this._kmsProviders) as Buffer)\n      : this._kmsProviders;\n\n    if (options.options?.logger) {\n      mongoCryptOptions.logger = options.options.logger;\n    }\n\n    if (options.extraOptions && options.extraOptions.cryptSharedLibPath) {\n      mongoCryptOptions.cryptSharedLibPath = options.extraOptions.cryptSharedLibPath;\n    }\n\n    if (options.bypassQueryAnalysis) {\n      mongoCryptOptions.bypassQueryAnalysis = options.bypassQueryAnalysis;\n    }\n\n    this._bypassMongocryptdAndCryptShared = this._bypassEncryption || !!options.bypassQueryAnalysis;\n\n    if (options.extraOptions && options.extraOptions.cryptSharedLibSearchPaths) {\n      // Only for driver testing\n      mongoCryptOptions.cryptSharedLibSearchPaths = options.extraOptions.cryptSharedLibSearchPaths;\n    } else if (!this._bypassMongocryptdAndCryptShared) {\n      mongoCryptOptions.cryptSharedLibSearchPaths = ['$SYSTEM'];\n    }\n\n    const MongoCrypt = AutoEncrypter.getMongoCrypt();\n    this._mongocrypt = new MongoCrypt(mongoCryptOptions);\n    this._contextCounter = 0;\n\n    if (\n      options.extraOptions &&\n      options.extraOptions.cryptSharedLibRequired &&\n      !this.cryptSharedLibVersionInfo\n    ) {\n      throw new MongoCryptInvalidArgumentError(\n        '`cryptSharedLibRequired` set but no crypt_shared library loaded'\n      );\n    }\n\n    // Only instantiate mongocryptd manager/client once we know for sure\n    // that we are not using the CSFLE shared library.\n    if (!this._bypassMongocryptdAndCryptShared && !this.cryptSharedLibVersionInfo) {\n      this._mongocryptdManager = new MongocryptdManager(options.extraOptions);\n      const clientOptions: MongoClientOptions = {\n        serverSelectionTimeoutMS: 10000\n      };\n\n      if (options.extraOptions == null || typeof options.extraOptions.mongocryptdURI !== 'string') {\n        clientOptions.family = 4;\n      }\n\n      this._mongocryptdClient = new MongoClient(this._mongocryptdManager.uri, clientOptions);\n    }\n  }\n\n  /**\n   * Initializes the auto encrypter by spawning a mongocryptd and connecting to it.\n   *\n   * This function is a no-op when bypassSpawn is set or the crypt shared library is used.\n   */\n  async init(): Promise<MongoClient | void> {\n    if (this._bypassMongocryptdAndCryptShared || this.cryptSharedLibVersionInfo) {\n      return;\n    }\n    if (!this._mongocryptdManager) {\n      throw new MongoRuntimeError(\n        'Reached impossible state: mongocryptdManager is undefined when neither bypassSpawn nor the shared lib are specified.'\n      );\n    }\n    if (!this._mongocryptdClient) {\n      throw new MongoRuntimeError(\n        'Reached impossible state: mongocryptdClient is undefined when neither bypassSpawn nor the shared lib are specified.'\n      );\n    }\n\n    if (!this._mongocryptdManager.bypassSpawn) {\n      await this._mongocryptdManager.spawn();\n    }\n\n    try {\n      const client = await this._mongocryptdClient.connect();\n      return client;\n    } catch (error) {\n      const { message } = error;\n      if (message && (message.match(/timed out after/) || message.match(/ENOTFOUND/))) {\n        throw new MongoRuntimeError(\n          'Unable to connect to `mongocryptd`, please make sure it is running or in your PATH for auto-spawn',\n          { cause: error }\n        );\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Cleans up the `_mongocryptdClient`, if present.\n   */\n  async teardown(force: boolean): Promise<void> {\n    await this._mongocryptdClient?.close(force);\n  }\n\n  /**\n   * Encrypt a command for a given namespace.\n   */\n  async encrypt(\n    ns: string,\n    cmd: Document,\n    options: CommandOptions = {}\n  ): Promise<Document | Uint8Array> {\n    if (this._bypassEncryption) {\n      // If `bypassAutoEncryption` has been specified, don't encrypt\n      return cmd;\n    }\n\n    const commandBuffer = Buffer.isBuffer(cmd) ? cmd : serialize(cmd, options);\n\n    const context = this._mongocrypt.makeEncryptionContext(\n      MongoDBCollectionNamespace.fromString(ns).db,\n      commandBuffer\n    );\n\n    context.id = this._contextCounter++;\n    context.ns = ns;\n    context.document = cmd;\n\n    const stateMachine = new StateMachine({\n      promoteValues: false,\n      promoteLongs: false,\n      proxyOptions: this._proxyOptions,\n      tlsOptions: this._tlsOptions\n    });\n    return await stateMachine.execute<Document>(this, context);\n  }\n\n  /**\n   * Decrypt a command response\n   */\n  async decrypt(response: Uint8Array | Document, options: CommandOptions = {}): Promise<Document> {\n    const buffer = Buffer.isBuffer(response) ? response : serialize(response, options);\n\n    const context = this._mongocrypt.makeDecryptionContext(buffer);\n\n    context.id = this._contextCounter++;\n\n    const stateMachine = new StateMachine({\n      ...options,\n      proxyOptions: this._proxyOptions,\n      tlsOptions: this._tlsOptions\n    });\n\n    const decorateResult = this[kDecorateResult];\n    const result = await stateMachine.execute<Document>(this, context);\n    if (decorateResult) {\n      decorateDecryptionResult(result, response);\n    }\n    return result;\n  }\n\n  /**\n   * Ask the user for KMS credentials.\n   *\n   * This returns anything that looks like the kmsProviders original input\n   * option. It can be empty, and any provider specified here will override\n   * the original ones.\n   */\n  async askForKMSCredentials(): Promise<KMSProviders> {\n    return await refreshKMSCredentials(this._kmsProviders);\n  }\n\n  /**\n   * Return the current libmongocrypt's CSFLE shared library version\n   * as `{ version: bigint, versionStr: string }`, or `null` if no CSFLE\n   * shared library was loaded.\n   */\n  get cryptSharedLibVersionInfo(): { version: bigint; versionStr: string } | null {\n    return this._mongocrypt.cryptSharedLibVersionInfo;\n  }\n\n  static get libmongocryptVersion(): string {\n    return AutoEncrypter.getMongoCrypt().libmongocryptVersion;\n  }\n}\n\n/**\n * Recurse through the (identically-shaped) `decrypted` and `original`\n * objects and attach a `decryptedKeys` property on each sub-object that\n * contained encrypted fields. Because we only call this on BSON responses,\n * we do not need to worry about circular references.\n *\n * @internal\n */\nfunction decorateDecryptionResult(\n  decrypted: Document & { [kDecoratedKeys]?: Array<string> },\n  original: Document,\n  isTopLevelDecorateCall = true\n): void {\n  if (isTopLevelDecorateCall) {\n    // The original value could have been either a JS object or a BSON buffer\n    if (Buffer.isBuffer(original)) {\n      original = deserialize(original);\n    }\n    if (Buffer.isBuffer(decrypted)) {\n      throw new MongoRuntimeError('Expected result of decryption to be deserialized BSON object');\n    }\n  }\n\n  if (!decrypted || typeof decrypted !== 'object') return;\n  for (const k of Object.keys(decrypted)) {\n    const originalValue = original[k];\n\n    // An object was decrypted by libmongocrypt if and only if it was\n    // a BSON Binary object with subtype 6.\n    if (originalValue && originalValue._bsontype === 'Binary' && originalValue.sub_type === 6) {\n      if (!decrypted[kDecoratedKeys]) {\n        Object.defineProperty(decrypted, kDecoratedKeys, {\n          value: [],\n          configurable: true,\n          enumerable: false,\n          writable: false\n        });\n      }\n      // this is defined in the preceding if-statement\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      decrypted[kDecoratedKeys]!.push(k);\n      // Do not recurse into this decrypted value. It could be a sub-document/array,\n      // in which case there is no original value associated with its subfields.\n      continue;\n    }\n\n    decorateDecryptionResult(decrypted[k], originalValue, false);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}