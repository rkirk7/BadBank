{"ast":null,"code":"import React from \"react\";\nimport { Card, CurrentUser } from \"./context\";\nexport default function Transfer() {\n  const {\n    currentUser,\n    setCurrentUser\n  } = React.useContext(CurrentUser);\n  const [transferAmount, setTransferAmount] = React.useState(0);\n  const [lastTransfer, setLastTransfer] = React.useState(0);\n  const [toEmail, setToEmail] = React.useState('');\n  const [fromBalance, setFromBalance] = React.useState(currentUser.balance);\n  const [toBalance, setToBalance] = React.useState(0);\n  const [formFilled, setFormFilled] = React.useState(true);\n  const [transferComplete, setTransferComplete] = React.useState(false);\n  React.useEffect(() => {\n    getBalance();\n  }, []);\n  const currentUserBalanceURL = \"/account/balance/\".concat(currentUser.email);\n  const receiveUserBalanceURL = \"/account/balance/\".concat(toEmail);\n  async function getBalance() {\n    var res = await fetch(currentUserBalanceURL);\n    var data = await res.json();\n    setFromBalance(data.balance);\n    try {\n      var res2 = await fetch(receiveUserBalanceURL);\n      var data2 = await res2.json();\n      setToBalance(data2.balance);\n    } catch {\n      alert(\"Error: Could not find recipient's account. Please check their email and try again.\");\n    }\n  }\n  function makeTransfer() {\n    if (isNaN(Number(transferAmount))) {\n      alert('Your transfer must be a valid number.');\n      return;\n    }\n    if (Number(transferAmount) <= 0) {\n      alert('Your transfer cannot be a negative number.');\n      return;\n    }\n    if (Number(transferAmount) > Number(fromBalance)) {\n      alert('Your balance is too low. Please enter a lower amount.');\n      return;\n    }\n    setFromBalance(Number(fromBalance) - Number(transferAmount));\n    setToBalance(Number(toBalance) + Number(transferAmount));\n    const url = \"/account/transfer/:\".concat(currentUser.email, \"/:\").concat(toEmail, \"/:\").concat(transferAmount, \"/:\").concat(fromBalance, \"/:\").concat(toBalance);\n    (async () => {\n      await fetch(url);\n      setCurrentUser(user => ({\n        ...user,\n        balance: fromBalance\n      }));\n      setLastTransfer(transferAmount);\n      setTransferAmount(0);\n      setTransferComplete(true);\n    })();\n  }\n  React.useEffect(() => {\n    setFormFilled(transferAmount != '0' && transferAmount != '');\n  }, [transferAmount]);\n  return /*#__PURE__*/React.createElement(Card, {\n    bgcolor: \"primary\",\n    txtcolor: \"white\",\n    header: \"Make a Transfer\",\n    text: \"\".concat(currentUser.name, \", your balance is $\").concat(fromBalance, \".\"),\n    title: transferComplete && \"You have successfully transferred $\".concat(lastTransfer, \"!\"),\n    body: /*#__PURE__*/React.createElement(React.Fragment, null, \"Transfer Amount\", /*#__PURE__*/React.createElement(\"br\", null), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"input\",\n      className: \"form-control\",\n      id: \"transfer\",\n      placeholder: \"Enter Transfer Amount\",\n      value: transferAmount,\n      onChange: e => {\n        setTransferAmount(e.currentTarget.value);\n        setTransferComplete(false);\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", null), \"Transfer To\", /*#__PURE__*/React.createElement(\"br\", null), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"input\",\n      className: \"form-control\",\n      id: \"recipient\",\n      placeholder: \"Enter Email\",\n      value: toEmail,\n      onChange: e => {\n        setToEmail(e.currentTarget.value);\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", null)),\n    centered: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-light\",\n      onClick: makeTransfer,\n      disabled: !formFilled\n    }, \"Make Transfer\"), \" \", /*#__PURE__*/React.createElement(\"br\", null))\n  });\n}","map":{"version":3,"names":["React","Card","CurrentUser","Transfer","currentUser","setCurrentUser","useContext","transferAmount","setTransferAmount","useState","lastTransfer","setLastTransfer","toEmail","setToEmail","fromBalance","setFromBalance","balance","toBalance","setToBalance","formFilled","setFormFilled","transferComplete","setTransferComplete","useEffect","getBalance","currentUserBalanceURL","concat","email","receiveUserBalanceURL","res","fetch","data","json","res2","data2","alert","makeTransfer","isNaN","Number","url","user","createElement","bgcolor","txtcolor","header","text","name","title","body","Fragment","type","className","id","placeholder","value","onChange","e","currentTarget","centered","onClick","disabled"],"sources":["/Users/Regan/Documents/GitHub/BadBank/public/src/Components/transfer.js"],"sourcesContent":["import React from \"react\";\nimport { Card, CurrentUser } from \"./context\";\n\nexport default function Transfer(){\n    const { currentUser, setCurrentUser } = React.useContext(CurrentUser);\n    const [transferAmount, setTransferAmount] = React.useState(0);\n    const [lastTransfer, setLastTransfer] = React.useState(0);\n    const [toEmail, setToEmail] = React.useState('');\n    const [fromBalance, setFromBalance] = React.useState(currentUser.balance);\n    const [toBalance, setToBalance] = React.useState(0);\n    const [formFilled, setFormFilled] = React.useState(true);\n    const [transferComplete, setTransferComplete] = React.useState(false);\n\n    React.useEffect(() => {\n        getBalance();\n      }, []);\n    \n      const currentUserBalanceURL = `/account/balance/${currentUser.email}`;\n      const receiveUserBalanceURL = `/account/balance/${toEmail}`;\n\n      async function getBalance() {\n        var res = await fetch(currentUserBalanceURL);\n        var data = await res.json();\n        setFromBalance(data.balance);\n        try {\n        var res2 = await fetch(receiveUserBalanceURL);\n        var data2 = await res2.json();\n        setToBalance(data2.balance);\n        } catch {\n            alert(\"Error: Could not find recipient's account. Please check their email and try again.\")\n        }\n     }\n\n    function makeTransfer() {\n           if (isNaN(Number(transferAmount))) {\n            alert('Your transfer must be a valid number.'); \n            return;\n        }\n        if ((Number(transferAmount)) <= 0) {\n            alert('Your transfer cannot be a negative number.'); \n            return;\n        }\n\n        if (Number(transferAmount) > Number(fromBalance)) {\n            alert('Your balance is too low. Please enter a lower amount.'); \n            return;\n        }\n        \n       setFromBalance(Number(fromBalance) - Number(transferAmount));\n       setToBalance(Number(toBalance) + Number(transferAmount));\n\n        const url = `/account/transfer/:${currentUser.email}/:${toEmail}/:${transferAmount}/:${fromBalance}/:${toBalance}`;\n    (async () => {\n       await fetch(url);\n       setCurrentUser(user => ({\n        ...user,\n        balance: fromBalance\n      })); \n        setLastTransfer(transferAmount);\n        setTransferAmount(0);\n        setTransferComplete(true);\n    })();\n    }\n    \n\n    React.useEffect(() =>{\n        setFormFilled(transferAmount != '0' && transferAmount != ''); \n    }, [transferAmount])\n\n\n    return (\n        <Card \n        bgcolor=\"primary\"\n        txtcolor=\"white\"\n        header=\"Make a Transfer\"\n        text={`${currentUser.name}, your balance is $${fromBalance}.`}       \n        title={transferComplete && `You have successfully transferred $${lastTransfer}!`}       \n        body={\n            <>\n            Transfer Amount<br/>\n            <input type=\"input\" className=\"form-control\" id=\"transfer\" placeholder=\"Enter Transfer Amount\" value={transferAmount} onChange={e => {\n                setTransferAmount(e.currentTarget.value);\n                setTransferComplete(false);\n                }} /> <br /> \n            Transfer To<br/>\n            <input type=\"input\" className=\"form-control\" id=\"recipient\" placeholder=\"Enter Email\" value={toEmail} onChange={e => {\n                setToEmail(e.currentTarget.value);\n                }} /> <br />     \n        </>\n        }\n        centered={\n    <>\n            <button type=\"submit\" className=\"btn btn-light\" onClick={makeTransfer} disabled={!formFilled}>Make Transfer</button> <br />\n    </>\n        }\n        />\n     );\n }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}