{"ast":null,"code":"const {\n  MongoClient,\n  ServerApiVersion\n} = require('mongodb');\nconst uri = \"mongodb+srv://regankirk:1UARA3FrwCJ2RQ6O@bankcluster.0ttoepa.mongodb.net/?retryWrites=true&w=majority&tls=true&tlsAllowInvalidCertificates=true&appName=bankcluster\";\nconst {\n  initializeApp\n} = require(\"firebase/app\");\nconst {\n  getAuth,\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword\n} = require(\"firebase/auth\");\nlet db = null;\nconst client = new MongoClient(uri, {\n  serverApi: {\n    version: ServerApiVersion.v1,\n    strict: true,\n    deprecationErrors: true\n  }\n});\nasync function runMongo() {\n  try {\n    await client.connect();\n    await client.db(\"myproject\").command({\n      ping: 1\n    });\n    console.log(\"Pinged your deployment. You successfully connected to MongoDB!\");\n    db = client.db(\"myproject\");\n    if (db) console.log('database found');\n  } catch (error) {\n    console.log('error:', error);\n  }\n}\nrunMongo();\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDhKNCusOPW2y52bMwLnOrXIy-u1y1Q4KI\",\n  authDomain: \"bank-f0c47.firebaseapp.com\",\n  projectId: \"bank-f0c47\",\n  storageBucket: \"bank-f0c47.appspot.com\",\n  messagingSenderId: \"710670974978\",\n  appId: \"1:710670974978:web:b724e76530555264b8271b\"\n};\nconst firebaseApp = initializeApp(firebaseConfig);\nconst auth = getAuth();\nasync function createFirebase(name, email, password, requestedRole) {\n  if (!db) {\n    throw new Error('Database connection not established');\n  }\n  try {\n    if (await checkAccount(email)) {\n      console.log('Account already exists.');\n      return true;\n    } else {\n      await createUserWithEmailAndPassword(auth, email, password);\n      return await create(name, email, requestedRole);\n    }\n  } catch (error) {\n    console.error('Error creating user with Firebase:', error.code, error.message);\n    throw error;\n  }\n}\nasync function checkAccount(email) {\n  if (!db) {\n    throw new Error('Database connection not established');\n  }\n  try {\n    const docs = await db.collection('users').find({\n      \"email\": email\n    }).toArray();\n    if (docs[0]) {\n      return true;\n    } else {\n      return false;\n    }\n  } catch (error) {\n    throw error;\n  }\n}\nasync function create(name, email, requestedRole) {\n  if (!db) {\n    throw new Error('database connection not successful');\n  }\n  const collection = db.collection('users');\n  const doc = {\n    name,\n    email,\n    balance: 0,\n    role: requestedRole\n  };\n  try {\n    const result = await collection.insertOne(doc);\n    return await log(email, \"\".concat(email, \" created an account.\"), result);\n  } catch (err) {\n    console.error('error inserting doc', err);\n    throw err;\n  }\n}\nasync function loginFirebase(email, password) {\n  try {\n    await signInWithEmailAndPassword(auth, email, password);\n    return await login(email);\n  } catch (error) {\n    console.error('Error logging in with Firebase:', error.code, error.message);\n    return error;\n  }\n}\nasync function login(email) {\n  if (!db) {\n    throw new Error('database connection not successful');\n  }\n  try {\n    const docs = await db.collection('users').find({\n      \"email\": email\n    }).toArray();\n    return docs[0];\n  } catch (err) {\n    console.error('error retrieving docs', err);\n  }\n}\nasync function log(email, activity, data) {\n  if (!db) {\n    throw new Error('database connection not successful');\n  }\n  const collection = db.collection('activity');\n  let date = new Date();\n  const doc = {\n    email,\n    activity,\n    date\n  };\n  try {\n    await collection.insertOne(doc);\n    return data;\n  } catch (err) {\n    console.error('error inserting doc', err);\n    throw err;\n  }\n}\nasync function all() {\n  if (!db) {\n    throw new Error('database connection not successful');\n  }\n  try {\n    const docs = await db.collection('users').find().toArray();\n    return docs;\n  } catch (err) {\n    console.error('error retrieving docs', err);\n    throw err;\n  }\n}\nasync function balance(email) {\n  if (!db) {\n    throw new Error('database connection not successful');\n  }\n  try {\n    const docs = await db.collection('users').find({\n      \"email\": email\n    }).toArray();\n    return docs[0];\n  } catch (err) {\n    console.error('error retrieving docs', err);\n  }\n}\nasync function transfer(fromemail, toemail, sentamount, frombalance, tobalance) {\n  if (!db) {\n    throw new Error('database connection not successful');\n  }\n  try {\n    await db.collection('users').updateOne({\n      email: fromemail\n    }, {\n      $set: {\n        balance: frombalance\n      }\n    });\n    await db.collection('users').updateOne({\n      email: toemail\n    }, {\n      $set: {\n        balance: tobalance\n      }\n    });\n    let string = \"\".concat(fromemail, \" transferred $\").concat(sentamount, \" to \").concat(toemail, \".\");\n    await log(toemail, string, 'money received');\n    return log(fromemail, string, 'money sent');\n  } catch (err) {\n    console.error('error retrieving docs', err);\n  }\n}\nasync function updateBalance(email, newamount, status, amount) {\n  if (!db) {\n    throw new Error('database connection not successful');\n  }\n  try {\n    const result = await db.collection('users').updateOne({\n      email: email\n    }, {\n      $set: {\n        balance: newamount\n      }\n    });\n    var string = \"\";\n    if (status === \"deposit\") {\n      string = \"Deposited $\".concat(amount, \". New balance: $\").concat(newamount, \".\");\n    } else if (status === \"withdrawal\") {\n      string = \"Withdrew $\".concat(amount, \". New balance: $\").concat(newamount, \".\");\n    }\n    return await log(email, string, newamount);\n  } catch (err) {\n    console.error('Error updating balance:', err);\n    throw err;\n  }\n}\nasync function logout() {\n  try {\n    await auth.signOut();\n    return;\n  } catch (error) {\n    console.error('Error during logout:', error);\n    throw error;\n  }\n}\nasync function getActivity(email, role) {\n  if (!db) {\n    throw new Error('database connection not successful');\n  }\n  try {\n    let docs;\n    if (role === \"admin\") {\n      docs = await db.collection('activity').find().toArray();\n    } else {\n      docs = await db.collection('activity').find({\n        \"email\": email\n      }).toArray();\n    }\n    return docs;\n  } catch (err) {\n    console.error('error retrieving docs', err);\n    throw err;\n  }\n}\nmodule.exports = {\n  create,\n  createFirebase,\n  loginFirebase,\n  all,\n  balance,\n  updateBalance,\n  login,\n  logout,\n  getActivity,\n  transfer\n};","map":{"version":3,"names":["MongoClient","ServerApiVersion","require","uri","initializeApp","getAuth","createUserWithEmailAndPassword","signInWithEmailAndPassword","db","client","serverApi","version","v1","strict","deprecationErrors","runMongo","connect","command","ping","console","log","error","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","auth","createFirebase","name","email","password","requestedRole","Error","checkAccount","create","code","message","docs","collection","find","toArray","doc","balance","role","result","insertOne","concat","err","loginFirebase","login","activity","data","date","Date","all","transfer","fromemail","toemail","sentamount","frombalance","tobalance","updateOne","$set","string","updateBalance","newamount","status","amount","logout","signOut","getActivity","module","exports"],"sources":["/Users/Regan/Documents/GitHub/BadBank/backend/dal.js"],"sourcesContent":["const {MongoClient, ServerApiVersion}= require('mongodb');\nconst uri = \"mongodb+srv://regankirk:1UARA3FrwCJ2RQ6O@bankcluster.0ttoepa.mongodb.net/?retryWrites=true&w=majority&tls=true&tlsAllowInvalidCertificates=true&appName=bankcluster\";\nconst { initializeApp } = require(\"firebase/app\");\nconst { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword } = require(\"firebase/auth\");\nlet db = null;\n\nconst client = new MongoClient(uri, {\n    serverApi: {\n      version: ServerApiVersion.v1,\n      strict: true,\n      deprecationErrors: true,\n    }\n  });\n  \n  async function runMongo() {\n    try {\n      await client.connect();\n      await client.db(\"myproject\").command({ ping: 1 });\n      console.log(\"Pinged your deployment. You successfully connected to MongoDB!\");\n      db = client.db(\"myproject\");\n      if (db) console.log('database found');\n    } catch(error) {\n        console.log('error:', error);\n    }\n  }\n  runMongo();\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDhKNCusOPW2y52bMwLnOrXIy-u1y1Q4KI\",\n    authDomain: \"bank-f0c47.firebaseapp.com\",\n    projectId: \"bank-f0c47\",\n    storageBucket: \"bank-f0c47.appspot.com\",\n    messagingSenderId: \"710670974978\",\n    appId: \"1:710670974978:web:b724e76530555264b8271b\"\n  };\n  \n  const firebaseApp = initializeApp(firebaseConfig);\n  const auth = getAuth();\n\n  async function createFirebase(name, email, password, requestedRole) {\n    if (!db) {\n        throw new Error('Database connection not established');\n    }\n    try {\n        if (await checkAccount(email)) {\n            console.log('Account already exists.');\n            return true;\n        } else {\n            await createUserWithEmailAndPassword(auth, email, password);\n            return await create(name, email, requestedRole);\n        }\n      } catch (error) {\n        console.error('Error creating user with Firebase:', error.code, error.message);\n        throw error;\n      }\n  }\n\n  async function checkAccount(email) {\n    if (!db) {\n        throw new Error('Database connection not established');\n    }\n    try {\n        const docs = await db.collection('users').find( {\"email\" : email}).toArray();\n        if (docs[0]) {\n            return true;\n        } else {\n            return false;\n        }\n      } catch (error) {\n        throw error;\n      }\n  }\n\n  async function create(name, email, requestedRole) {\n    if (!db) {\n        throw new Error('database connection not successful');\n    }\n    const collection = db.collection('users');\n    const doc = {name, email, balance: 0, role: requestedRole};\n    try {\n        const result = await collection.insertOne(doc);\n        return await log(email, `${email } created an account.`, result);\n    } catch (err) {\n        console.error('error inserting doc', err);\n        throw err;\n    }\n  }\n\n  async function loginFirebase(email, password) {\n    try {\n        await signInWithEmailAndPassword(auth, email, password);\n        return await login(email);\n    } catch (error) {\n        console.error('Error logging in with Firebase:', error.code, error.message);\n        return(error);\n    }\n}\n\nasync function login(email) {\n    if (!db) {\n        throw new Error('database connection not successful');\n    }\n    try {\n        const docs = await db.collection('users').find( {\"email\" : email}).toArray();\n         return docs[0];\n    } catch (err) {\n        console.error('error retrieving docs', err);       \n    }\n}\n\n  async function log(email, activity, data) {\n    if (!db) {\n        throw new Error('database connection not successful');\n    }\n    const collection = db.collection('activity');\n    let date = new Date();\n    const doc = {email, activity, date};\n    try {\n        await collection.insertOne(doc);\n        return data;\n    } catch (err) {\n        console.error('error inserting doc', err);\n        throw err;\n    }\n  }\n\n  async function all() {\n    if (!db) {\n        throw new Error('database connection not successful');\n    }\n    try {\n        const docs = await db.collection('users').find().toArray();\n        return docs\n    } catch (err) {\n        console.error('error retrieving docs', err);\n        throw err;\n    }\n}\n\nasync function balance(email) {\n    if (!db) {\n        throw new Error('database connection not successful');\n    }\n    try {\n        const docs = await db.collection('users').find( {\"email\" : email}).toArray();\n        return docs[0]; \n    } catch (err) {\n        console.error('error retrieving docs', err);\n    }\n}\n\nasync function transfer(fromemail, toemail, sentamount, frombalance, tobalance ) {\n    if (!db) {\n        throw new Error('database connection not successful');\n    }\n    try {\n        await db.collection('users').updateOne(\n            { email: fromemail },\n            { $set: { balance: frombalance } }\n        );\n        await db.collection('users').updateOne(\n            { email: toemail },\n            { $set: { balance: tobalance } }\n        );\n        let string = `${fromemail} transferred $${sentamount} to ${toemail}.`\n        await log(toemail, string, 'money received');\n        return log(fromemail, string, 'money sent'); \n    } catch (err) {\n        console.error('error retrieving docs', err);\n    }\n}\n\nasync function updateBalance(email, newamount, status, amount) {\n    if (!db) {\n        throw new Error('database connection not successful');\n    }\n    try {\n        const result = await db.collection('users').updateOne(\n            { email: email },\n            { $set: { balance: newamount } }\n        );\n        var string = \"\";\n        if (status === \"deposit\") {\n           string = `Deposited $${amount}. New balance: $${newamount}.`\n        } else if (status === \"withdrawal\") {\n            string = `Withdrew $${amount}. New balance: $${newamount}.`\n        }\n        return await log(email, string, newamount);\n    } catch (err) {\n        console.error('Error updating balance:', err);\n        throw err;\n    }\n}\n\n\nasync function logout() {\n    try {\n        await auth.signOut();\n        return;\n    } catch (error) {\n        console.error('Error during logout:', error);\n        throw error;\n    }\n}\n\nasync function getActivity(email, role) {\n    if (!db) {\n        throw new Error('database connection not successful');\n    }\n    try {\n        let docs;\n        if (role === \"admin\") {\n            docs = await db.collection('activity').find().toArray();\n        } else {\n         docs = await db.collection('activity').find( {\"email\" : email}).toArray();\n        }\n        return docs;\n    } catch (err) {\n        console.error('error retrieving docs', err);\n        throw err;\n    }\n}\n\n  module.exports = {create, createFirebase, loginFirebase, all, balance, updateBalance, login, logout, getActivity, transfer}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}