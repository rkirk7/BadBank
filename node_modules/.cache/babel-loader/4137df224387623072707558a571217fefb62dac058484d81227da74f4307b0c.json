{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoCredentials = exports.DEFAULT_ALLOWED_HOSTS = void 0;\nconst error_1 = require(\"../../error\");\nconst gssapi_1 = require(\"./gssapi\");\nconst providers_1 = require(\"./providers\");\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\nfunction getDefaultAuthMechanism(hello) {\n  if (hello) {\n    // If hello contains saslSupportedMechs, use scram-sha-256\n    // if it is available, else scram-sha-1\n    if (Array.isArray(hello.saslSupportedMechs)) {\n      return hello.saslSupportedMechs.includes(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256) ? providers_1.AuthMechanism.MONGODB_SCRAM_SHA256 : providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n    }\n    // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n    if (hello.maxWireVersion >= 3) {\n      return providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n    }\n  }\n  // Default for wireprotocol < 3\n  return providers_1.AuthMechanism.MONGODB_CR;\n}\nconst ALLOWED_ENVIRONMENT_NAMES = ['test', 'azure', 'gcp'];\nconst ALLOWED_HOSTS_ERROR = 'Auth mechanism property ALLOWED_HOSTS must be an array of strings.';\n/** @internal */\nexports.DEFAULT_ALLOWED_HOSTS = ['*.mongodb.net', '*.mongodb-qa.net', '*.mongodb-dev.net', '*.mongodbgov.net', 'localhost', '127.0.0.1', '::1'];\n/** Error for when the token audience is missing in the environment. */\nconst TOKEN_RESOURCE_MISSING_ERROR = 'TOKEN_RESOURCE must be set in the auth mechanism properties when ENVIRONMENT is azure or gcp.';\n/**\n * A representation of the credentials used by MongoDB\n * @public\n */\nclass MongoCredentials {\n  constructor(options) {\n    var _options$username;\n    this.username = (_options$username = options.username) !== null && _options$username !== void 0 ? _options$username : '';\n    this.password = options.password;\n    this.source = options.source;\n    if (!this.source && options.db) {\n      this.source = options.db;\n    }\n    this.mechanism = options.mechanism || providers_1.AuthMechanism.MONGODB_DEFAULT;\n    this.mechanismProperties = options.mechanismProperties || {};\n    if (this.mechanism.match(/MONGODB-AWS/i)) {\n      if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n        this.username = process.env.AWS_ACCESS_KEY_ID;\n      }\n      if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n        this.password = process.env.AWS_SECRET_ACCESS_KEY;\n      }\n      if (this.mechanismProperties.AWS_SESSION_TOKEN == null && process.env.AWS_SESSION_TOKEN != null) {\n        this.mechanismProperties = {\n          ...this.mechanismProperties,\n          AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\n        };\n      }\n    }\n    if (this.mechanism === providers_1.AuthMechanism.MONGODB_OIDC && !this.mechanismProperties.ALLOWED_HOSTS) {\n      this.mechanismProperties = {\n        ...this.mechanismProperties,\n        ALLOWED_HOSTS: exports.DEFAULT_ALLOWED_HOSTS\n      };\n    }\n    Object.freeze(this.mechanismProperties);\n    Object.freeze(this);\n  }\n  /** Determines if two MongoCredentials objects are equivalent */\n  equals(other) {\n    return this.mechanism === other.mechanism && this.username === other.username && this.password === other.password && this.source === other.source;\n  }\n  /**\n   * If the authentication mechanism is set to \"default\", resolves the authMechanism\n   * based on the server version and server supported sasl mechanisms.\n   *\n   * @param hello - A hello response from the server\n   */\n  resolveAuthMechanism(hello) {\n    // If the mechanism is not \"default\", then it does not need to be resolved\n    if (this.mechanism.match(/DEFAULT/i)) {\n      return new MongoCredentials({\n        username: this.username,\n        password: this.password,\n        source: this.source,\n        mechanism: getDefaultAuthMechanism(hello),\n        mechanismProperties: this.mechanismProperties\n      });\n    }\n    return this;\n  }\n  validate() {\n    var _this$mechanismProper;\n    if ((this.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI || this.mechanism === providers_1.AuthMechanism.MONGODB_CR || this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN || this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA1 || this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA256) && !this.username) {\n      throw new error_1.MongoMissingCredentialsError(\"Username required for mechanism '\".concat(this.mechanism, \"'\"));\n    }\n    if (this.mechanism === providers_1.AuthMechanism.MONGODB_OIDC) {\n      if (this.username && this.mechanismProperties.ENVIRONMENT && this.mechanismProperties.ENVIRONMENT !== 'azure') {\n        throw new error_1.MongoInvalidArgumentError(\"username and ENVIRONMENT '\".concat(this.mechanismProperties.ENVIRONMENT, \"' may not be used together for mechanism '\").concat(this.mechanism, \"'.\"));\n      }\n      if (this.username && this.password) {\n        throw new error_1.MongoInvalidArgumentError(\"No password is allowed in ENVIRONMENT '\".concat(this.mechanismProperties.ENVIRONMENT, \"' for '\").concat(this.mechanism, \"'.\"));\n      }\n      if ((this.mechanismProperties.ENVIRONMENT === 'azure' || this.mechanismProperties.ENVIRONMENT === 'gcp') && !this.mechanismProperties.TOKEN_RESOURCE) {\n        throw new error_1.MongoInvalidArgumentError(TOKEN_RESOURCE_MISSING_ERROR);\n      }\n      if (this.mechanismProperties.ENVIRONMENT && !ALLOWED_ENVIRONMENT_NAMES.includes(this.mechanismProperties.ENVIRONMENT)) {\n        throw new error_1.MongoInvalidArgumentError(\"Currently only a ENVIRONMENT in \".concat(ALLOWED_ENVIRONMENT_NAMES.join(','), \" is supported for mechanism '\").concat(this.mechanism, \"'.\"));\n      }\n      if (!this.mechanismProperties.ENVIRONMENT && !this.mechanismProperties.OIDC_CALLBACK && !this.mechanismProperties.OIDC_HUMAN_CALLBACK) {\n        throw new error_1.MongoInvalidArgumentError(\"Either a ENVIRONMENT, OIDC_CALLBACK, or OIDC_HUMAN_CALLBACK must be specified for mechanism '\".concat(this.mechanism, \"'.\"));\n      }\n      if (this.mechanismProperties.ALLOWED_HOSTS) {\n        const hosts = this.mechanismProperties.ALLOWED_HOSTS;\n        if (!Array.isArray(hosts)) {\n          throw new error_1.MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\n        }\n        for (const host of hosts) {\n          if (typeof host !== 'string') {\n            throw new error_1.MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\n          }\n        }\n      }\n    }\n    if (providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(this.mechanism)) {\n      if (this.source != null && this.source !== '$external') {\n        // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n        throw new error_1.MongoAPIError(\"Invalid source '\".concat(this.source, \"' for mechanism '\").concat(this.mechanism, \"' specified.\"));\n      }\n    }\n    if (this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN && this.source == null) {\n      // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n      throw new error_1.MongoAPIError('PLAIN Authentication Mechanism needs an auth source');\n    }\n    if (this.mechanism === providers_1.AuthMechanism.MONGODB_X509 && this.password != null) {\n      if (this.password === '') {\n        Reflect.set(this, 'password', undefined);\n        return;\n      }\n      // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n      throw new error_1.MongoAPIError(\"Password not allowed for mechanism MONGODB-X509\");\n    }\n    const canonicalization = (_this$mechanismProper = this.mechanismProperties.CANONICALIZE_HOST_NAME) !== null && _this$mechanismProper !== void 0 ? _this$mechanismProper : false;\n    if (!Object.values(gssapi_1.GSSAPICanonicalizationValue).includes(canonicalization)) {\n      throw new error_1.MongoAPIError(\"Invalid CANONICALIZE_HOST_NAME value: \".concat(canonicalization));\n    }\n  }\n  static merge(creds, options) {\n    var _ref, _options$username2, _ref2, _options$password, _ref3, _options$mechanism, _ref4, _options$mechanismPro, _ref5, _ref6, _options$source;\n    return new MongoCredentials({\n      username: (_ref = (_options$username2 = options.username) !== null && _options$username2 !== void 0 ? _options$username2 : creds === null || creds === void 0 ? void 0 : creds.username) !== null && _ref !== void 0 ? _ref : '',\n      password: (_ref2 = (_options$password = options.password) !== null && _options$password !== void 0 ? _options$password : creds === null || creds === void 0 ? void 0 : creds.password) !== null && _ref2 !== void 0 ? _ref2 : '',\n      mechanism: (_ref3 = (_options$mechanism = options.mechanism) !== null && _options$mechanism !== void 0 ? _options$mechanism : creds === null || creds === void 0 ? void 0 : creds.mechanism) !== null && _ref3 !== void 0 ? _ref3 : providers_1.AuthMechanism.MONGODB_DEFAULT,\n      mechanismProperties: (_ref4 = (_options$mechanismPro = options.mechanismProperties) !== null && _options$mechanismPro !== void 0 ? _options$mechanismPro : creds === null || creds === void 0 ? void 0 : creds.mechanismProperties) !== null && _ref4 !== void 0 ? _ref4 : {},\n      source: (_ref5 = (_ref6 = (_options$source = options.source) !== null && _options$source !== void 0 ? _options$source : options.db) !== null && _ref6 !== void 0 ? _ref6 : creds === null || creds === void 0 ? void 0 : creds.source) !== null && _ref5 !== void 0 ? _ref5 : 'admin'\n    });\n  }\n}\nexports.MongoCredentials = MongoCredentials;","map":{"version":3,"names":["error_1","require","gssapi_1","providers_1","getDefaultAuthMechanism","hello","Array","isArray","saslSupportedMechs","includes","AuthMechanism","MONGODB_SCRAM_SHA256","MONGODB_SCRAM_SHA1","maxWireVersion","MONGODB_CR","ALLOWED_ENVIRONMENT_NAMES","ALLOWED_HOSTS_ERROR","exports","DEFAULT_ALLOWED_HOSTS","TOKEN_RESOURCE_MISSING_ERROR","MongoCredentials","constructor","options","_options$username","username","password","source","db","mechanism","MONGODB_DEFAULT","mechanismProperties","match","process","env","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_SESSION_TOKEN","MONGODB_OIDC","ALLOWED_HOSTS","Object","freeze","equals","other","resolveAuthMechanism","validate","_this$mechanismProper","MONGODB_GSSAPI","MONGODB_PLAIN","MongoMissingCredentialsError","concat","ENVIRONMENT","MongoInvalidArgumentError","TOKEN_RESOURCE","join","OIDC_CALLBACK","OIDC_HUMAN_CALLBACK","hosts","host","AUTH_MECHS_AUTH_SRC_EXTERNAL","has","MongoAPIError","MONGODB_X509","Reflect","set","undefined","canonicalization","CANONICALIZE_HOST_NAME","values","GSSAPICanonicalizationValue","merge","creds","_ref","_options$username2","_ref2","_options$password","_ref3","_options$mechanism","_ref4","_options$mechanismPro","_ref5","_ref6","_options$source"],"sources":["/Users/Regan/Documents/GitHub/BadBank/node_modules/mongodb/src/cmap/auth/mongo_credentials.ts"],"sourcesContent":["// Resolves the default auth mechanism according to\n// Resolves the default auth mechanism according to\nimport type { Document } from '../../bson';\nimport {\n  MongoAPIError,\n  MongoInvalidArgumentError,\n  MongoMissingCredentialsError\n} from '../../error';\nimport { GSSAPICanonicalizationValue } from './gssapi';\nimport type { OIDCCallbackFunction } from './mongodb_oidc';\nimport { AUTH_MECHS_AUTH_SRC_EXTERNAL, AuthMechanism } from './providers';\n\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\nfunction getDefaultAuthMechanism(hello: Document | null): AuthMechanism {\n  if (hello) {\n    // If hello contains saslSupportedMechs, use scram-sha-256\n    // if it is available, else scram-sha-1\n    if (Array.isArray(hello.saslSupportedMechs)) {\n      return hello.saslSupportedMechs.includes(AuthMechanism.MONGODB_SCRAM_SHA256)\n        ? AuthMechanism.MONGODB_SCRAM_SHA256\n        : AuthMechanism.MONGODB_SCRAM_SHA1;\n    }\n\n    // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n    if (hello.maxWireVersion >= 3) {\n      return AuthMechanism.MONGODB_SCRAM_SHA1;\n    }\n  }\n\n  // Default for wireprotocol < 3\n  return AuthMechanism.MONGODB_CR;\n}\n\nconst ALLOWED_ENVIRONMENT_NAMES: AuthMechanismProperties['ENVIRONMENT'][] = [\n  'test',\n  'azure',\n  'gcp'\n];\nconst ALLOWED_HOSTS_ERROR = 'Auth mechanism property ALLOWED_HOSTS must be an array of strings.';\n\n/** @internal */\nexport const DEFAULT_ALLOWED_HOSTS = [\n  '*.mongodb.net',\n  '*.mongodb-qa.net',\n  '*.mongodb-dev.net',\n  '*.mongodbgov.net',\n  'localhost',\n  '127.0.0.1',\n  '::1'\n];\n\n/** Error for when the token audience is missing in the environment. */\nconst TOKEN_RESOURCE_MISSING_ERROR =\n  'TOKEN_RESOURCE must be set in the auth mechanism properties when ENVIRONMENT is azure or gcp.';\n\n/** @public */\nexport interface AuthMechanismProperties extends Document {\n  SERVICE_HOST?: string;\n  SERVICE_NAME?: string;\n  SERVICE_REALM?: string;\n  CANONICALIZE_HOST_NAME?: GSSAPICanonicalizationValue;\n  AWS_SESSION_TOKEN?: string;\n  /** A user provided OIDC machine callback function. */\n  OIDC_CALLBACK?: OIDCCallbackFunction;\n  /** A user provided OIDC human interacted callback function. */\n  OIDC_HUMAN_CALLBACK?: OIDCCallbackFunction;\n  /** The OIDC environment. Note that 'test' is for internal use only. */\n  ENVIRONMENT?: 'test' | 'azure' | 'gcp';\n  /** Allowed hosts that OIDC auth can connect to. */\n  ALLOWED_HOSTS?: string[];\n  /** The resource token for OIDC auth in Azure and GCP. */\n  TOKEN_RESOURCE?: string;\n}\n\n/** @public */\nexport interface MongoCredentialsOptions {\n  username?: string;\n  password: string;\n  source: string;\n  db?: string;\n  mechanism?: AuthMechanism;\n  mechanismProperties: AuthMechanismProperties;\n}\n\n/**\n * A representation of the credentials used by MongoDB\n * @public\n */\nexport class MongoCredentials {\n  /** The username used for authentication */\n  readonly username: string;\n  /** The password used for authentication */\n  readonly password: string;\n  /** The database that the user should authenticate against */\n  readonly source: string;\n  /** The method used to authenticate */\n  readonly mechanism: AuthMechanism;\n  /** Special properties used by some types of auth mechanisms */\n  readonly mechanismProperties: AuthMechanismProperties;\n\n  constructor(options: MongoCredentialsOptions) {\n    this.username = options.username ?? '';\n    this.password = options.password;\n    this.source = options.source;\n    if (!this.source && options.db) {\n      this.source = options.db;\n    }\n    this.mechanism = options.mechanism || AuthMechanism.MONGODB_DEFAULT;\n    this.mechanismProperties = options.mechanismProperties || {};\n\n    if (this.mechanism.match(/MONGODB-AWS/i)) {\n      if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n        this.username = process.env.AWS_ACCESS_KEY_ID;\n      }\n\n      if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n        this.password = process.env.AWS_SECRET_ACCESS_KEY;\n      }\n\n      if (\n        this.mechanismProperties.AWS_SESSION_TOKEN == null &&\n        process.env.AWS_SESSION_TOKEN != null\n      ) {\n        this.mechanismProperties = {\n          ...this.mechanismProperties,\n          AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\n        };\n      }\n    }\n\n    if (this.mechanism === AuthMechanism.MONGODB_OIDC && !this.mechanismProperties.ALLOWED_HOSTS) {\n      this.mechanismProperties = {\n        ...this.mechanismProperties,\n        ALLOWED_HOSTS: DEFAULT_ALLOWED_HOSTS\n      };\n    }\n\n    Object.freeze(this.mechanismProperties);\n    Object.freeze(this);\n  }\n\n  /** Determines if two MongoCredentials objects are equivalent */\n  equals(other: MongoCredentials): boolean {\n    return (\n      this.mechanism === other.mechanism &&\n      this.username === other.username &&\n      this.password === other.password &&\n      this.source === other.source\n    );\n  }\n\n  /**\n   * If the authentication mechanism is set to \"default\", resolves the authMechanism\n   * based on the server version and server supported sasl mechanisms.\n   *\n   * @param hello - A hello response from the server\n   */\n  resolveAuthMechanism(hello: Document | null): MongoCredentials {\n    // If the mechanism is not \"default\", then it does not need to be resolved\n    if (this.mechanism.match(/DEFAULT/i)) {\n      return new MongoCredentials({\n        username: this.username,\n        password: this.password,\n        source: this.source,\n        mechanism: getDefaultAuthMechanism(hello),\n        mechanismProperties: this.mechanismProperties\n      });\n    }\n\n    return this;\n  }\n\n  validate(): void {\n    if (\n      (this.mechanism === AuthMechanism.MONGODB_GSSAPI ||\n        this.mechanism === AuthMechanism.MONGODB_CR ||\n        this.mechanism === AuthMechanism.MONGODB_PLAIN ||\n        this.mechanism === AuthMechanism.MONGODB_SCRAM_SHA1 ||\n        this.mechanism === AuthMechanism.MONGODB_SCRAM_SHA256) &&\n      !this.username\n    ) {\n      throw new MongoMissingCredentialsError(`Username required for mechanism '${this.mechanism}'`);\n    }\n\n    if (this.mechanism === AuthMechanism.MONGODB_OIDC) {\n      if (\n        this.username &&\n        this.mechanismProperties.ENVIRONMENT &&\n        this.mechanismProperties.ENVIRONMENT !== 'azure'\n      ) {\n        throw new MongoInvalidArgumentError(\n          `username and ENVIRONMENT '${this.mechanismProperties.ENVIRONMENT}' may not be used together for mechanism '${this.mechanism}'.`\n        );\n      }\n\n      if (this.username && this.password) {\n        throw new MongoInvalidArgumentError(\n          `No password is allowed in ENVIRONMENT '${this.mechanismProperties.ENVIRONMENT}' for '${this.mechanism}'.`\n        );\n      }\n\n      if (\n        (this.mechanismProperties.ENVIRONMENT === 'azure' ||\n          this.mechanismProperties.ENVIRONMENT === 'gcp') &&\n        !this.mechanismProperties.TOKEN_RESOURCE\n      ) {\n        throw new MongoInvalidArgumentError(TOKEN_RESOURCE_MISSING_ERROR);\n      }\n\n      if (\n        this.mechanismProperties.ENVIRONMENT &&\n        !ALLOWED_ENVIRONMENT_NAMES.includes(this.mechanismProperties.ENVIRONMENT)\n      ) {\n        throw new MongoInvalidArgumentError(\n          `Currently only a ENVIRONMENT in ${ALLOWED_ENVIRONMENT_NAMES.join(\n            ','\n          )} is supported for mechanism '${this.mechanism}'.`\n        );\n      }\n\n      if (\n        !this.mechanismProperties.ENVIRONMENT &&\n        !this.mechanismProperties.OIDC_CALLBACK &&\n        !this.mechanismProperties.OIDC_HUMAN_CALLBACK\n      ) {\n        throw new MongoInvalidArgumentError(\n          `Either a ENVIRONMENT, OIDC_CALLBACK, or OIDC_HUMAN_CALLBACK must be specified for mechanism '${this.mechanism}'.`\n        );\n      }\n\n      if (this.mechanismProperties.ALLOWED_HOSTS) {\n        const hosts = this.mechanismProperties.ALLOWED_HOSTS;\n        if (!Array.isArray(hosts)) {\n          throw new MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\n        }\n        for (const host of hosts) {\n          if (typeof host !== 'string') {\n            throw new MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\n          }\n        }\n      }\n    }\n\n    if (AUTH_MECHS_AUTH_SRC_EXTERNAL.has(this.mechanism)) {\n      if (this.source != null && this.source !== '$external') {\n        // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n        throw new MongoAPIError(\n          `Invalid source '${this.source}' for mechanism '${this.mechanism}' specified.`\n        );\n      }\n    }\n\n    if (this.mechanism === AuthMechanism.MONGODB_PLAIN && this.source == null) {\n      // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n      throw new MongoAPIError('PLAIN Authentication Mechanism needs an auth source');\n    }\n\n    if (this.mechanism === AuthMechanism.MONGODB_X509 && this.password != null) {\n      if (this.password === '') {\n        Reflect.set(this, 'password', undefined);\n        return;\n      }\n      // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n      throw new MongoAPIError(`Password not allowed for mechanism MONGODB-X509`);\n    }\n\n    const canonicalization = this.mechanismProperties.CANONICALIZE_HOST_NAME ?? false;\n    if (!Object.values(GSSAPICanonicalizationValue).includes(canonicalization)) {\n      throw new MongoAPIError(`Invalid CANONICALIZE_HOST_NAME value: ${canonicalization}`);\n    }\n  }\n\n  static merge(\n    creds: MongoCredentials | undefined,\n    options: Partial<MongoCredentialsOptions>\n  ): MongoCredentials {\n    return new MongoCredentials({\n      username: options.username ?? creds?.username ?? '',\n      password: options.password ?? creds?.password ?? '',\n      mechanism: options.mechanism ?? creds?.mechanism ?? AuthMechanism.MONGODB_DEFAULT,\n      mechanismProperties: options.mechanismProperties ?? creds?.mechanismProperties ?? {},\n      source: options.source ?? options.db ?? creds?.source ?? 'admin'\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}