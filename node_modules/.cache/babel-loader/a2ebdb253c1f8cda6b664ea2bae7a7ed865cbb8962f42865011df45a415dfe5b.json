{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindOneAndUpdateOperation = exports.FindOneAndReplaceOperation = exports.FindOneAndDeleteOperation = exports.FindAndModifyOperation = exports.ReturnDocument = void 0;\nconst error_1 = require(\"../error\");\nconst read_preference_1 = require(\"../read_preference\");\nconst sort_1 = require(\"../sort\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @public */\nexports.ReturnDocument = Object.freeze({\n  BEFORE: 'before',\n  AFTER: 'after'\n});\nfunction configureFindAndModifyCmdBaseUpdateOpts(cmdBase, options) {\n  cmdBase.new = options.returnDocument === exports.ReturnDocument.AFTER;\n  cmdBase.upsert = options.upsert === true;\n  if (options.bypassDocumentValidation === true) {\n    cmdBase.bypassDocumentValidation = options.bypassDocumentValidation;\n  }\n  return cmdBase;\n}\n/** @internal */\nclass FindAndModifyOperation extends command_1.CommandOperation {\n  constructor(collection, query, options) {\n    var _options$includeResul;\n    super(collection, options);\n    this.options = options !== null && options !== void 0 ? options : {};\n    this.cmdBase = {\n      remove: false,\n      new: false,\n      upsert: false\n    };\n    (_options$includeResul = options.includeResultMetadata) !== null && _options$includeResul !== void 0 ? _options$includeResul : options.includeResultMetadata = false;\n    const sort = (0, sort_1.formatSort)(options.sort);\n    if (sort) {\n      this.cmdBase.sort = sort;\n    }\n    if (options.projection) {\n      this.cmdBase.fields = options.projection;\n    }\n    if (options.maxTimeMS) {\n      this.cmdBase.maxTimeMS = options.maxTimeMS;\n    }\n    // Decorate the findAndModify command with the write Concern\n    if (options.writeConcern) {\n      this.cmdBase.writeConcern = options.writeConcern;\n    }\n    if (options.let) {\n      this.cmdBase.let = options.let;\n    }\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      this.cmdBase.comment = options.comment;\n    }\n    // force primary read preference\n    this.readPreference = read_preference_1.ReadPreference.primary;\n    this.collection = collection;\n    this.query = query;\n  }\n  get commandName() {\n    return 'findAndModify';\n  }\n  async execute(server, session) {\n    var _result$value;\n    const coll = this.collection;\n    const query = this.query;\n    const options = {\n      ...this.options,\n      ...this.bsonOptions\n    };\n    // Create findAndModify command object\n    const cmd = {\n      findAndModify: coll.collectionName,\n      query: query,\n      ...this.cmdBase\n    };\n    // Have we specified collation\n    try {\n      (0, utils_1.decorateWithCollation)(cmd, coll, options);\n    } catch (err) {\n      return err;\n    }\n    if (options.hint) {\n      var _this$writeConcern;\n      // TODO: once this method becomes a CommandOperation we will have the server\n      // in place to check.\n      const unacknowledgedWrite = ((_this$writeConcern = this.writeConcern) === null || _this$writeConcern === void 0 ? void 0 : _this$writeConcern.w) === 0;\n      if (unacknowledgedWrite || (0, utils_1.maxWireVersion)(server) < 8) {\n        throw new error_1.MongoCompatibilityError('The current topology does not support a hint on findAndModify commands');\n      }\n      cmd.hint = options.hint;\n    }\n    // Execute the command\n    const result = await super.executeCommand(server, session, cmd);\n    return options.includeResultMetadata ? result : (_result$value = result.value) !== null && _result$value !== void 0 ? _result$value : null;\n  }\n}\nexports.FindAndModifyOperation = FindAndModifyOperation;\n/** @internal */\nclass FindOneAndDeleteOperation extends FindAndModifyOperation {\n  constructor(collection, filter, options) {\n    // Basic validation\n    if (filter == null || typeof filter !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n    super(collection, filter, options);\n    this.cmdBase.remove = true;\n  }\n}\nexports.FindOneAndDeleteOperation = FindOneAndDeleteOperation;\n/** @internal */\nclass FindOneAndReplaceOperation extends FindAndModifyOperation {\n  constructor(collection, filter, replacement, options) {\n    if (filter == null || typeof filter !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n    if (replacement == null || typeof replacement !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"replacement\" must be an object');\n    }\n    if ((0, utils_1.hasAtomicOperators)(replacement)) {\n      throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n    }\n    super(collection, filter, options);\n    this.cmdBase.update = replacement;\n    configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n  }\n}\nexports.FindOneAndReplaceOperation = FindOneAndReplaceOperation;\n/** @internal */\nclass FindOneAndUpdateOperation extends FindAndModifyOperation {\n  constructor(collection, filter, update, options) {\n    if (filter == null || typeof filter !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n    if (update == null || typeof update !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"update\" must be an object');\n    }\n    if (!(0, utils_1.hasAtomicOperators)(update)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n    super(collection, filter, options);\n    this.cmdBase.update = update;\n    configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n    if (options.arrayFilters) {\n      this.cmdBase.arrayFilters = options.arrayFilters;\n    }\n  }\n}\nexports.FindOneAndUpdateOperation = FindOneAndUpdateOperation;\n(0, operation_1.defineAspects)(FindAndModifyOperation, [operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE]);","map":{"version":3,"names":["error_1","require","read_preference_1","sort_1","utils_1","command_1","operation_1","exports","ReturnDocument","Object","freeze","BEFORE","AFTER","configureFindAndModifyCmdBaseUpdateOpts","cmdBase","options","new","returnDocument","upsert","bypassDocumentValidation","FindAndModifyOperation","CommandOperation","constructor","collection","query","_options$includeResul","remove","includeResultMetadata","sort","formatSort","projection","fields","maxTimeMS","writeConcern","let","comment","undefined","readPreference","ReadPreference","primary","commandName","execute","server","session","_result$value","coll","bsonOptions","cmd","findAndModify","collectionName","decorateWithCollation","err","hint","_this$writeConcern","unacknowledgedWrite","w","maxWireVersion","MongoCompatibilityError","result","executeCommand","value","FindOneAndDeleteOperation","filter","MongoInvalidArgumentError","FindOneAndReplaceOperation","replacement","hasAtomicOperators","update","FindOneAndUpdateOperation","arrayFilters","defineAspects","Aspect","WRITE_OPERATION","RETRYABLE","EXPLAINABLE"],"sources":["/Users/Regan/Documents/GitHub/BadBank/node_modules/mongodb/src/operations/find_and_modify.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Collection } from '../collection';\nimport { MongoCompatibilityError, MongoInvalidArgumentError } from '../error';\nimport { ReadPreference } from '../read_preference';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { formatSort, type Sort, type SortForCmd } from '../sort';\nimport { decorateWithCollation, hasAtomicOperators, maxWireVersion } from '../utils';\nimport type { WriteConcern, WriteConcernSettings } from '../write_concern';\nimport { CommandOperation, type CommandOperationOptions } from './command';\nimport { Aspect, defineAspects } from './operation';\n\n/** @public */\nexport const ReturnDocument = Object.freeze({\n  BEFORE: 'before',\n  AFTER: 'after'\n} as const);\n\n/** @public */\nexport type ReturnDocument = (typeof ReturnDocument)[keyof typeof ReturnDocument];\n\n/** @public */\nexport interface FindOneAndDeleteOptions extends CommandOperationOptions {\n  /** An optional hint for query optimization. See the {@link https://www.mongodb.com/docs/manual/reference/command/update/#update-command-hint|update command} reference for more information.*/\n  hint?: Document;\n  /** Limits the fields to return for all matching documents. */\n  projection?: Document;\n  /** Determines which document the operation modifies if the query selects multiple documents. */\n  sort?: Sort;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n  /**\n   * Return the ModifyResult instead of the modified document. Defaults to false\n   */\n  includeResultMetadata?: boolean;\n}\n\n/** @public */\nexport interface FindOneAndReplaceOptions extends CommandOperationOptions {\n  /** Allow driver to bypass schema validation. */\n  bypassDocumentValidation?: boolean;\n  /** An optional hint for query optimization. See the {@link https://www.mongodb.com/docs/manual/reference/command/update/#update-command-hint|update command} reference for more information.*/\n  hint?: Document;\n  /** Limits the fields to return for all matching documents. */\n  projection?: Document;\n  /** When set to 'after', returns the updated document rather than the original. The default is 'before'.  */\n  returnDocument?: ReturnDocument;\n  /** Determines which document the operation modifies if the query selects multiple documents. */\n  sort?: Sort;\n  /** Upsert the document if it does not exist. */\n  upsert?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n  /**\n   * Return the ModifyResult instead of the modified document. Defaults to false\n   */\n  includeResultMetadata?: boolean;\n}\n\n/** @public */\nexport interface FindOneAndUpdateOptions extends CommandOperationOptions {\n  /** Optional list of array filters referenced in filtered positional operators */\n  arrayFilters?: Document[];\n  /** Allow driver to bypass schema validation. */\n  bypassDocumentValidation?: boolean;\n  /** An optional hint for query optimization. See the {@link https://www.mongodb.com/docs/manual/reference/command/update/#update-command-hint|update command} reference for more information.*/\n  hint?: Document;\n  /** Limits the fields to return for all matching documents. */\n  projection?: Document;\n  /** When set to 'after', returns the updated document rather than the original. The default is 'before'.  */\n  returnDocument?: ReturnDocument;\n  /** Determines which document the operation modifies if the query selects multiple documents. */\n  sort?: Sort;\n  /** Upsert the document if it does not exist. */\n  upsert?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n  /**\n   * Return the ModifyResult instead of the modified document. Defaults to false\n   */\n  includeResultMetadata?: boolean;\n}\n\n/** @internal */\ninterface FindAndModifyCmdBase {\n  remove: boolean;\n  new: boolean;\n  upsert: boolean;\n  update?: Document;\n  sort?: SortForCmd;\n  fields?: Document;\n  bypassDocumentValidation?: boolean;\n  arrayFilters?: Document[];\n  maxTimeMS?: number;\n  let?: Document;\n  writeConcern?: WriteConcern | WriteConcernSettings;\n  /**\n   * Comment to apply to the operation.\n   *\n   * In server versions pre-4.4, 'comment' must be string.  A server\n   * error will be thrown if any other type is provided.\n   *\n   * In server versions 4.4 and above, 'comment' can be any valid BSON type.\n   */\n  comment?: unknown;\n}\n\nfunction configureFindAndModifyCmdBaseUpdateOpts(\n  cmdBase: FindAndModifyCmdBase,\n  options: FindOneAndReplaceOptions | FindOneAndUpdateOptions\n): FindAndModifyCmdBase {\n  cmdBase.new = options.returnDocument === ReturnDocument.AFTER;\n  cmdBase.upsert = options.upsert === true;\n\n  if (options.bypassDocumentValidation === true) {\n    cmdBase.bypassDocumentValidation = options.bypassDocumentValidation;\n  }\n  return cmdBase;\n}\n\n/** @internal */\nexport class FindAndModifyOperation extends CommandOperation<Document> {\n  override options: FindOneAndReplaceOptions | FindOneAndUpdateOptions | FindOneAndDeleteOptions;\n  cmdBase: FindAndModifyCmdBase;\n  collection: Collection;\n  query: Document;\n  doc?: Document;\n\n  constructor(\n    collection: Collection,\n    query: Document,\n    options: FindOneAndReplaceOptions | FindOneAndUpdateOptions | FindOneAndDeleteOptions\n  ) {\n    super(collection, options);\n    this.options = options ?? {};\n    this.cmdBase = {\n      remove: false,\n      new: false,\n      upsert: false\n    };\n\n    options.includeResultMetadata ??= false;\n\n    const sort = formatSort(options.sort);\n    if (sort) {\n      this.cmdBase.sort = sort;\n    }\n\n    if (options.projection) {\n      this.cmdBase.fields = options.projection;\n    }\n\n    if (options.maxTimeMS) {\n      this.cmdBase.maxTimeMS = options.maxTimeMS;\n    }\n\n    // Decorate the findAndModify command with the write Concern\n    if (options.writeConcern) {\n      this.cmdBase.writeConcern = options.writeConcern;\n    }\n\n    if (options.let) {\n      this.cmdBase.let = options.let;\n    }\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      this.cmdBase.comment = options.comment;\n    }\n\n    // force primary read preference\n    this.readPreference = ReadPreference.primary;\n\n    this.collection = collection;\n    this.query = query;\n  }\n\n  override get commandName() {\n    return 'findAndModify' as const;\n  }\n\n  override async execute(server: Server, session: ClientSession | undefined): Promise<Document> {\n    const coll = this.collection;\n    const query = this.query;\n    const options = { ...this.options, ...this.bsonOptions };\n\n    // Create findAndModify command object\n    const cmd: Document = {\n      findAndModify: coll.collectionName,\n      query: query,\n      ...this.cmdBase\n    };\n\n    // Have we specified collation\n    try {\n      decorateWithCollation(cmd, coll, options);\n    } catch (err) {\n      return err;\n    }\n\n    if (options.hint) {\n      // TODO: once this method becomes a CommandOperation we will have the server\n      // in place to check.\n      const unacknowledgedWrite = this.writeConcern?.w === 0;\n      if (unacknowledgedWrite || maxWireVersion(server) < 8) {\n        throw new MongoCompatibilityError(\n          'The current topology does not support a hint on findAndModify commands'\n        );\n      }\n\n      cmd.hint = options.hint;\n    }\n\n    // Execute the command\n    const result = await super.executeCommand(server, session, cmd);\n    return options.includeResultMetadata ? result : result.value ?? null;\n  }\n}\n\n/** @internal */\nexport class FindOneAndDeleteOperation extends FindAndModifyOperation {\n  constructor(collection: Collection, filter: Document, options: FindOneAndDeleteOptions) {\n    // Basic validation\n    if (filter == null || typeof filter !== 'object') {\n      throw new MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n\n    super(collection, filter, options);\n    this.cmdBase.remove = true;\n  }\n}\n\n/** @internal */\nexport class FindOneAndReplaceOperation extends FindAndModifyOperation {\n  constructor(\n    collection: Collection,\n    filter: Document,\n    replacement: Document,\n    options: FindOneAndReplaceOptions\n  ) {\n    if (filter == null || typeof filter !== 'object') {\n      throw new MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n\n    if (replacement == null || typeof replacement !== 'object') {\n      throw new MongoInvalidArgumentError('Argument \"replacement\" must be an object');\n    }\n\n    if (hasAtomicOperators(replacement)) {\n      throw new MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n    }\n\n    super(collection, filter, options);\n    this.cmdBase.update = replacement;\n    configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n  }\n}\n\n/** @internal */\nexport class FindOneAndUpdateOperation extends FindAndModifyOperation {\n  constructor(\n    collection: Collection,\n    filter: Document,\n    update: Document,\n    options: FindOneAndUpdateOptions\n  ) {\n    if (filter == null || typeof filter !== 'object') {\n      throw new MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n\n    if (update == null || typeof update !== 'object') {\n      throw new MongoInvalidArgumentError('Argument \"update\" must be an object');\n    }\n\n    if (!hasAtomicOperators(update)) {\n      throw new MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n\n    super(collection, filter, options);\n    this.cmdBase.update = update;\n    configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n\n    if (options.arrayFilters) {\n      this.cmdBase.arrayFilters = options.arrayFilters;\n    }\n  }\n}\n\ndefineAspects(FindAndModifyOperation, [\n  Aspect.WRITE_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.EXPLAINABLE\n]);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}