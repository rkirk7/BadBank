{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport { Card, CurrentUser } from \"./context\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getBalance } from \"./loading\";\nimport { checkAuthorization } from \"./firebase\";\nexport default function Withdraw() {\n  const {\n    currentUser,\n    setCurrentUser\n  } = React.useContext(CurrentUser);\n  const [withdrawal, setWithdrawal] = React.useState(0);\n  const [lastWithdrawal, setLastWithdrawal] = React.useState(0);\n  const [balance, setBalance] = React.useState(currentUser.balance);\n  const [formFilled, setFormFilled] = React.useState(true);\n  const [withdrawalComplete, setWithdrawalComplete] = React.useState(false);\n  const [loading, setLoading] = React.useState(true);\n  const navigate = useNavigate();\n  useEffect(() => {\n    async function loadPage() {\n      if (currentUser.email === '' || !currentUser) {\n        let res = await checkAuthorization(setCurrentUser);\n        if (!res) {\n          navigate('/');\n        }\n      } else {\n        await getBalance(setCurrentUser, currentUser.email);\n      }\n      setLoading(false);\n    }\n    loadPage();\n  }, []);\n  function makeWithdrawal(e) {\n    e.preventDefault();\n    if (isNaN(Number(withdrawal))) {\n      alert('Your withdrawal must be a valid number.');\n      return;\n    }\n    if (Number(withdrawal) <= 0) {\n      alert('Please enter your withdrawal amount as a positive number.');\n      return;\n    }\n    if (!Number.isInteger(Number(withdrawal))) {\n      alert('Error: You must withdraw dollars only, not cents. Please round up or down and try again.');\n      return;\n    }\n    if (Number(withdrawal) > Number(currentUser.balance)) {\n      alert('Your balance is too low. Please enter a lower withdrawal amount.');\n      return;\n    } else {\n      let newBalance = parseInt(currentUser.balance) - parseInt(withdrawal);\n      setBalance(newBalance);\n      const updateUrl = \"/account/updateBalance/\".concat(currentUser.email, \"/\").concat(newBalance, \"/withdrawal/\").concat(withdrawal);\n      (async () => {\n        await fetch(updateUrl);\n        setBalance(newBalance);\n        setCurrentUser(user => ({\n          ...user,\n          balance: newBalance\n        }));\n        setLastWithdrawal(withdrawal);\n        setWithdrawal(0);\n        setWithdrawalComplete(true);\n      })();\n    }\n  }\n  React.useEffect(() => {\n    setFormFilled(withdrawal != '0' && withdrawal != '');\n  }, [withdrawal]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, !loading && /*#__PURE__*/React.createElement(Card, {\n    bgcolor: \"primary\",\n    txtcolor: \"white\",\n    header: \"Make a Withdrawal\",\n    text: \"\".concat(currentUser.name, \", your balance is $\").concat(currentUser.balance, \".\"),\n    title: withdrawalComplete && \"You have successfully withdrawn $\".concat(lastWithdrawal, \"!\"),\n    body: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"form\", null, \"Withdrawal Amount\", /*#__PURE__*/React.createElement(\"br\", null), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"input\",\n      className: \"form-control\",\n      id: \"withdrawal\",\n      placeholder: \"Enter Withdrawal Amount\",\n      value: withdrawal,\n      onChange: e => {\n        setWithdrawal(e.currentTarget.value);\n        setWithdrawalComplete(false);\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", null), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-light\",\n      onClick: makeWithdrawal,\n      disabled: !formFilled\n    }, \"Make Withdrawal\"), \" \", /*#__PURE__*/React.createElement(\"br\", null)))\n  }), \";\");\n}","map":{"version":3,"names":["React","useEffect","Card","CurrentUser","useNavigate","getBalance","checkAuthorization","Withdraw","currentUser","setCurrentUser","useContext","withdrawal","setWithdrawal","useState","lastWithdrawal","setLastWithdrawal","balance","setBalance","formFilled","setFormFilled","withdrawalComplete","setWithdrawalComplete","loading","setLoading","navigate","loadPage","email","res","makeWithdrawal","e","preventDefault","isNaN","Number","alert","isInteger","newBalance","parseInt","updateUrl","concat","fetch","user","createElement","Fragment","bgcolor","txtcolor","header","text","name","title","body","type","className","id","placeholder","value","onChange","currentTarget","onClick","disabled"],"sources":["/Users/Regan/Documents/GitHub/BadBank/public/src/Components/withdraw.js"],"sourcesContent":["import React, {useEffect} from \"react\";\nimport { Card, CurrentUser } from \"./context\";\nimport { useNavigate } from \"react-router-dom\";\nimport {getBalance} from \"./loading\"\nimport { checkAuthorization } from \"./firebase\";\n\nexport default function Withdraw(){\n    const { currentUser, setCurrentUser } = React.useContext(CurrentUser);\n    const [withdrawal, setWithdrawal] = React.useState(0);\n    const [lastWithdrawal, setLastWithdrawal] = React.useState(0);\n    const [balance, setBalance] = React.useState(currentUser.balance);\n    const [formFilled, setFormFilled] = React.useState(true);\n    const [withdrawalComplete, setWithdrawalComplete] = React.useState(false);\n    const [loading, setLoading] = React.useState(true);\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        async function loadPage() {\n            if (currentUser.email === '' || !currentUser) {\n                let res = await checkAuthorization(setCurrentUser);\n                if (!res) {\n                    navigate('/');\n                }\n            } \n            else {\n                await getBalance(setCurrentUser, currentUser.email);\n            }\n            setLoading(false);\n        }\n        loadPage();\n    }, []);\n\n    function makeWithdrawal(e) {\n        e.preventDefault();\n        if (isNaN(Number(withdrawal))) {\n            alert('Your withdrawal must be a valid number.'); \n            return;\n        }\n        if ((Number(withdrawal)) <= 0) {\n            alert('Please enter your withdrawal amount as a positive number.'); \n            return;\n        }\n        if (!Number.isInteger(Number(withdrawal))) {\n            alert('Error: You must withdraw dollars only, not cents. Please round up or down and try again.'); \n            return;\n        }\n        if (Number(withdrawal) > Number(currentUser.balance)) {\n            alert('Your balance is too low. Please enter a lower withdrawal amount.'); \n            return;\n        }\n\n        else {\n        let newBalance = parseInt(currentUser.balance) - parseInt(withdrawal)\n        setBalance(newBalance);\n        const updateUrl = `/account/updateBalance/${currentUser.email}/${newBalance}/withdrawal/${withdrawal}`;\n        (async () => {\n       await fetch(updateUrl);\n       setBalance(newBalance);\n       setCurrentUser(user => ({\n        ...user,\n        balance: newBalance\n      })); \n        setLastWithdrawal(withdrawal);\n        setWithdrawal(0);\n        setWithdrawalComplete(true);\n        })();\n        } \n    }\n\n    React.useEffect(() =>{\n        setFormFilled(withdrawal != '0' && withdrawal != ''); \n    }, [withdrawal])\n    \n    return (\n        <>\n        {!loading && (\n        <Card \n        bgcolor=\"primary\"\n        txtcolor=\"white\"\n        header=\"Make a Withdrawal\"\n        text={`${currentUser.name}, your balance is $${currentUser.balance}.`}       \n        title={withdrawalComplete && `You have successfully withdrawn $${lastWithdrawal}!`}       \n        body= {\n            <>\n            <form>\n            Withdrawal Amount<br/>\n            <input type=\"input\" className=\"form-control\" id=\"withdrawal\" placeholder=\"Enter Withdrawal Amount\" value={withdrawal} onChange={e => {\n                setWithdrawal(e.currentTarget.value);\n                setWithdrawalComplete(false);\n                }} /> <br /> \n\n  <button type=\"submit\" className=\"btn btn-light\" onClick={makeWithdrawal} disabled={!formFilled}>Make Withdrawal</button> <br />\n  </form>\n        </>\n        }\n        \n        />\n    )};\n        </>\n     );\n }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}