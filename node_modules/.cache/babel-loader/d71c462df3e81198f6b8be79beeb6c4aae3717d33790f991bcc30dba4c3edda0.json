{"ast":null,"code":"const MongoClient = require('mongodb').MongoClient;\nconst url = 'mongodb://localhost:27017';\nlet db = null;\n\n//connect to Mongo\nMongoClient.connect(url).then(client => {\n  console.log('Connected to MongoDB!');\n  db = client.db('myproject');\n}).catch(err => {\n  console.error('failed to connect to MongoDB', err);\n});\n\n//create user account\n\nasync function create(name, email, password) {\n  if (!db) {\n    throw new Error('database connection not successful');\n  }\n  const collection = db.collection('users');\n  const doc = {\n    name,\n    email,\n    password,\n    balance: 0\n  };\n  try {\n    const result = await collection.insertOne(doc);\n    return result;\n  } catch (err) {\n    console.error('error inserting doc', err);\n    throw err;\n  }\n}\nasync function all() {\n  if (!db) {\n    throw new Error('database connection not successful');\n  }\n  try {\n    const docs = await db.collection('users').find().toArray();\n    return docs;\n  } catch (err) {\n    console.error('error retrieving docs', err);\n    throw err;\n  }\n}\nasync function balance(email) {\n  if (!db) {\n    throw new Error('database connection not successful');\n  }\n  try {\n    const docs = await db.collection('users').find({\n      \"email\": email\n    }).toArray();\n    console.log(docs);\n    return docs[0];\n  } catch (err) {\n    console.error('error retrieving docs', err);\n  }\n}\nasync function updateBalance(email, newamount) {\n  if (!db) {\n    throw new Error('database connection not successful');\n  }\n  try {\n    const result = await db.collection('users').updateOne({\n      email: email\n    }, {\n      $set: {\n        balance: newamount\n      }\n    });\n    return newamount;\n  } catch (err) {\n    console.error('Error updating balance:', err);\n    throw err;\n  }\n}\nasync function login(email, password) {\n  if (!db) {\n    throw new Error('database connection not successful');\n  }\n  try {\n    const docs = await db.collection('users').find({\n      \"email\": email\n    }).toArray();\n    return docs[0];\n  } catch (err) {\n    console.error('error retrieving docs', err);\n  }\n}\nmodule.exports = {\n  create,\n  all,\n  balance,\n  updateBalance,\n  login\n};","map":{"version":3,"names":["MongoClient","require","url","db","connect","then","client","console","log","catch","err","error","create","name","email","password","Error","collection","doc","balance","result","insertOne","all","docs","find","toArray","updateBalance","newamount","updateOne","$set","login","module","exports"],"sources":["/Users/Regan/Documents/GitHub/BadBank/dal.js"],"sourcesContent":["const MongoClient = require('mongodb').MongoClient;\nconst url          = 'mongodb://localhost:27017';\nlet db              = null;\n\n//connect to Mongo\nMongoClient.connect(url)\n  .then((client) => {\n    console.log('Connected to MongoDB!')\n\n     db = client.db('myproject');\n  })\n  .catch(err => {\n    console.error('failed to connect to MongoDB', err);\n  });\n\n  //create user account\n\n  async function create(name, email, password) {\n    if (!db) {\n        throw new Error('database connection not successful');\n    }\n    const collection = db.collection('users');\n    const doc = {name, email, password, balance: 0};\n    try {\n        const result = await collection.insertOne(doc);\n        return result;\n    } catch (err) {\n        console.error('error inserting doc', err);\n        throw err;\n    }\n  }\n\n  async function all() {\n    if (!db) {\n        throw new Error('database connection not successful');\n    }\n    try {\n        const docs = await db.collection('users').find().toArray();\n        return docs\n    } catch (err) {\n        console.error('error retrieving docs', err);\n        throw err;\n    }\n}\n\nasync function balance(email) {\n    if (!db) {\n        throw new Error('database connection not successful');\n    }\n    try {\n        const docs = await db.collection('users').find( {\"email\" : email}).toArray();\n        console.log(docs);\n        return docs[0];\n    } catch (err) {\n        console.error('error retrieving docs', err);\n    }\n}\n\nasync function updateBalance(email, newamount) {\n    if (!db) {\n        throw new Error('database connection not successful');\n    }\n    try {\n        const result = await db.collection('users').updateOne(\n            { email: email },\n            { $set: { balance: newamount } }\n        );\n        return newamount;\n    } catch (err) {\n        console.error('Error updating balance:', err);\n        throw err;\n    }\n}\n\nasync function login(email, password) {\n    if (!db) {\n        throw new Error('database connection not successful');\n    }\n    try {\n        const docs = await db.collection('users').find( {\"email\" : email}).toArray();\n        return docs[0];\n    } catch (err) {\n        console.error('error retrieving docs', err);\n        \n}\n}\n\n\n  module.exports = {create,all, balance, updateBalance, login}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}