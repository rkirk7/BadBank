{"ast":null,"code":"import React from \"react\";\nimport { CurrentUser, Card } from \"./context\";\nimport { useNavigate } from \"react-router-dom\";\nimport { overwriteMiddlewareResult } from \"mongoose\";\nexport default function CreateAccount() {\n  const navigate = useNavigate();\n  const [show, setShow] = React.useState(true);\n  const [status, setStatus] = React.useState('');\n  const [name, setName] = React.useState('');\n  const [email, setEmail] = React.useState('');\n  const [password, setPassword] = React.useState('');\n  const [role, setRole] = React.useState(false);\n  const [formFilled, setFormFilled] = React.useState(true);\n  const {\n    currentUser,\n    setCurrentUser\n  } = React.useContext(CurrentUser);\n  function validate(field, label) {\n    if (!field) {\n      setStatus('Error: ' + label);\n      setTimeout(() => setStatus(''), 3000);\n      return false;\n    }\n    return true;\n  }\n  async function handleCreate() {\n    let requestedRole = 'user';\n    if (!validate(name, 'name')) {\n      alert('Name is a required field.');\n      return;\n    }\n    if (!validate(email, 'email')) {\n      alert('email is a required field.');\n      return;\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\n      alert(\"Your email address is not formatted correctly.\");\n      return;\n    }\n    if (!validate(password, 'password')) {\n      alert('Password is a required field.');\n      return;\n    }\n    if (password.length < 8) {\n      alert('Your password must be at least eight characters.');\n      return;\n    }\n    if (role) {\n      requestedRole = 'requestedAdmin';\n      alert('You have requested administrative access to the website. For now, you will have user access until the bank administrator can review your request.');\n    }\n    const url = \"/account/createaccount/\";\n    try {\n      var res = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name,\n          email,\n          password,\n          requestedRole\n        })\n      });\n      const newUser = await res.json();\n      console.log(JSON.stringify(res));\n      if (newUser === true) {\n        alert(\"An account already exists for this email. Please log in.\");\n        return;\n      } else {\n        setCurrentUser({\n          email: email,\n          name: name,\n          balance: 0,\n          role: requestedRole\n        });\n        setShow(false);\n        alert(\"Account created! You are now logged in.\");\n        navigate(\"/\");\n      }\n    } catch (err) {\n      alert('Error: There was an error creating your account. Please try again.');\n      throw err;\n    }\n  }\n  React.useEffect(() => {\n    setFormFilled(name != '' && email != '' && password != '');\n  }, [name, email, password]);\n  return /*#__PURE__*/React.createElement(Card, {\n    bgcolor: \"primary\",\n    header: \"Create Account\",\n    status: status,\n    body: /*#__PURE__*/React.createElement(React.Fragment, null, \"Name\", /*#__PURE__*/React.createElement(\"br\", null), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"input\",\n      className: \"form-control\",\n      id: \"name\",\n      placeholder: \"Enter Name\",\n      value: name,\n      onChange: e => setName(e.currentTarget.value)\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", null), \"Email Address\", /*#__PURE__*/React.createElement(\"br\", null), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"input\",\n      className: \"form-control\",\n      id: \"email\",\n      placeholder: \"Enter Email Address\",\n      value: email,\n      onChange: e => setEmail(e.currentTarget.value)\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", null), \"Password (at least 8 characters)\", /*#__PURE__*/React.createElement(\"br\", null), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"password\",\n      className: \"form-control\",\n      id: \"password\",\n      placeholder: \"Enter Password\",\n      value: password,\n      onChange: e => setPassword(e.currentTarget.value)\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", null), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      className: \"form-check-input\",\n      id: \"checkbox\",\n      checked: role,\n      onChange: e => setRole(e.currentTarget.checked)\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"checkbox\",\n      className: \"form-check-label\"\n    }, \"Request administrative access\"), /*#__PURE__*/React.createElement(\"br\", null), /*#__PURE__*/React.createElement(\"br\", null), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"submit\",\n      type: \"submit\",\n      className: \"btn btn-light\",\n      onClick: handleCreate,\n      disabled: !formFilled\n    }, \"Create Account\"), \" \", /*#__PURE__*/React.createElement(\"br\", null))\n  });\n}","map":{"version":3,"names":["React","CurrentUser","Card","useNavigate","overwriteMiddlewareResult","CreateAccount","navigate","show","setShow","useState","status","setStatus","name","setName","email","setEmail","password","setPassword","role","setRole","formFilled","setFormFilled","currentUser","setCurrentUser","useContext","validate","field","label","setTimeout","handleCreate","requestedRole","alert","test","length","url","res","fetch","method","headers","body","JSON","stringify","newUser","json","console","log","balance","err","useEffect","createElement","bgcolor","header","Fragment","type","className","id","placeholder","value","onChange","e","currentTarget","checked","htmlFor","onClick","disabled"],"sources":["/Users/Regan/Documents/GitHub/BadBank/public/src/Components/createaccount.js"],"sourcesContent":["import React from \"react\";\nimport { CurrentUser, Card} from \"./context\";\nimport { useNavigate } from \"react-router-dom\";\nimport { overwriteMiddlewareResult } from \"mongoose\";\n\nexport default function CreateAccount(){\n\n    const navigate = useNavigate();\n    const [show, setShow] = React.useState(true);\n    const [status, setStatus] = React.useState('');\n    const [name, setName] = React.useState('');\n    const [email, setEmail] = React.useState('');\n    const [password, setPassword] = React.useState('');\n    const [role, setRole] = React.useState(false);\n    const [formFilled, setFormFilled] = React.useState(true);\n    const { currentUser, setCurrentUser } = React.useContext(CurrentUser);\n\n    function validate(field, label){\n        if (!field) {\n            setStatus('Error: ' + label);\n            setTimeout(() => setStatus(''), 3000); \n            return false;\n        }\n        return true;\n    }\n\n    async function handleCreate() {\n        let requestedRole = 'user';\n        if(!validate(name, 'name')) {\n            alert('Name is a required field.')\n            return;\n        }\n        if(!validate(email, 'email')) {\n            alert('email is a required field.')\n            return;\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\n                alert(\"Your email address is not formatted correctly.\")\n                return;\n        }\n        if(!validate(password, 'password')) {\n            alert('Password is a required field.')\n            return;\n        }\n        if(password.length<8) {\n            alert('Your password must be at least eight characters.')\n            return;\n        }\n        if (role) {\n            requestedRole = 'requestedAdmin';\n            alert('You have requested administrative access to the website. For now, you will have user access until the bank administrator can review your request.')\n        }\n\n             const url = `/account/createaccount/`;\n\n            try {\n                var res = await fetch(url, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({ name, email, password, requestedRole }),\n                }\n                );\n\n                const newUser = await res.json();\n                console.log(JSON.stringify(res));\n\n                if (newUser === true) {\n                    alert (\"An account already exists for this email. Please log in.\")\n                    return;\n                } else {\n\n            setCurrentUser({\n                email: email,\n                name: name,\n                balance: 0,\n                role: requestedRole\n              });\n              setShow(false);\n              alert(\"Account created! You are now logged in.\");\n              navigate(\"/\");\n            }\n    } catch (err) {\n        alert('Error: There was an error creating your account. Please try again.');\n        throw(err);\n    }\n}\n\n    React.useEffect(() =>{\n        setFormFilled(name != '' && email != '' && password != ''); \n    }, [name, email, password])\n\n    return (\n        <Card \n        bgcolor=\"primary\"\n        header=\"Create Account\"\n        status={status}\n        body={\n            <>\n            Name<br/>\n            <input type=\"input\" className=\"form-control\" id=\"name\" placeholder=\"Enter Name\" value={name} onChange={e => setName(e.currentTarget.value)} /> <br />\n            Email Address<br/>\n            <input type=\"input\" className=\"form-control\" id=\"email\" placeholder=\"Enter Email Address\" value={email} onChange={e => setEmail(e.currentTarget.value)} /> <br />\n            Password (at least 8 characters)<br/>\n            <input type=\"password\" className=\"form-control\" id=\"password\" placeholder=\"Enter Password\" value={password} onChange={e => setPassword(e.currentTarget.value)} /> <br />\n            <input type=\"checkbox\" className=\"form-check-input\" id=\"checkbox\" checked={role} onChange={e => setRole(e.currentTarget.checked)}/>\n        <label htmlFor=\"checkbox\" className=\"form-check-label\">\n          Request administrative access\n        </label><br /><br />\n            <button id=\"submit\" type=\"submit\" className=\"btn btn-light\" onClick={handleCreate} disabled={!formFilled}>Create Account</button> <br />\n        </>\n        }\n        />\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}