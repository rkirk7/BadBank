{"ast":null,"code":"import React from \"react\";\nimport { Card, CurrentUser } from \"./context\";\nimport { checkAuthentication, getBalance } from \"./loading\";\nimport { useNavigate } from \"react-router-dom\";\nexport default function Transfer() {\n  const {\n    currentUser,\n    setCurrentUser\n  } = React.useContext(CurrentUser);\n  const [transferAmount, setTransferAmount] = React.useState(0);\n  const [lastTransfer, setLastTransfer] = React.useState(0);\n  const [toEmail, setToEmail] = React.useState('');\n  const [fromBalance, setFromBalance] = React.useState(currentUser.balance);\n  const [toBalance, setToBalance] = React.useState(0);\n  const [formFilled, setFormFilled] = React.useState(true);\n  const [transferComplete, setTransferComplete] = React.useState(false);\n  const [loading, setLoading] = React.useState(true);\n  const navigate = useNavigate();\n  useEffect(() => {\n    async function loadPage() {\n      if (currentUser.email === '') {\n        await checkAuthentication(setCurrentUser, navigate);\n      } else {\n        await retrieveBalances();\n      }\n      setLoading(false);\n    }\n    loadPage();\n  }, []);\n  let receiveUserBalanceURL = '';\n  const currentUserBalanceURL = \"/account/balance/\".concat(currentUser.email);\n  if (toEmail) {\n    receiveUserBalanceURL = \"/account/balance/\".concat(toEmail);\n  }\n  async function retrieveBalances() {\n    var res = await fetch(currentUserBalanceURL);\n    var data = await res.json();\n    setFromBalance(data.balance);\n    if (toEmail) {\n      try {\n        var res2 = await fetch(receiveUserBalanceURL);\n        var data2 = await res2.json();\n        setToBalance(data2.balance);\n      } catch {\n        alert(\"Error: Could not find recipient's account. Please check their email and try again.\");\n        return;\n      }\n    }\n  }\n  async function makeTransfer() {\n    if (isNaN(Number(transferAmount))) {\n      alert('Your transfer must be a valid number.');\n      return;\n    }\n    if (Number(transferAmount) <= 0) {\n      alert('Your transfer cannot be a negative number.');\n      return;\n    }\n    if (Number(transferAmount) > Number(fromBalance)) {\n      alert('Your balance is too low. Please enter a lower amount.');\n      return;\n    }\n    if (!Number.isInteger(Number(transferAmount))) {\n      alert('Error: You must transfer dollars only, not cents. Please round up or down and try again.');\n      return;\n    }\n    if (toEmail === currentUser.email) {\n      alert(\"You cannot transfer money to yourself. Please enter a valid recipient.\");\n      return;\n    }\n    if (toEmail === '') {\n      alert('You must enter a valid email address for the recipient. Please try again.');\n      return;\n    }\n    receiveUserBalanceURL = \"/account/balance/\".concat(toEmail);\n    async function getRecipientBalance() {\n      try {\n        var res2 = await fetch(receiveUserBalanceURL);\n        var data2 = await res2.json();\n        if (!data2) {\n          alert(\"Error: Could not find recipient's account. Please check their email and try again.\");\n          return;\n        }\n        let newFromBalance = parseInt(fromBalance) - parseInt(transferAmount);\n        let newToBalance = parseInt(data2.balance) + parseInt(transferAmount);\n        setFromBalance(newFromBalance);\n        setToBalance(newToBalance);\n        const url = \"/account/transfer/\".concat(currentUser.email, \"/\").concat(toEmail, \"/\").concat(transferAmount, \"/\").concat(newFromBalance, \"/\").concat(newToBalance);\n        (async () => {\n          console.log('fetching url:', url);\n          let result = await fetch(url);\n          setCurrentUser(user => ({\n            ...user,\n            balance: fromBalance\n          }));\n          setLastTransfer(transferAmount);\n          setTransferAmount(0);\n          setToEmail('');\n          setTransferComplete(true);\n        })();\n      } catch {\n        alert(\"Error: Could not find recipient's account. Please check their email and try again.\");\n        return;\n      }\n    }\n    await getRecipientBalance();\n  }\n  React.useEffect(() => {\n    setFormFilled(transferAmount != '0' && transferAmount != '' && toEmail != null && toEmail != '');\n  }, [transferAmount, toEmail]);\n  return /*#__PURE__*/React.createElement(Card, {\n    bgcolor: \"primary\",\n    txtcolor: \"white\",\n    header: \"Make a Transfer\",\n    text: \"\".concat(currentUser.name, \", your balance is $\").concat(fromBalance, \".\"),\n    title: transferComplete && \"You have successfully transferred $\".concat(lastTransfer, \"!\"),\n    body: /*#__PURE__*/React.createElement(React.Fragment, null, \"Transfer Amount\", /*#__PURE__*/React.createElement(\"br\", null), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"input\",\n      className: \"form-control\",\n      id: \"transfer\",\n      placeholder: \"Enter Transfer Amount\",\n      value: transferAmount,\n      onChange: e => {\n        setTransferAmount(e.currentTarget.value);\n        setTransferComplete(false);\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", null), \"Transfer To\", /*#__PURE__*/React.createElement(\"br\", null), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"input\",\n      className: \"form-control\",\n      id: \"recipient\",\n      placeholder: \"Enter Email\",\n      value: toEmail,\n      onChange: e => {\n        setToEmail(e.currentTarget.value);\n        setTransferComplete(false);\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", null)),\n    centered: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-light\",\n      onClick: makeTransfer,\n      disabled: !formFilled\n    }, \"Make Transfer\"), \" \", /*#__PURE__*/React.createElement(\"br\", null))\n  });\n}","map":{"version":3,"names":["React","Card","CurrentUser","checkAuthentication","getBalance","useNavigate","Transfer","currentUser","setCurrentUser","useContext","transferAmount","setTransferAmount","useState","lastTransfer","setLastTransfer","toEmail","setToEmail","fromBalance","setFromBalance","balance","toBalance","setToBalance","formFilled","setFormFilled","transferComplete","setTransferComplete","loading","setLoading","navigate","useEffect","loadPage","email","retrieveBalances","receiveUserBalanceURL","currentUserBalanceURL","concat","res","fetch","data","json","res2","data2","alert","makeTransfer","isNaN","Number","isInteger","getRecipientBalance","newFromBalance","parseInt","newToBalance","url","console","log","result","user","createElement","bgcolor","txtcolor","header","text","name","title","body","Fragment","type","className","id","placeholder","value","onChange","e","currentTarget","centered","onClick","disabled"],"sources":["/Users/Regan/Documents/GitHub/BadBank/public/src/Components/transfer.js"],"sourcesContent":["import React from \"react\";\nimport { Card, CurrentUser } from \"./context\";\nimport {checkAuthentication, getBalance} from \"./loading\"\nimport { useNavigate } from \"react-router-dom\";\n\n\nexport default function Transfer(){\n    const { currentUser, setCurrentUser } = React.useContext(CurrentUser);\n    const [transferAmount, setTransferAmount] = React.useState(0);\n    const [lastTransfer, setLastTransfer] = React.useState(0);\n    const [toEmail, setToEmail] = React.useState('');\n    const [fromBalance, setFromBalance] = React.useState(currentUser.balance);\n    const [toBalance, setToBalance] = React.useState(0);\n    const [formFilled, setFormFilled] = React.useState(true);\n    const [transferComplete, setTransferComplete] = React.useState(false);\n    const [loading, setLoading] = React.useState(true);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        async function loadPage() {\n            if (currentUser.email === '') {\n                await checkAuthentication(setCurrentUser, navigate);\n            } \n            else {\n                await retrieveBalances();\n            }\n            setLoading(false);\n        }\n        loadPage();\n    }, []);\n    \n      let receiveUserBalanceURL = '';\n      const currentUserBalanceURL = `/account/balance/${currentUser.email}`;\n      if (toEmail) {\n       receiveUserBalanceURL = `/account/balance/${toEmail}`;\n      }\n\n      async function retrieveBalances() {\n        var res = await fetch(currentUserBalanceURL);\n        var data = await res.json();\n        setFromBalance(data.balance);\n        if (toEmail) {\n        try {\n        var res2 = await fetch(receiveUserBalanceURL);\n        var data2 = await res2.json();\n        setToBalance(data2.balance);\n        } catch {\n            alert(\"Error: Could not find recipient's account. Please check their email and try again.\")\n            return;\n        }\n    }\n     }\n\n    async function makeTransfer() {\n           if (isNaN(Number(transferAmount))) {\n            alert('Your transfer must be a valid number.'); \n            return;\n        }\n        if ((Number(transferAmount)) <= 0) {\n            alert('Your transfer cannot be a negative number.'); \n            return;\n        }\n\n        if (Number(transferAmount) > Number(fromBalance)) {\n            alert('Your balance is too low. Please enter a lower amount.'); \n            return;\n        }\n        if (!Number.isInteger(Number(transferAmount))) {\n            alert('Error: You must transfer dollars only, not cents. Please round up or down and try again.'); \n            return;\n        }\n        if (toEmail === currentUser.email){\n            alert(\"You cannot transfer money to yourself. Please enter a valid recipient.\")\n            return;\n        }\n\n        if (toEmail === '') {\n            alert('You must enter a valid email address for the recipient. Please try again.'); \n            return;\n           }\n\n           receiveUserBalanceURL = `/account/balance/${toEmail}`;\n\n           async function getRecipientBalance() {\n            try {\n            var res2 = await fetch(receiveUserBalanceURL);\n            var data2 = await res2.json();\n            if (!data2) {\n                alert(\"Error: Could not find recipient's account. Please check their email and try again.\")\n                return;\n            }\n            let newFromBalance = parseInt(fromBalance) - parseInt(transferAmount);\n            let newToBalance = parseInt(data2.balance) + parseInt(transferAmount);\n           setFromBalance(newFromBalance);\n           setToBalance(newToBalance);\n    \n            const url = `/account/transfer/${currentUser.email}/${toEmail}/${transferAmount}/${newFromBalance}/${newToBalance}`;\n\n        (async () => {\n            console.log('fetching url:', url);\n           let result = await fetch(url);\n           \n           setCurrentUser(user => ({\n            ...user,\n            balance: fromBalance\n          })); \n            setLastTransfer(transferAmount);\n            setTransferAmount(0);\n            setToEmail('');\n            setTransferComplete(true);\n        })();\n            } catch {\n                alert(\"Error: Could not find recipient's account. Please check their email and try again.\")\n            return;\n            }\n        }\n\n        await getRecipientBalance();\n    }\n    \n\n    React.useEffect(() =>{\n        setFormFilled(transferAmount != '0' && transferAmount != '' && toEmail != null && toEmail != ''); \n    }, [transferAmount, toEmail])\n\n\n    return (\n        <Card \n        bgcolor=\"primary\"\n        txtcolor=\"white\"\n        header=\"Make a Transfer\"\n        text={`${currentUser.name}, your balance is $${fromBalance}.`}       \n        title={transferComplete && `You have successfully transferred $${lastTransfer}!`}       \n        body={\n            <>\n            Transfer Amount<br/>\n            <input type=\"input\" className=\"form-control\" id=\"transfer\" placeholder=\"Enter Transfer Amount\" value={transferAmount} onChange={e => {\n                setTransferAmount(e.currentTarget.value);\n                setTransferComplete(false);\n                }} /> <br /> \n            Transfer To<br/>\n            <input type=\"input\" className=\"form-control\" id=\"recipient\" placeholder=\"Enter Email\" value={toEmail} onChange={e => {\n                setToEmail(e.currentTarget.value);\n                setTransferComplete(false);\n                }} /> <br />     \n        </>\n        }\n        centered={\n    <>\n            <button type=\"submit\" className=\"btn btn-light\" onClick={makeTransfer} disabled={!formFilled}>Make Transfer</button> <br />\n    </>\n        }\n        />\n     );\n }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}