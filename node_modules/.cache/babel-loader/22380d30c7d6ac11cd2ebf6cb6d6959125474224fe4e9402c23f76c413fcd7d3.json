{"ast":null,"code":"\"use strict\";\n\nvar _a;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindCursor = exports.FLAGS = void 0;\nconst responses_1 = require(\"../cmap/wire_protocol/responses\");\nconst error_1 = require(\"../error\");\nconst count_1 = require(\"../operations/count\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst find_1 = require(\"../operations/find\");\nconst sort_1 = require(\"../sort\");\nconst utils_1 = require(\"../utils\");\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @internal */\nconst kFilter = Symbol('filter');\n/** @internal */\nconst kNumReturned = Symbol('numReturned');\n/** @internal */\nconst kBuiltOptions = Symbol('builtOptions');\n/** @public Flags allowed for cursor */\nexports.FLAGS = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'exhaust', 'partial'];\n/** @public */\nclass FindCursor extends abstract_cursor_1.AbstractCursor {\n  /** @internal */\n  constructor(client, namespace) {\n    let filter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super(client, namespace, options);\n    /** @internal */\n    this[_a] = 0;\n    this[kFilter] = filter;\n    this[kBuiltOptions] = options;\n    if (options.sort != null) {\n      this[kBuiltOptions].sort = (0, sort_1.formatSort)(options.sort);\n    }\n  }\n  clone() {\n    const clonedOptions = (0, utils_1.mergeOptions)({}, this[kBuiltOptions]);\n    delete clonedOptions.session;\n    return new FindCursor(this.client, this.namespace, this[kFilter], {\n      ...clonedOptions\n    });\n  }\n  map(transform) {\n    return super.map(transform);\n  }\n  /** @internal */\n  async _initialize(session) {\n    const findOperation = new find_1.FindOperation(this.namespace, this[kFilter], {\n      ...this[kBuiltOptions],\n      ...this.cursorOptions,\n      session\n    });\n    const response = await (0, execute_operation_1.executeOperation)(this.client, findOperation);\n    // the response is not a cursor when `explain` is enabled\n    if (responses_1.CursorResponse.is(response)) {\n      this[kNumReturned] = response.batchSize;\n    } else {\n      var _response$cursor$firs, _response$cursor;\n      // Can be an explain response, hence the ?. on everything\n      this[kNumReturned] = this[kNumReturned] + ((_response$cursor$firs = response === null || response === void 0 || (_response$cursor = response.cursor) === null || _response$cursor === void 0 || (_response$cursor = _response$cursor.firstBatch) === null || _response$cursor === void 0 ? void 0 : _response$cursor.length) !== null && _response$cursor$firs !== void 0 ? _response$cursor$firs : 0);\n    }\n    // TODO: NODE-2882\n    return {\n      server: findOperation.server,\n      session,\n      response\n    };\n  }\n  /** @internal */\n  async getMore(batchSize) {\n    const numReturned = this[kNumReturned];\n    if (numReturned) {\n      // TODO(DRIVERS-1448): Remove logic to enforce `limit` in the driver\n      const limit = this[kBuiltOptions].limit;\n      batchSize = limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n      if (batchSize <= 0) {\n        try {\n          await this.close();\n        } catch (error) {\n          (0, utils_1.squashError)(error);\n          // this is an optimization for the special case of a limit for a find command to avoid an\n          // extra getMore when the limit has been reached and the limit is a multiple of the batchSize.\n          // This is a consequence of the new query engine in 5.0 having no knowledge of the limit as it\n          // produces results for the find command.  Once a batch is filled up, it is returned and only\n          // on the subsequent getMore will the query framework consider the limit, determine the cursor\n          // is exhausted and return a cursorId of zero.\n          // instead, if we determine there are no more documents to request from the server, we preemptively\n          // close the cursor\n        }\n        return responses_1.CursorResponse.emptyGetMore;\n      }\n    }\n    const response = await super.getMore(batchSize, false);\n    // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n    if (responses_1.CursorResponse.is(response)) {\n      this[kNumReturned] = this[kNumReturned] + response.batchSize;\n    } else {\n      var _response$cursor$next, _response$cursor2;\n      this[kNumReturned] = this[kNumReturned] + ((_response$cursor$next = response === null || response === void 0 || (_response$cursor2 = response.cursor) === null || _response$cursor2 === void 0 || (_response$cursor2 = _response$cursor2.nextBatch) === null || _response$cursor2 === void 0 ? void 0 : _response$cursor2.length) !== null && _response$cursor$next !== void 0 ? _response$cursor$next : 0);\n    }\n    return response;\n  }\n  /**\n   * Get the count of documents for this cursor\n   * @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead\n   */\n  async count(options) {\n    (0, utils_1.emitWarningOnce)('cursor.count is deprecated and will be removed in the next major version, please use `collection.estimatedDocumentCount` or `collection.countDocuments` instead ');\n    if (typeof options === 'boolean') {\n      throw new error_1.MongoInvalidArgumentError('Invalid first parameter to count');\n    }\n    return await (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.namespace, this[kFilter], {\n      ...this[kBuiltOptions],\n      ...this.cursorOptions,\n      ...options\n    }));\n  }\n  /** Execute the explain for the cursor */\n  async explain(verbosity) {\n    return await (0, execute_operation_1.executeOperation)(this.client, new find_1.FindOperation(this.namespace, this[kFilter], {\n      ...this[kBuiltOptions],\n      ...this.cursorOptions,\n      explain: verbosity !== null && verbosity !== void 0 ? verbosity : true\n    }));\n  }\n  /** Set the cursor query */\n  filter(filter) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kFilter] = filter;\n    return this;\n  }\n  /**\n   * Set the cursor hint\n   *\n   * @param hint - If specified, then the query system will only consider plans using the hinted index.\n   */\n  hint(hint) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].hint = hint;\n    return this;\n  }\n  /**\n   * Set the cursor min\n   *\n   * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n   */\n  min(min) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].min = min;\n    return this;\n  }\n  /**\n   * Set the cursor max\n   *\n   * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n   */\n  max(max) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].max = max;\n    return this;\n  }\n  /**\n   * Set the cursor returnKey.\n   * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n   * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n   *\n   * @param value - the returnKey value.\n   */\n  returnKey(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].returnKey = value;\n    return this;\n  }\n  /**\n   * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n   *\n   * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n   */\n  showRecordId(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].showRecordId = value;\n    return this;\n  }\n  /**\n   * Add a query modifier to the cursor query\n   *\n   * @param name - The query modifier (must start with $, such as $orderby etc)\n   * @param value - The modifier value.\n   */\n  addQueryModifier(name, value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    if (name[0] !== '$') {\n      throw new error_1.MongoInvalidArgumentError(\"\".concat(name, \" is not a valid query modifier\"));\n    }\n    // Strip of the $\n    const field = name.substr(1);\n    // NOTE: consider some TS magic for this\n    switch (field) {\n      case 'comment':\n        this[kBuiltOptions].comment = value;\n        break;\n      case 'explain':\n        this[kBuiltOptions].explain = value;\n        break;\n      case 'hint':\n        this[kBuiltOptions].hint = value;\n        break;\n      case 'max':\n        this[kBuiltOptions].max = value;\n        break;\n      case 'maxTimeMS':\n        this[kBuiltOptions].maxTimeMS = value;\n        break;\n      case 'min':\n        this[kBuiltOptions].min = value;\n        break;\n      case 'orderby':\n        this[kBuiltOptions].sort = (0, sort_1.formatSort)(value);\n        break;\n      case 'query':\n        this[kFilter] = value;\n        break;\n      case 'returnKey':\n        this[kBuiltOptions].returnKey = value;\n        break;\n      case 'showDiskLoc':\n        this[kBuiltOptions].showRecordId = value;\n        break;\n      default:\n        throw new error_1.MongoInvalidArgumentError(\"Invalid query modifier: \".concat(name));\n    }\n    return this;\n  }\n  /**\n   * Add a comment to the cursor query allowing for tracking the comment in the log.\n   *\n   * @param value - The comment attached to this query.\n   */\n  comment(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].comment = value;\n    return this;\n  }\n  /**\n   * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n   *\n   * @param value - Number of milliseconds to wait before aborting the tailed query.\n   */\n  maxAwaitTimeMS(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n    }\n    this[kBuiltOptions].maxAwaitTimeMS = value;\n    return this;\n  }\n  /**\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n   *\n   * @param value - Number of milliseconds to wait before aborting the query.\n   */\n  maxTimeMS(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n    }\n    this[kBuiltOptions].maxTimeMS = value;\n    return this;\n  }\n  /**\n   * Add a project stage to the aggregation pipeline\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * By default chaining a projection to your cursor changes the returned type to the generic\n   * {@link Document} type.\n   * You should specify a parameterized type to have assertions on your final results.\n   *\n   * @example\n   * ```typescript\n   * // Best way\n   * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * // Flexible way\n   * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n   * ```\n   *\n   * @remarks\n   *\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling project,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n   * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n   *\n   * // or always use chaining and save the final cursor\n   *\n   * const cursor = coll.find().project<{ a: string }>({\n   *   _id: 0,\n   *   a: { $convert: { input: '$a', to: 'string' }\n   * }});\n   * ```\n   */\n  project(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].projection = value;\n    return this;\n  }\n  /**\n   * Sets the sort order of the cursor query.\n   *\n   * @param sort - The key or keys set for the sort.\n   * @param direction - The direction of the sorting (1 or -1).\n   */\n  sort(sort, direction) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support sorting');\n    }\n    this[kBuiltOptions].sort = (0, sort_1.formatSort)(sort, direction);\n    return this;\n  }\n  /**\n   * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n   *\n   * @remarks\n   * {@link https://www.mongodb.com/docs/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n   */\n  allowDiskUse() {\n    let allow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    if (!this[kBuiltOptions].sort) {\n      throw new error_1.MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n    }\n    // As of 6.0 the default is true. This allows users to get back to the old behavior.\n    if (!allow) {\n      this[kBuiltOptions].allowDiskUse = false;\n      return this;\n    }\n    this[kBuiltOptions].allowDiskUse = true;\n    return this;\n  }\n  /**\n   * Set the collation options for the cursor.\n   *\n   * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n   */\n  collation(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].collation = value;\n    return this;\n  }\n  /**\n   * Set the limit for the cursor.\n   *\n   * @param value - The limit for the cursor query.\n   */\n  limit(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support limit');\n    }\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n    }\n    this[kBuiltOptions].limit = value;\n    return this;\n  }\n  /**\n   * Set the skip for the cursor.\n   *\n   * @param value - The skip for the cursor query.\n   */\n  skip(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support skip');\n    }\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n    }\n    this[kBuiltOptions].skip = value;\n    return this;\n  }\n}\nexports.FindCursor = FindCursor;\n_a = kNumReturned;","map":{"version":3,"names":["responses_1","require","error_1","count_1","execute_operation_1","find_1","sort_1","utils_1","abstract_cursor_1","kFilter","Symbol","kNumReturned","kBuiltOptions","exports","FLAGS","FindCursor","AbstractCursor","constructor","client","namespace","filter","arguments","length","undefined","options","_a","sort","formatSort","clone","clonedOptions","mergeOptions","session","map","transform","_initialize","findOperation","FindOperation","cursorOptions","response","executeOperation","CursorResponse","is","batchSize","_response$cursor$firs","_response$cursor","cursor","firstBatch","server","getMore","numReturned","limit","close","error","squashError","emptyGetMore","_response$cursor$next","_response$cursor2","nextBatch","count","emitWarningOnce","MongoInvalidArgumentError","CountOperation","explain","verbosity","assertUninitialized","hint","min","max","returnKey","value","showRecordId","addQueryModifier","name","concat","field","substr","comment","maxTimeMS","maxAwaitTimeMS","project","projection","direction","tailable","MongoTailableCursorError","allowDiskUse","allow","collation","skip"],"sources":["/Users/Regan/Documents/GitHub/BadBank/node_modules/mongodb/src/cursor/find_cursor.ts"],"sourcesContent":["import { type Document } from '../bson';\nimport { CursorResponse } from '../cmap/wire_protocol/responses';\nimport { MongoInvalidArgumentError, MongoTailableCursorError } from '../error';\nimport { type ExplainVerbosityLike } from '../explain';\nimport type { MongoClient } from '../mongo_client';\nimport type { CollationOptions } from '../operations/command';\nimport { CountOperation, type CountOptions } from '../operations/count';\nimport { executeOperation, type ExecutionResult } from '../operations/execute_operation';\nimport { FindOperation, type FindOptions } from '../operations/find';\nimport type { Hint } from '../operations/operation';\nimport type { ClientSession } from '../sessions';\nimport { formatSort, type Sort, type SortDirection } from '../sort';\nimport { emitWarningOnce, mergeOptions, type MongoDBNamespace, squashError } from '../utils';\nimport { AbstractCursor, assertUninitialized } from './abstract_cursor';\n\n/** @internal */\nconst kFilter = Symbol('filter');\n/** @internal */\nconst kNumReturned = Symbol('numReturned');\n/** @internal */\nconst kBuiltOptions = Symbol('builtOptions');\n\n/** @public Flags allowed for cursor */\nexport const FLAGS = [\n  'tailable',\n  'oplogReplay',\n  'noCursorTimeout',\n  'awaitData',\n  'exhaust',\n  'partial'\n] as const;\n\n/** @public */\nexport class FindCursor<TSchema = any> extends AbstractCursor<TSchema> {\n  /** @internal */\n  [kFilter]: Document;\n  /** @internal */\n  [kNumReturned] = 0;\n  /** @internal */\n  [kBuiltOptions]: FindOptions;\n\n  /** @internal */\n  constructor(\n    client: MongoClient,\n    namespace: MongoDBNamespace,\n    filter: Document = {},\n    options: FindOptions = {}\n  ) {\n    super(client, namespace, options);\n\n    this[kFilter] = filter;\n    this[kBuiltOptions] = options;\n\n    if (options.sort != null) {\n      this[kBuiltOptions].sort = formatSort(options.sort);\n    }\n  }\n\n  clone(): FindCursor<TSchema> {\n    const clonedOptions = mergeOptions({}, this[kBuiltOptions]);\n    delete clonedOptions.session;\n    return new FindCursor(this.client, this.namespace, this[kFilter], {\n      ...clonedOptions\n    });\n  }\n\n  override map<T>(transform: (doc: TSchema) => T): FindCursor<T> {\n    return super.map(transform) as FindCursor<T>;\n  }\n\n  /** @internal */\n  async _initialize(session: ClientSession): Promise<ExecutionResult> {\n    const findOperation = new FindOperation(this.namespace, this[kFilter], {\n      ...this[kBuiltOptions], // NOTE: order matters here, we may need to refine this\n      ...this.cursorOptions,\n      session\n    });\n\n    const response = await executeOperation(this.client, findOperation);\n\n    // the response is not a cursor when `explain` is enabled\n    if (CursorResponse.is(response)) {\n      this[kNumReturned] = response.batchSize;\n    } else {\n      // Can be an explain response, hence the ?. on everything\n      this[kNumReturned] = this[kNumReturned] + (response?.cursor?.firstBatch?.length ?? 0);\n    }\n\n    // TODO: NODE-2882\n    return { server: findOperation.server, session, response };\n  }\n\n  /** @internal */\n  override async getMore(batchSize: number): Promise<Document | null> {\n    const numReturned = this[kNumReturned];\n    if (numReturned) {\n      // TODO(DRIVERS-1448): Remove logic to enforce `limit` in the driver\n      const limit = this[kBuiltOptions].limit;\n      batchSize =\n        limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n\n      if (batchSize <= 0) {\n        try {\n          await this.close();\n        } catch (error) {\n          squashError(error);\n          // this is an optimization for the special case of a limit for a find command to avoid an\n          // extra getMore when the limit has been reached and the limit is a multiple of the batchSize.\n          // This is a consequence of the new query engine in 5.0 having no knowledge of the limit as it\n          // produces results for the find command.  Once a batch is filled up, it is returned and only\n          // on the subsequent getMore will the query framework consider the limit, determine the cursor\n          // is exhausted and return a cursorId of zero.\n          // instead, if we determine there are no more documents to request from the server, we preemptively\n          // close the cursor\n        }\n        return CursorResponse.emptyGetMore;\n      }\n    }\n\n    const response = await super.getMore(batchSize, false);\n    // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n    if (CursorResponse.is(response)) {\n      this[kNumReturned] = this[kNumReturned] + response.batchSize;\n    } else {\n      this[kNumReturned] = this[kNumReturned] + (response?.cursor?.nextBatch?.length ?? 0);\n    }\n\n    return response;\n  }\n\n  /**\n   * Get the count of documents for this cursor\n   * @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead\n   */\n  async count(options?: CountOptions): Promise<number> {\n    emitWarningOnce(\n      'cursor.count is deprecated and will be removed in the next major version, please use `collection.estimatedDocumentCount` or `collection.countDocuments` instead '\n    );\n    if (typeof options === 'boolean') {\n      throw new MongoInvalidArgumentError('Invalid first parameter to count');\n    }\n    return await executeOperation(\n      this.client,\n      new CountOperation(this.namespace, this[kFilter], {\n        ...this[kBuiltOptions], // NOTE: order matters here, we may need to refine this\n        ...this.cursorOptions,\n        ...options\n      })\n    );\n  }\n\n  /** Execute the explain for the cursor */\n  async explain(verbosity?: ExplainVerbosityLike): Promise<Document> {\n    return await executeOperation(\n      this.client,\n      new FindOperation(this.namespace, this[kFilter], {\n        ...this[kBuiltOptions], // NOTE: order matters here, we may need to refine this\n        ...this.cursorOptions,\n        explain: verbosity ?? true\n      })\n    );\n  }\n\n  /** Set the cursor query */\n  filter(filter: Document): this {\n    assertUninitialized(this);\n    this[kFilter] = filter;\n    return this;\n  }\n\n  /**\n   * Set the cursor hint\n   *\n   * @param hint - If specified, then the query system will only consider plans using the hinted index.\n   */\n  hint(hint: Hint): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].hint = hint;\n    return this;\n  }\n\n  /**\n   * Set the cursor min\n   *\n   * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n   */\n  min(min: Document): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].min = min;\n    return this;\n  }\n\n  /**\n   * Set the cursor max\n   *\n   * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n   */\n  max(max: Document): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].max = max;\n    return this;\n  }\n\n  /**\n   * Set the cursor returnKey.\n   * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n   * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n   *\n   * @param value - the returnKey value.\n   */\n  returnKey(value: boolean): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].returnKey = value;\n    return this;\n  }\n\n  /**\n   * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n   *\n   * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n   */\n  showRecordId(value: boolean): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].showRecordId = value;\n    return this;\n  }\n\n  /**\n   * Add a query modifier to the cursor query\n   *\n   * @param name - The query modifier (must start with $, such as $orderby etc)\n   * @param value - The modifier value.\n   */\n  addQueryModifier(name: string, value: string | boolean | number | Document): this {\n    assertUninitialized(this);\n    if (name[0] !== '$') {\n      throw new MongoInvalidArgumentError(`${name} is not a valid query modifier`);\n    }\n\n    // Strip of the $\n    const field = name.substr(1);\n\n    // NOTE: consider some TS magic for this\n    switch (field) {\n      case 'comment':\n        this[kBuiltOptions].comment = value as string | Document;\n        break;\n\n      case 'explain':\n        this[kBuiltOptions].explain = value as boolean;\n        break;\n\n      case 'hint':\n        this[kBuiltOptions].hint = value as string | Document;\n        break;\n\n      case 'max':\n        this[kBuiltOptions].max = value as Document;\n        break;\n\n      case 'maxTimeMS':\n        this[kBuiltOptions].maxTimeMS = value as number;\n        break;\n\n      case 'min':\n        this[kBuiltOptions].min = value as Document;\n        break;\n\n      case 'orderby':\n        this[kBuiltOptions].sort = formatSort(value as string | Document);\n        break;\n\n      case 'query':\n        this[kFilter] = value as Document;\n        break;\n\n      case 'returnKey':\n        this[kBuiltOptions].returnKey = value as boolean;\n        break;\n\n      case 'showDiskLoc':\n        this[kBuiltOptions].showRecordId = value as boolean;\n        break;\n\n      default:\n        throw new MongoInvalidArgumentError(`Invalid query modifier: ${name}`);\n    }\n\n    return this;\n  }\n\n  /**\n   * Add a comment to the cursor query allowing for tracking the comment in the log.\n   *\n   * @param value - The comment attached to this query.\n   */\n  comment(value: string): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].comment = value;\n    return this;\n  }\n\n  /**\n   * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n   *\n   * @param value - Number of milliseconds to wait before aborting the tailed query.\n   */\n  maxAwaitTimeMS(value: number): this {\n    assertUninitialized(this);\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n    }\n\n    this[kBuiltOptions].maxAwaitTimeMS = value;\n    return this;\n  }\n\n  /**\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n   *\n   * @param value - Number of milliseconds to wait before aborting the query.\n   */\n  override maxTimeMS(value: number): this {\n    assertUninitialized(this);\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n    }\n\n    this[kBuiltOptions].maxTimeMS = value;\n    return this;\n  }\n\n  /**\n   * Add a project stage to the aggregation pipeline\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * By default chaining a projection to your cursor changes the returned type to the generic\n   * {@link Document} type.\n   * You should specify a parameterized type to have assertions on your final results.\n   *\n   * @example\n   * ```typescript\n   * // Best way\n   * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * // Flexible way\n   * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n   * ```\n   *\n   * @remarks\n   *\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling project,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n   * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n   *\n   * // or always use chaining and save the final cursor\n   *\n   * const cursor = coll.find().project<{ a: string }>({\n   *   _id: 0,\n   *   a: { $convert: { input: '$a', to: 'string' }\n   * }});\n   * ```\n   */\n  project<T extends Document = Document>(value: Document): FindCursor<T> {\n    assertUninitialized(this);\n    this[kBuiltOptions].projection = value;\n    return this as unknown as FindCursor<T>;\n  }\n\n  /**\n   * Sets the sort order of the cursor query.\n   *\n   * @param sort - The key or keys set for the sort.\n   * @param direction - The direction of the sorting (1 or -1).\n   */\n  sort(sort: Sort | string, direction?: SortDirection): this {\n    assertUninitialized(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new MongoTailableCursorError('Tailable cursor does not support sorting');\n    }\n\n    this[kBuiltOptions].sort = formatSort(sort, direction);\n    return this;\n  }\n\n  /**\n   * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n   *\n   * @remarks\n   * {@link https://www.mongodb.com/docs/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n   */\n  allowDiskUse(allow = true): this {\n    assertUninitialized(this);\n\n    if (!this[kBuiltOptions].sort) {\n      throw new MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n    }\n\n    // As of 6.0 the default is true. This allows users to get back to the old behavior.\n    if (!allow) {\n      this[kBuiltOptions].allowDiskUse = false;\n      return this;\n    }\n\n    this[kBuiltOptions].allowDiskUse = true;\n    return this;\n  }\n\n  /**\n   * Set the collation options for the cursor.\n   *\n   * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n   */\n  collation(value: CollationOptions): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].collation = value;\n    return this;\n  }\n\n  /**\n   * Set the limit for the cursor.\n   *\n   * @param value - The limit for the cursor query.\n   */\n  limit(value: number): this {\n    assertUninitialized(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new MongoTailableCursorError('Tailable cursor does not support limit');\n    }\n\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n    }\n\n    this[kBuiltOptions].limit = value;\n    return this;\n  }\n\n  /**\n   * Set the skip for the cursor.\n   *\n   * @param value - The skip for the cursor query.\n   */\n  skip(value: number): this {\n    assertUninitialized(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new MongoTailableCursorError('Tailable cursor does not support skip');\n    }\n\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n    }\n\n    this[kBuiltOptions].skip = value;\n    return this;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}