{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport { Card, CurrentUser } from \"./context\";\nimport { useNavigate } from \"react-router-dom\";\nimport { checkAuthentication, getBalance } from \"./loading\";\nexport default function Deposit() {\n  const {\n    currentUser,\n    setCurrentUser\n  } = React.useContext(CurrentUser);\n  const [deposit, setDeposit] = React.useState(0);\n  const [lastDeposit, setLastDeposit] = React.useState(0);\n  const [balance, setBalance] = React.useState(currentUser.balance);\n  const [formFilled, setFormFilled] = React.useState(true);\n  const [depositComplete, setDepositComplete] = React.useState(false);\n  const [loading, setLoading] = React.useState(true);\n  const navigate = useNavigate();\n  useEffect(() => {\n    async function loadPage() {\n      if (currentUser.email === '' || !currentUser) {\n        await checkAuthentication(setCurrentUser, navigate);\n      } else {\n        await getBalance(setCurrentUser, currentUser.email);\n      }\n      setLoading(false);\n    }\n    loadPage();\n  }, []);\n  function makeDeposit(e) {\n    e.preventDefault();\n    if (isNaN(Number(deposit))) {\n      alert('Your deposit must be a valid number.');\n      return;\n    }\n    if (Number(deposit) <= 0) {\n      alert('Your deposit cannot be a negative number.');\n      return;\n    }\n    if (!Number.isInteger(Number(deposit))) {\n      alert('Error: You must deposit dollars only, not cents. Please round up or down and try again.');\n      return;\n    }\n    let newBalance = parseInt(deposit) + parseInt(balance);\n    const url = \"/account/updateBalance/\".concat(currentUser.email, \"/\").concat(newBalance, \"/deposit/\").concat(parseInt(deposit));\n    (async () => {\n      var res = await fetch(url);\n      setBalance(newBalance);\n      setCurrentUser(user => ({\n        ...user,\n        balance: newBalance\n      }));\n      setLastDeposit(deposit);\n      setDeposit(0);\n      setDepositComplete(true);\n    })();\n  }\n  React.useEffect(() => {\n    setFormFilled(deposit != '0' && deposit != '');\n  }, [deposit]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, !loading && /*#__PURE__*/React.createElement(Card, {\n    bgcolor: \"primary\",\n    txtcolor: \"white\",\n    header: \"Make a Deposit\",\n    text: \"\".concat(currentUser.name, \", your balance is $\").concat(currentUser.balance, \".\"),\n    title: depositComplete && \"You have successfully deposited $\".concat(lastDeposit, \"!\"),\n    body: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"form\", null, \"Deposit Amount\", /*#__PURE__*/React.createElement(\"br\", null), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"input\",\n      className: \"form-control\",\n      id: \"deposit\",\n      placeholder: \"Enter Deposit Amount\",\n      value: deposit,\n      onChange: e => {\n        setDeposit(e.currentTarget.value);\n        setDepositComplete(false);\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", null), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-light\",\n      onClick: makeDeposit,\n      disabled: !formFilled\n    }, \"Make Deposit\"), \" \", /*#__PURE__*/React.createElement(\"br\", null)))\n  }), \";\");\n}","map":{"version":3,"names":["React","useEffect","Card","CurrentUser","useNavigate","checkAuthentication","getBalance","Deposit","currentUser","setCurrentUser","useContext","deposit","setDeposit","useState","lastDeposit","setLastDeposit","balance","setBalance","formFilled","setFormFilled","depositComplete","setDepositComplete","loading","setLoading","navigate","loadPage","email","makeDeposit","e","preventDefault","isNaN","Number","alert","isInteger","newBalance","parseInt","url","concat","res","fetch","user","createElement","Fragment","bgcolor","txtcolor","header","text","name","title","body","type","className","id","placeholder","value","onChange","currentTarget","onClick","disabled"],"sources":["/Users/Regan/Documents/GitHub/BadBank/public/src/Components/deposit.js"],"sourcesContent":["import React, {useEffect} from \"react\";\nimport { Card, CurrentUser } from \"./context\";\nimport { useNavigate } from \"react-router-dom\";\nimport {checkAuthentication, getBalance} from \"./loading\"\n\n\nexport default function Deposit(){\n    const { currentUser, setCurrentUser } = React.useContext(CurrentUser);\n    const [deposit, setDeposit] = React.useState(0);\n    const [lastDeposit, setLastDeposit] = React.useState(0);\n    const [balance, setBalance] = React.useState(currentUser.balance);\n    const [formFilled, setFormFilled] = React.useState(true);\n    const [depositComplete, setDepositComplete] = React.useState(false);\n    const [loading, setLoading] = React.useState(true);\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        async function loadPage() {\n            if (currentUser.email === '' || !currentUser) {\n                await checkAuthentication(setCurrentUser, navigate);\n            } \n            else {\n                await getBalance(setCurrentUser, currentUser.email);\n            }\n            setLoading(false);\n        }\n        loadPage();\n    }, []);\n\n    function makeDeposit(e) {\n        e.preventDefault();\n        if (isNaN(Number(deposit))) {\n            alert('Your deposit must be a valid number.'); \n            return;\n        }\n        if ((Number(deposit)) <= 0) {\n            alert('Your deposit cannot be a negative number.'); \n            return;\n        }\n        if (!Number.isInteger(Number(deposit))) {\n            alert('Error: You must deposit dollars only, not cents. Please round up or down and try again.'); \n            return;\n        }\n        let newBalance = parseInt(deposit) + parseInt(balance)\n\n        const url = `/account/updateBalance/${currentUser.email}/${newBalance}/deposit/${parseInt(deposit)}`;\n    (async () => {\n       var res = await fetch(url);\n       setBalance(newBalance);\n       setCurrentUser(user => ({\n        ...user,\n        balance: newBalance\n      })); \n        setLastDeposit(deposit);\n        setDeposit(0);\n        setDepositComplete(true);\n    })();\n    }\n    \n\n    React.useEffect(() =>{\n        setFormFilled(deposit != '0' && deposit != ''); \n    }, [deposit])\n\n\n    return (\n        <>\n        {!loading && (\n        <Card \n        bgcolor=\"primary\"\n        txtcolor=\"white\"\n        header=\"Make a Deposit\"\n        text={`${currentUser.name}, your balance is $${currentUser.balance}.`}       \n        title={depositComplete && `You have successfully deposited $${lastDeposit}!`}       \n        body={\n            <>\n            <form>\n            Deposit Amount<br/>\n            <input type=\"input\" className=\"form-control\" id=\"deposit\" placeholder=\"Enter Deposit Amount\" value={deposit} onChange={e => {\n                setDeposit(e.currentTarget.value);\n                setDepositComplete(false);\n                }} /> <br /> \n            <button type=\"submit\" className=\"btn btn-light\" onClick={makeDeposit} disabled={!formFilled}>Make Deposit</button> <br />\n            </form>\n    </>\n        }\n        />\n    )};\n    </>\n     );\n }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}