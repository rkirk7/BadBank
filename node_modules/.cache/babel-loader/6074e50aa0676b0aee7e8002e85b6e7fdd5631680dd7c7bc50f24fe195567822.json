{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UnorderedBulkOperation = void 0;\nconst BSON = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst common_1 = require(\"./common\");\n/** @public */\nclass UnorderedBulkOperation extends common_1.BulkOperationBase {\n  /** @internal */\n  constructor(collection, options) {\n    super(collection, options, false);\n  }\n  handleWriteError(callback, writeResult) {\n    if (this.s.batches.length) {\n      return false;\n    }\n    return super.handleWriteError(callback, writeResult);\n  }\n  addToOperationsList(batchType, document) {\n    // Get the bsonSize\n    const bsonSize = BSON.calculateObjectSize(document, {\n      checkKeys: false,\n      // Since we don't know what the user selected for BSON options here,\n      // err on the safe side, and check the size with ignoreUndefined: false.\n      ignoreUndefined: false\n    });\n    // Throw error if the doc is bigger than the max BSON size\n    if (bsonSize >= this.s.maxBsonObjectSize) {\n      // TODO(NODE-3483): Change this to MongoBSONError\n      throw new error_1.MongoInvalidArgumentError(\"Document is larger than the maximum size \".concat(this.s.maxBsonObjectSize));\n    }\n    // Holds the current batch\n    this.s.currentBatch = undefined;\n    // Get the right type of batch\n    if (batchType === common_1.BatchType.INSERT) {\n      this.s.currentBatch = this.s.currentInsertBatch;\n    } else if (batchType === common_1.BatchType.UPDATE) {\n      this.s.currentBatch = this.s.currentUpdateBatch;\n    } else if (batchType === common_1.BatchType.DELETE) {\n      this.s.currentBatch = this.s.currentRemoveBatch;\n    }\n    const maxKeySize = this.s.maxKeySize;\n    // Create a new batch object if we don't have a current one\n    if (this.s.currentBatch == null) {\n      this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n    }\n    // Check if we need to create a new batch\n    if (\n    // New batch if we exceed the max batch op size\n    this.s.currentBatch.size + 1 >= this.s.maxWriteBatchSize ||\n    // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n    // since we can't sent an empty batch\n    this.s.currentBatch.size > 0 && this.s.currentBatch.sizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes ||\n    // New batch if the new op does not have the same op type as the current batch\n    this.s.currentBatch.batchType !== batchType) {\n      // Save the batch to the execution stack\n      this.s.batches.push(this.s.currentBatch);\n      // Create a new batch\n      this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n    }\n    // We have an array of documents\n    if (Array.isArray(document)) {\n      throw new error_1.MongoInvalidArgumentError('Operation passed in cannot be an Array');\n    }\n    this.s.currentBatch.operations.push(document);\n    this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n    this.s.currentIndex = this.s.currentIndex + 1;\n    // Save back the current Batch to the right type\n    if (batchType === common_1.BatchType.INSERT) {\n      this.s.currentInsertBatch = this.s.currentBatch;\n      this.s.bulkResult.insertedIds.push({\n        index: this.s.bulkResult.insertedIds.length,\n        _id: document._id\n      });\n    } else if (batchType === common_1.BatchType.UPDATE) {\n      this.s.currentUpdateBatch = this.s.currentBatch;\n    } else if (batchType === common_1.BatchType.DELETE) {\n      this.s.currentRemoveBatch = this.s.currentBatch;\n    }\n    // Update current batch size\n    this.s.currentBatch.size += 1;\n    this.s.currentBatch.sizeBytes += maxKeySize + bsonSize;\n    return this;\n  }\n}\nexports.UnorderedBulkOperation = UnorderedBulkOperation;","map":{"version":3,"names":["BSON","require","error_1","common_1","UnorderedBulkOperation","BulkOperationBase","constructor","collection","options","handleWriteError","callback","writeResult","s","batches","length","addToOperationsList","batchType","document","bsonSize","calculateObjectSize","checkKeys","ignoreUndefined","maxBsonObjectSize","MongoInvalidArgumentError","concat","currentBatch","undefined","BatchType","INSERT","currentInsertBatch","UPDATE","currentUpdateBatch","DELETE","currentRemoveBatch","maxKeySize","Batch","currentIndex","size","maxWriteBatchSize","sizeBytes","maxBatchSizeBytes","push","Array","isArray","operations","originalIndexes","bulkResult","insertedIds","index","_id","exports"],"sources":["/Users/Regan/Documents/GitHub/BadBank/node_modules/mongodb/src/bulk/unordered.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport * as BSON from '../bson';\nimport type { Collection } from '../collection';\nimport { MongoInvalidArgumentError } from '../error';\nimport type { DeleteStatement } from '../operations/delete';\nimport type { UpdateStatement } from '../operations/update';\nimport { type Callback } from '../utils';\nimport {\n  Batch,\n  BatchType,\n  BulkOperationBase,\n  type BulkWriteOptions,\n  type BulkWriteResult\n} from './common';\n\n/** @public */\nexport class UnorderedBulkOperation extends BulkOperationBase {\n  /** @internal */\n  constructor(collection: Collection, options: BulkWriteOptions) {\n    super(collection, options, false);\n  }\n\n  override handleWriteError(callback: Callback, writeResult: BulkWriteResult): boolean {\n    if (this.s.batches.length) {\n      return false;\n    }\n\n    return super.handleWriteError(callback, writeResult);\n  }\n\n  addToOperationsList(\n    batchType: BatchType,\n    document: Document | UpdateStatement | DeleteStatement\n  ): this {\n    // Get the bsonSize\n    const bsonSize = BSON.calculateObjectSize(document, {\n      checkKeys: false,\n\n      // Since we don't know what the user selected for BSON options here,\n      // err on the safe side, and check the size with ignoreUndefined: false.\n      ignoreUndefined: false\n    } as any);\n\n    // Throw error if the doc is bigger than the max BSON size\n    if (bsonSize >= this.s.maxBsonObjectSize) {\n      // TODO(NODE-3483): Change this to MongoBSONError\n      throw new MongoInvalidArgumentError(\n        `Document is larger than the maximum size ${this.s.maxBsonObjectSize}`\n      );\n    }\n\n    // Holds the current batch\n    this.s.currentBatch = undefined;\n    // Get the right type of batch\n    if (batchType === BatchType.INSERT) {\n      this.s.currentBatch = this.s.currentInsertBatch;\n    } else if (batchType === BatchType.UPDATE) {\n      this.s.currentBatch = this.s.currentUpdateBatch;\n    } else if (batchType === BatchType.DELETE) {\n      this.s.currentBatch = this.s.currentRemoveBatch;\n    }\n\n    const maxKeySize = this.s.maxKeySize;\n\n    // Create a new batch object if we don't have a current one\n    if (this.s.currentBatch == null) {\n      this.s.currentBatch = new Batch(batchType, this.s.currentIndex);\n    }\n\n    // Check if we need to create a new batch\n    if (\n      // New batch if we exceed the max batch op size\n      this.s.currentBatch.size + 1 >= this.s.maxWriteBatchSize ||\n      // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n      // since we can't sent an empty batch\n      (this.s.currentBatch.size > 0 &&\n        this.s.currentBatch.sizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes) ||\n      // New batch if the new op does not have the same op type as the current batch\n      this.s.currentBatch.batchType !== batchType\n    ) {\n      // Save the batch to the execution stack\n      this.s.batches.push(this.s.currentBatch);\n\n      // Create a new batch\n      this.s.currentBatch = new Batch(batchType, this.s.currentIndex);\n    }\n\n    // We have an array of documents\n    if (Array.isArray(document)) {\n      throw new MongoInvalidArgumentError('Operation passed in cannot be an Array');\n    }\n\n    this.s.currentBatch.operations.push(document);\n    this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n    this.s.currentIndex = this.s.currentIndex + 1;\n\n    // Save back the current Batch to the right type\n    if (batchType === BatchType.INSERT) {\n      this.s.currentInsertBatch = this.s.currentBatch;\n      this.s.bulkResult.insertedIds.push({\n        index: this.s.bulkResult.insertedIds.length,\n        _id: (document as Document)._id\n      });\n    } else if (batchType === BatchType.UPDATE) {\n      this.s.currentUpdateBatch = this.s.currentBatch;\n    } else if (batchType === BatchType.DELETE) {\n      this.s.currentRemoveBatch = this.s.currentBatch;\n    }\n\n    // Update current batch size\n    this.s.currentBatch.size += 1;\n    this.s.currentBatch.sizeBytes += maxKeySize + bsonSize;\n\n    return this;\n  }\n}\n"],"mappings":";;;;;;AACA,MAAAA,IAAA,GAAAC,OAAA;AAEA,MAAAC,OAAA,GAAAD,OAAA;AAIA,MAAAE,QAAA,GAAAF,OAAA;AAQA;AACA,MAAaG,sBAAuB,SAAQD,QAAA,CAAAE,iBAAiB;EAC3D;EACAC,YAAYC,UAAsB,EAAEC,OAAyB;IAC3D,KAAK,CAACD,UAAU,EAAEC,OAAO,EAAE,KAAK,CAAC;EACnC;EAESC,gBAAgBA,CAACC,QAAkB,EAAEC,WAA4B;IACxE,IAAI,IAAI,CAACC,CAAC,CAACC,OAAO,CAACC,MAAM,EAAE;MACzB,OAAO,KAAK;;IAGd,OAAO,KAAK,CAACL,gBAAgB,CAACC,QAAQ,EAAEC,WAAW,CAAC;EACtD;EAEAI,mBAAmBA,CACjBC,SAAoB,EACpBC,QAAsD;IAEtD;IACA,MAAMC,QAAQ,GAAGlB,IAAI,CAACmB,mBAAmB,CAACF,QAAQ,EAAE;MAClDG,SAAS,EAAE,KAAK;MAEhB;MACA;MACAC,eAAe,EAAE;KACX,CAAC;IAET;IACA,IAAIH,QAAQ,IAAI,IAAI,CAACN,CAAC,CAACU,iBAAiB,EAAE;MACxC;MACA,MAAM,IAAIpB,OAAA,CAAAqB,yBAAyB,6CAAAC,MAAA,CACW,IAAI,CAACZ,CAAC,CAACU,iBAAiB,CAAE,CACvE;;IAGH;IACA,IAAI,CAACV,CAAC,CAACa,YAAY,GAAGC,SAAS;IAC/B;IACA,IAAIV,SAAS,KAAKb,QAAA,CAAAwB,SAAS,CAACC,MAAM,EAAE;MAClC,IAAI,CAAChB,CAAC,CAACa,YAAY,GAAG,IAAI,CAACb,CAAC,CAACiB,kBAAkB;KAChD,MAAM,IAAIb,SAAS,KAAKb,QAAA,CAAAwB,SAAS,CAACG,MAAM,EAAE;MACzC,IAAI,CAAClB,CAAC,CAACa,YAAY,GAAG,IAAI,CAACb,CAAC,CAACmB,kBAAkB;KAChD,MAAM,IAAIf,SAAS,KAAKb,QAAA,CAAAwB,SAAS,CAACK,MAAM,EAAE;MACzC,IAAI,CAACpB,CAAC,CAACa,YAAY,GAAG,IAAI,CAACb,CAAC,CAACqB,kBAAkB;;IAGjD,MAAMC,UAAU,GAAG,IAAI,CAACtB,CAAC,CAACsB,UAAU;IAEpC;IACA,IAAI,IAAI,CAACtB,CAAC,CAACa,YAAY,IAAI,IAAI,EAAE;MAC/B,IAAI,CAACb,CAAC,CAACa,YAAY,GAAG,IAAItB,QAAA,CAAAgC,KAAK,CAACnB,SAAS,EAAE,IAAI,CAACJ,CAAC,CAACwB,YAAY,CAAC;;IAGjE;IACA;IACE;IACA,IAAI,CAACxB,CAAC,CAACa,YAAY,CAACY,IAAI,GAAG,CAAC,IAAI,IAAI,CAACzB,CAAC,CAAC0B,iBAAiB;IACxD;IACA;IACC,IAAI,CAAC1B,CAAC,CAACa,YAAY,CAACY,IAAI,GAAG,CAAC,IAC3B,IAAI,CAACzB,CAAC,CAACa,YAAY,CAACc,SAAS,GAAGL,UAAU,GAAGhB,QAAQ,IAAI,IAAI,CAACN,CAAC,CAAC4B,iBAAkB;IACpF;IACA,IAAI,CAAC5B,CAAC,CAACa,YAAY,CAACT,SAAS,KAAKA,SAAS,EAC3C;MACA;MACA,IAAI,CAACJ,CAAC,CAACC,OAAO,CAAC4B,IAAI,CAAC,IAAI,CAAC7B,CAAC,CAACa,YAAY,CAAC;MAExC;MACA,IAAI,CAACb,CAAC,CAACa,YAAY,GAAG,IAAItB,QAAA,CAAAgC,KAAK,CAACnB,SAAS,EAAE,IAAI,CAACJ,CAAC,CAACwB,YAAY,CAAC;;IAGjE;IACA,IAAIM,KAAK,CAACC,OAAO,CAAC1B,QAAQ,CAAC,EAAE;MAC3B,MAAM,IAAIf,OAAA,CAAAqB,yBAAyB,CAAC,wCAAwC,CAAC;;IAG/E,IAAI,CAACX,CAAC,CAACa,YAAY,CAACmB,UAAU,CAACH,IAAI,CAACxB,QAAQ,CAAC;IAC7C,IAAI,CAACL,CAAC,CAACa,YAAY,CAACoB,eAAe,CAACJ,IAAI,CAAC,IAAI,CAAC7B,CAAC,CAACwB,YAAY,CAAC;IAC7D,IAAI,CAACxB,CAAC,CAACwB,YAAY,GAAG,IAAI,CAACxB,CAAC,CAACwB,YAAY,GAAG,CAAC;IAE7C;IACA,IAAIpB,SAAS,KAAKb,QAAA,CAAAwB,SAAS,CAACC,MAAM,EAAE;MAClC,IAAI,CAAChB,CAAC,CAACiB,kBAAkB,GAAG,IAAI,CAACjB,CAAC,CAACa,YAAY;MAC/C,IAAI,CAACb,CAAC,CAACkC,UAAU,CAACC,WAAW,CAACN,IAAI,CAAC;QACjCO,KAAK,EAAE,IAAI,CAACpC,CAAC,CAACkC,UAAU,CAACC,WAAW,CAACjC,MAAM;QAC3CmC,GAAG,EAAGhC,QAAqB,CAACgC;OAC7B,CAAC;KACH,MAAM,IAAIjC,SAAS,KAAKb,QAAA,CAAAwB,SAAS,CAACG,MAAM,EAAE;MACzC,IAAI,CAAClB,CAAC,CAACmB,kBAAkB,GAAG,IAAI,CAACnB,CAAC,CAACa,YAAY;KAChD,MAAM,IAAIT,SAAS,KAAKb,QAAA,CAAAwB,SAAS,CAACK,MAAM,EAAE;MACzC,IAAI,CAACpB,CAAC,CAACqB,kBAAkB,GAAG,IAAI,CAACrB,CAAC,CAACa,YAAY;;IAGjD;IACA,IAAI,CAACb,CAAC,CAACa,YAAY,CAACY,IAAI,IAAI,CAAC;IAC7B,IAAI,CAACzB,CAAC,CAACa,YAAY,CAACc,SAAS,IAAIL,UAAU,GAAGhB,QAAQ;IAEtD,OAAO,IAAI;EACb;;AAlGFgC,OAAA,CAAA9C,sBAAA,GAAAA,sBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}