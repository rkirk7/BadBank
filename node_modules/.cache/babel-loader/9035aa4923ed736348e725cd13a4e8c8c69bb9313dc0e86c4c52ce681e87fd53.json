{"ast":null,"code":"const {\n  MongoClient,\n  ServerApiVersion\n} = require('mongodb');\nconst uri = \"mongodb+srv://regankirk:1UARA3FrwCJ2RQ6O@bankcluster.0ttoepa.mongodb.net/?retryWrites=true&w=majority&tls=true&tlsAllowInvalidCertificates=true&appName=bankcluster\";\nlet db = null;\nconst client = new MongoClient(uri, {\n  serverApi: {\n    version: ServerApiVersion.v1,\n    strict: true,\n    deprecationErrors: true\n  }\n});\nasync function runMongo() {\n  try {\n    await client.connect();\n    await client.db(\"myproject\").command({\n      ping: 1\n    });\n    db = client.db(\"myproject\");\n    if (db) console.log('MongoDB database found');\n  } catch (error) {\n    console.log('error:', error);\n  }\n}\nrunMongo();\nasync function checkAccount(email) {\n  if (!db) {\n    throw new Error('Database connection not established');\n  }\n  try {\n    const docs = await db.collection('users').find({\n      \"email\": email\n    }).toArray();\n    if (docs[0]) {\n      return true;\n    } else {\n      return false;\n    }\n  } catch (error) {\n    throw error;\n  }\n}\nasync function create(name, email, requestedRole) {\n  if (!db) {\n    throw new Error('database connection not successful');\n  }\n  const collection = db.collection('users');\n  const doc = {\n    name,\n    email,\n    balance: 0,\n    role: requestedRole\n  };\n  try {\n    const result = await collection.insertOne(doc);\n    return await log(email, \"\".concat(email, \" created an account.\"), doc);\n  } catch (err) {\n    console.error('error inserting doc', err);\n    throw err;\n  }\n}\nasync function login(email) {\n  if (!db) {\n    throw new Error('database connection not successful');\n  }\n  try {\n    const docs = await db.collection('users').find({\n      \"email\": email\n    }).toArray();\n    if (docs) {\n      return docs[0];\n    } else {\n      return null;\n    }\n  } catch (err) {\n    console.error('error retrieving docs', err);\n  }\n}\nasync function log(email, activity, data) {\n  if (!db) {\n    throw new Error('database connection not successful');\n  }\n  const collection = db.collection('activity');\n  let date = new Date();\n  const doc = {\n    email,\n    activity,\n    date\n  };\n  try {\n    await collection.insertOne(doc);\n    return data;\n  } catch (err) {\n    console.error('error inserting doc', err);\n    throw err;\n  }\n}\nasync function all() {\n  if (!db) {\n    throw new Error('database connection not successful');\n  }\n  try {\n    const docs = await db.collection('users').find().toArray();\n    return docs;\n  } catch (err) {\n    console.error('error retrieving docs', err);\n    throw err;\n  }\n}\nasync function balance(email) {\n  if (!db) {\n    throw new Error('database connection not successful');\n  }\n  try {\n    const docs = await db.collection('users').find({\n      \"email\": email\n    }).toArray();\n    return docs[0];\n  } catch (err) {\n    console.error('error retrieving docs', err);\n  }\n}\nasync function transfer(fromemail, toemail, sentamount, frombalance, tobalance) {\n  if (!db) {\n    throw new Error('database connection not successful');\n  }\n  try {\n    await db.collection('users').updateOne({\n      email: fromemail\n    }, {\n      $set: {\n        balance: frombalance\n      }\n    });\n    await db.collection('users').updateOne({\n      email: toemail\n    }, {\n      $set: {\n        balance: tobalance\n      }\n    });\n    let string = \"\".concat(fromemail, \" transferred $\").concat(sentamount, \" to \").concat(toemail, \".\");\n    await log(toemail, string, 'money received');\n    return log(fromemail, string, 'money sent');\n  } catch (err) {\n    console.error('error retrieving docs', err);\n  }\n}\nasync function updateBalance(email, newamount, status, amount) {\n  if (!db) {\n    throw new Error('database connection not successful');\n  }\n  try {\n    const result = await db.collection('users').updateOne({\n      email: email\n    }, {\n      $set: {\n        balance: newamount\n      }\n    });\n    var string = \"\";\n    if (status === \"deposit\") {\n      string = \"Deposited $\".concat(amount, \". New balance: $\").concat(newamount, \".\");\n    } else if (status === \"withdrawal\") {\n      string = \"Withdrew $\".concat(amount, \". New balance: $\").concat(newamount, \".\");\n    }\n    return await log(email, string, newamount);\n  } catch (err) {\n    console.error('Error updating balance:', err);\n    throw err;\n  }\n}\nasync function logout() {\n  try {\n    await signOut(auth);\n    return;\n  } catch (error) {\n    console.error('Error during logout:', error);\n    throw error;\n  }\n}\nasync function getActivity(email, role) {\n  if (!db) {\n    throw new Error('database connection not successful');\n  }\n  try {\n    let docs;\n    if (role === \"admin\") {\n      docs = await db.collection('activity').find().toArray();\n    } else {\n      docs = await db.collection('activity').find({\n        \"email\": email\n      }).toArray();\n    }\n    return docs;\n  } catch (err) {\n    console.error('error retrieving docs', err);\n    throw err;\n  }\n}\nasync function dalCheckAuthorization(email) {\n  if (!db) {\n    throw new Error('database connection not successful');\n  }\n  try {\n    const docs = await db.collection('users').find({\n      \"email\": email\n    }).toArray();\n    return docs[0];\n  } catch (err) {\n    console.error(err);\n    resolve(null);\n  }\n}\nmodule.exports = {\n  create,\n  all,\n  balance,\n  updateBalance,\n  login,\n  logout,\n  getActivity,\n  transfer,\n  dalCheckAuthorization,\n  checkAccount\n};","map":{"version":3,"names":["MongoClient","ServerApiVersion","require","uri","db","client","serverApi","version","v1","strict","deprecationErrors","runMongo","connect","command","ping","console","log","error","checkAccount","email","Error","docs","collection","find","toArray","create","name","requestedRole","doc","balance","role","result","insertOne","concat","err","login","activity","data","date","Date","all","transfer","fromemail","toemail","sentamount","frombalance","tobalance","updateOne","$set","string","updateBalance","newamount","status","amount","logout","signOut","auth","getActivity","dalCheckAuthorization","resolve","module","exports"],"sources":["/Users/Regan/Documents/GitHub/BadBank/backend/dal.js"],"sourcesContent":["const {MongoClient, ServerApiVersion}= require('mongodb');\nconst uri = \"mongodb+srv://regankirk:1UARA3FrwCJ2RQ6O@bankcluster.0ttoepa.mongodb.net/?retryWrites=true&w=majority&tls=true&tlsAllowInvalidCertificates=true&appName=bankcluster\";\n\nlet db = null;\n\nconst client = new MongoClient(uri, {\n    serverApi: {\n      version: ServerApiVersion.v1,\n      strict: true,\n      deprecationErrors: true,\n    }\n  });\n  \n  async function runMongo() {\n    try {\n      await client.connect();\n      await client.db(\"myproject\").command({ ping: 1 });\n      db = client.db(\"myproject\");\n      if (db) console.log('MongoDB database found');\n    } catch(error) {\n        console.log('error:', error);\n    }\n  }\n  runMongo();\n\n  async function checkAccount(email) {\n    if (!db) {\n        throw new Error('Database connection not established');\n    }\n    try {\n        const docs = await db.collection('users').find( {\"email\" : email}).toArray();\n        if (docs[0]) {\n            return true;\n        } else {\n            return false;\n        }\n      } catch (error) {\n        throw error;\n      }\n  }\n\n  async function create(name, email, requestedRole) {\n    if (!db) {\n        throw new Error('database connection not successful');\n    }\n    const collection = db.collection('users');\n    const doc = {name, email, balance: 0, role: requestedRole};\n    try {\n        const result = await collection.insertOne(doc);\n        return await log(email, `${email} created an account.`, doc);\n    } catch (err) {\n        console.error('error inserting doc', err);\n        throw err;\n    }\n  }\n\nasync function login(email) {\n    if (!db) {\n        throw new Error('database connection not successful');\n    }\n    try {\n        const docs = await db.collection('users').find( {\"email\" : email}).toArray();\n        if (docs) {\n         return docs[0];\n        } else {\n            return null;\n        }\n    } catch (err) {\n        console.error('error retrieving docs', err);       \n    }\n}\n\n  async function log(email, activity, data) {\n    if (!db) {\n        throw new Error('database connection not successful');\n    }\n    const collection = db.collection('activity');\n    let date = new Date();\n    const doc = {email, activity, date};\n    try {\n        await collection.insertOne(doc);\n        return data;\n    } catch (err) {\n        console.error('error inserting doc', err);\n        throw err;\n    }\n  }\n\n  async function all() {\n    if (!db) {\n        throw new Error('database connection not successful');\n    }\n    try {\n        const docs = await db.collection('users').find().toArray();\n        return docs\n    } catch (err) {\n        console.error('error retrieving docs', err);\n        throw err;\n    }\n}\n\nasync function balance(email) {\n    if (!db) {\n        throw new Error('database connection not successful');\n    }\n    try {\n        const docs = await db.collection('users').find( {\"email\" : email}).toArray();\n        return docs[0]; \n    } catch (err) {\n        console.error('error retrieving docs', err);\n    }\n}\n\nasync function transfer(fromemail, toemail, sentamount, frombalance, tobalance ) {\n    if (!db) {\n        throw new Error('database connection not successful');\n    }\n    try {\n        await db.collection('users').updateOne(\n            { email: fromemail },\n            { $set: { balance: frombalance } }\n        );\n        await db.collection('users').updateOne(\n            { email: toemail },\n            { $set: { balance: tobalance } }\n        );\n        let string = `${fromemail} transferred $${sentamount} to ${toemail}.`\n        await log(toemail, string, 'money received');\n        return log(fromemail, string, 'money sent'); \n    } catch (err) {\n        console.error('error retrieving docs', err);\n    }\n}\n\nasync function updateBalance(email, newamount, status, amount) {\n    if (!db) {\n        throw new Error('database connection not successful');\n    }\n    try {\n        const result = await db.collection('users').updateOne(\n            { email: email },\n            { $set: { balance: newamount } }\n        );\n        var string = \"\";\n        if (status === \"deposit\") {\n           string = `Deposited $${amount}. New balance: $${newamount}.`\n        } else if (status === \"withdrawal\") {\n            string = `Withdrew $${amount}. New balance: $${newamount}.`\n        }\n        return await log(email, string, newamount);\n    } catch (err) {\n        console.error('Error updating balance:', err);\n        throw err;\n    }\n}\n\n\nasync function logout() {\n    try {\n        await signOut(auth);\n        return;\n    } catch (error) {\n        console.error('Error during logout:', error);\n        throw error;\n    }\n}\n\nasync function getActivity(email, role) {\n    if (!db) {\n        throw new Error('database connection not successful');\n    }\n    try {\n        let docs;\n        if (role === \"admin\") {\n            docs = await db.collection('activity').find().toArray();\n        } else {\n         docs = await db.collection('activity').find( {\"email\" : email}).toArray();\n        }\n        return docs;\n    } catch (err) {\n        console.error('error retrieving docs', err);\n        throw err;\n    }\n}\n\nasync function dalCheckAuthorization(email) {\n    if (!db) {\n        throw new Error('database connection not successful');\n    }\n    try {\n        const docs = await db.collection('users').find({ \"email\": email }).toArray();\n        return(docs[0]);\n    } catch (err) {\n        console.error(err);\n        resolve(null);\n    }\n}\n\n\n  module.exports = {create, all, balance, updateBalance, login, logout, getActivity, transfer, dalCheckAuthorization, checkAccount}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}