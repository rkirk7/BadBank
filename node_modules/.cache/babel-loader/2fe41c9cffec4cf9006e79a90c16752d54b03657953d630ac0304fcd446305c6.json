{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ClientEncryption = void 0;\nconst bson_1 = require(\"../bson\");\nconst deps_1 = require(\"../deps\");\nconst utils_1 = require(\"../utils\");\nconst cryptoCallbacks = require(\"./crypto_callbacks\");\nconst errors_1 = require(\"./errors\");\nconst index_1 = require(\"./providers/index\");\nconst state_machine_1 = require(\"./state_machine\");\n/**\n * @public\n * The public interface for explicit in-use encryption\n */\nclass ClientEncryption {\n  /** @internal */\n  static getMongoCrypt() {\n    const encryption = (0, deps_1.getMongoDBClientEncryption)();\n    if ('kModuleError' in encryption) {\n      throw encryption.kModuleError;\n    }\n    return encryption.MongoCrypt;\n  }\n  /**\n   * Create a new encryption instance\n   *\n   * @example\n   * ```ts\n   * new ClientEncryption(mongoClient, {\n   *   keyVaultNamespace: 'client.encryption',\n   *   kmsProviders: {\n   *     local: {\n   *       key: masterKey // The master key used for encryption/decryption. A 96-byte long Buffer\n   *     }\n   *   }\n   * });\n   * ```\n   *\n   * @example\n   * ```ts\n   * new ClientEncryption(mongoClient, {\n   *   keyVaultNamespace: 'client.encryption',\n   *   kmsProviders: {\n   *     aws: {\n   *       accessKeyId: AWS_ACCESS_KEY,\n   *       secretAccessKey: AWS_SECRET_KEY\n   *     }\n   *   }\n   * });\n   * ```\n   */\n  constructor(client, options) {\n    var _options$proxyOptions, _options$tlsOptions;\n    this._client = client;\n    this._proxyOptions = (_options$proxyOptions = options.proxyOptions) !== null && _options$proxyOptions !== void 0 ? _options$proxyOptions : {};\n    this._tlsOptions = (_options$tlsOptions = options.tlsOptions) !== null && _options$tlsOptions !== void 0 ? _options$tlsOptions : {};\n    this._kmsProviders = options.kmsProviders || {};\n    if (options.keyVaultNamespace == null) {\n      throw new errors_1.MongoCryptInvalidArgumentError('Missing required option `keyVaultNamespace`');\n    }\n    const mongoCryptOptions = {\n      ...options,\n      cryptoCallbacks,\n      kmsProviders: !Buffer.isBuffer(this._kmsProviders) ? (0, bson_1.serialize)(this._kmsProviders) : this._kmsProviders\n    };\n    this._keyVaultNamespace = options.keyVaultNamespace;\n    this._keyVaultClient = options.keyVaultClient || client;\n    const MongoCrypt = ClientEncryption.getMongoCrypt();\n    this._mongoCrypt = new MongoCrypt(mongoCryptOptions);\n  }\n  /**\n   * Creates a data key used for explicit encryption and inserts it into the key vault namespace\n   *\n   * @example\n   * ```ts\n   * // Using async/await to create a local key\n   * const dataKeyId = await clientEncryption.createDataKey('local');\n   * ```\n   *\n   * @example\n   * ```ts\n   * // Using async/await to create an aws key\n   * const dataKeyId = await clientEncryption.createDataKey('aws', {\n   *   masterKey: {\n   *     region: 'us-east-1',\n   *     key: 'xxxxxxxxxxxxxx' // CMK ARN here\n   *   }\n   * });\n   * ```\n   *\n   * @example\n   * ```ts\n   * // Using async/await to create an aws key with a keyAltName\n   * const dataKeyId = await clientEncryption.createDataKey('aws', {\n   *   masterKey: {\n   *     region: 'us-east-1',\n   *     key: 'xxxxxxxxxxxxxx' // CMK ARN here\n   *   },\n   *   keyAltNames: [ 'mySpecialKey' ]\n   * });\n   * ```\n   */\n  async createDataKey(provider) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (options.keyAltNames && !Array.isArray(options.keyAltNames)) {\n      throw new errors_1.MongoCryptInvalidArgumentError(\"Option \\\"keyAltNames\\\" must be an array of strings, but was of type \".concat(typeof options.keyAltNames, \".\"));\n    }\n    let keyAltNames = undefined;\n    if (options.keyAltNames && options.keyAltNames.length > 0) {\n      keyAltNames = options.keyAltNames.map((keyAltName, i) => {\n        if (typeof keyAltName !== 'string') {\n          throw new errors_1.MongoCryptInvalidArgumentError(\"Option \\\"keyAltNames\\\" must be an array of strings, but item at index \".concat(i, \" was of type \").concat(typeof keyAltName));\n        }\n        return (0, bson_1.serialize)({\n          keyAltName\n        });\n      });\n    }\n    let keyMaterial = undefined;\n    if (options.keyMaterial) {\n      keyMaterial = (0, bson_1.serialize)({\n        keyMaterial: options.keyMaterial\n      });\n    }\n    const dataKeyBson = (0, bson_1.serialize)({\n      provider,\n      ...options.masterKey\n    });\n    const context = this._mongoCrypt.makeDataKeyContext(dataKeyBson, {\n      keyAltNames,\n      keyMaterial\n    });\n    const stateMachine = new state_machine_1.StateMachine({\n      proxyOptions: this._proxyOptions,\n      tlsOptions: this._tlsOptions\n    });\n    const dataKey = await stateMachine.execute(this, context);\n    const {\n      db: dbName,\n      collection: collectionName\n    } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n    const {\n      insertedId\n    } = await this._keyVaultClient.db(dbName).collection(collectionName).insertOne(dataKey, {\n      writeConcern: {\n        w: 'majority'\n      }\n    });\n    return insertedId;\n  }\n  /**\n   * Searches the keyvault for any data keys matching the provided filter.  If there are matches, rewrapManyDataKey then attempts to re-wrap the data keys using the provided options.\n   *\n   * If no matches are found, then no bulk write is performed.\n   *\n   * @example\n   * ```ts\n   * // rewrapping all data data keys (using a filter that matches all documents)\n   * const filter = {};\n   *\n   * const result = await clientEncryption.rewrapManyDataKey(filter);\n   * if (result.bulkWriteResult != null) {\n   *  // keys were re-wrapped, results will be available in the bulkWrite object.\n   * }\n   * ```\n   *\n   * @example\n   * ```ts\n   * // attempting to rewrap all data keys with no matches\n   * const filter = { _id: new Binary() } // assume _id matches no documents in the database\n   * const result = await clientEncryption.rewrapManyDataKey(filter);\n   *\n   * if (result.bulkWriteResult == null) {\n   *  // no keys matched, `bulkWriteResult` does not exist on the result object\n   * }\n   * ```\n   */\n  async rewrapManyDataKey(filter, options) {\n    let keyEncryptionKeyBson = undefined;\n    if (options) {\n      const keyEncryptionKey = Object.assign({\n        provider: options.provider\n      }, options.masterKey);\n      keyEncryptionKeyBson = (0, bson_1.serialize)(keyEncryptionKey);\n    }\n    const filterBson = (0, bson_1.serialize)(filter);\n    const context = this._mongoCrypt.makeRewrapManyDataKeyContext(filterBson, keyEncryptionKeyBson);\n    const stateMachine = new state_machine_1.StateMachine({\n      proxyOptions: this._proxyOptions,\n      tlsOptions: this._tlsOptions\n    });\n    const {\n      v: dataKeys\n    } = await stateMachine.execute(this, context);\n    if (dataKeys.length === 0) {\n      return {};\n    }\n    const {\n      db: dbName,\n      collection: collectionName\n    } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n    const replacements = dataKeys.map(key => ({\n      updateOne: {\n        filter: {\n          _id: key._id\n        },\n        update: {\n          $set: {\n            masterKey: key.masterKey,\n            keyMaterial: key.keyMaterial\n          },\n          $currentDate: {\n            updateDate: true\n          }\n        }\n      }\n    }));\n    const result = await this._keyVaultClient.db(dbName).collection(collectionName).bulkWrite(replacements, {\n      writeConcern: {\n        w: 'majority'\n      }\n    });\n    return {\n      bulkWriteResult: result\n    };\n  }\n  /**\n   * Deletes the key with the provided id from the keyvault, if it exists.\n   *\n   * @example\n   * ```ts\n   * // delete a key by _id\n   * const id = new Binary(); // id is a bson binary subtype 4 object\n   * const { deletedCount } = await clientEncryption.deleteKey(id);\n   *\n   * if (deletedCount != null && deletedCount > 0) {\n   *   // successful deletion\n   * }\n   * ```\n   *\n   */\n  async deleteKey(_id) {\n    const {\n      db: dbName,\n      collection: collectionName\n    } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n    return await this._keyVaultClient.db(dbName).collection(collectionName).deleteOne({\n      _id\n    }, {\n      writeConcern: {\n        w: 'majority'\n      }\n    });\n  }\n  /**\n   * Finds all the keys currently stored in the keyvault.\n   *\n   * This method will not throw.\n   *\n   * @returns a FindCursor over all keys in the keyvault.\n   * @example\n   * ```ts\n   * // fetching all keys\n   * const keys = await clientEncryption.getKeys().toArray();\n   * ```\n   */\n  getKeys() {\n    const {\n      db: dbName,\n      collection: collectionName\n    } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n    return this._keyVaultClient.db(dbName).collection(collectionName).find({}, {\n      readConcern: {\n        level: 'majority'\n      }\n    });\n  }\n  /**\n   * Finds a key in the keyvault with the specified _id.\n   *\n   * Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n   * match the id.  The promise rejects with an error if an error is thrown.\n   * @example\n   * ```ts\n   * // getting a key by id\n   * const id = new Binary(); // id is a bson binary subtype 4 object\n   * const key = await clientEncryption.getKey(id);\n   * if (!key) {\n   *  // key is null if there was no matching key\n   * }\n   * ```\n   */\n  async getKey(_id) {\n    const {\n      db: dbName,\n      collection: collectionName\n    } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n    return await this._keyVaultClient.db(dbName).collection(collectionName).findOne({\n      _id\n    }, {\n      readConcern: {\n        level: 'majority'\n      }\n    });\n  }\n  /**\n   * Finds a key in the keyvault which has the specified keyAltName.\n   *\n   * @param keyAltName - a keyAltName to search for a key\n   * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n   * match the keyAltName.  The promise rejects with an error if an error is thrown.\n   * @example\n   * ```ts\n   * // get a key by alt name\n   * const keyAltName = 'keyAltName';\n   * const key = await clientEncryption.getKeyByAltName(keyAltName);\n   * if (!key) {\n   *  // key is null if there is no matching key\n   * }\n   * ```\n   */\n  async getKeyByAltName(keyAltName) {\n    const {\n      db: dbName,\n      collection: collectionName\n    } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n    return await this._keyVaultClient.db(dbName).collection(collectionName).findOne({\n      keyAltNames: keyAltName\n    }, {\n      readConcern: {\n        level: 'majority'\n      }\n    });\n  }\n  /**\n   * Adds a keyAltName to a key identified by the provided _id.\n   *\n   * This method resolves to/returns the *old* key value (prior to adding the new altKeyName).\n   *\n   * @param _id - The id of the document to update.\n   * @param keyAltName - a keyAltName to search for a key\n   * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n   * match the id.  The promise rejects with an error if an error is thrown.\n   * @example\n   * ```ts\n   * // adding an keyAltName to a data key\n   * const id = new Binary();  // id is a bson binary subtype 4 object\n   * const keyAltName = 'keyAltName';\n   * const oldKey = await clientEncryption.addKeyAltName(id, keyAltName);\n   * if (!oldKey) {\n   *  // null is returned if there is no matching document with an id matching the supplied id\n   * }\n   * ```\n   */\n  async addKeyAltName(_id, keyAltName) {\n    const {\n      db: dbName,\n      collection: collectionName\n    } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n    const value = await this._keyVaultClient.db(dbName).collection(collectionName).findOneAndUpdate({\n      _id\n    }, {\n      $addToSet: {\n        keyAltNames: keyAltName\n      }\n    }, {\n      writeConcern: {\n        w: 'majority'\n      },\n      returnDocument: 'before'\n    });\n    return value;\n  }\n  /**\n   * Adds a keyAltName to a key identified by the provided _id.\n   *\n   * This method resolves to/returns the *old* key value (prior to removing the new altKeyName).\n   *\n   * If the removed keyAltName is the last keyAltName for that key, the `altKeyNames` property is unset from the document.\n   *\n   * @param _id - The id of the document to update.\n   * @param keyAltName - a keyAltName to search for a key\n   * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n   * match the id.  The promise rejects with an error if an error is thrown.\n   * @example\n   * ```ts\n   * // removing a key alt name from a data key\n   * const id = new Binary();  // id is a bson binary subtype 4 object\n   * const keyAltName = 'keyAltName';\n   * const oldKey = await clientEncryption.removeKeyAltName(id, keyAltName);\n   *\n   * if (!oldKey) {\n   *  // null is returned if there is no matching document with an id matching the supplied id\n   * }\n   * ```\n   */\n  async removeKeyAltName(_id, keyAltName) {\n    const {\n      db: dbName,\n      collection: collectionName\n    } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n    const pipeline = [{\n      $set: {\n        keyAltNames: {\n          $cond: [{\n            $eq: ['$keyAltNames', [keyAltName]]\n          }, '$$REMOVE', {\n            $filter: {\n              input: '$keyAltNames',\n              cond: {\n                $ne: ['$$this', keyAltName]\n              }\n            }\n          }]\n        }\n      }\n    }];\n    const value = await this._keyVaultClient.db(dbName).collection(collectionName).findOneAndUpdate({\n      _id\n    }, pipeline, {\n      writeConcern: {\n        w: 'majority'\n      },\n      returnDocument: 'before'\n    });\n    return value;\n  }\n  /**\n   * A convenience method for creating an encrypted collection.\n   * This method will create data keys for any encryptedFields that do not have a `keyId` defined\n   * and then create a new collection with the full set of encryptedFields.\n   *\n   * @param db - A Node.js driver Db object with which to create the collection\n   * @param name - The name of the collection to be created\n   * @param options - Options for createDataKey and for createCollection\n   * @returns created collection and generated encryptedFields\n   * @throws MongoCryptCreateDataKeyError - If part way through the process a createDataKey invocation fails, an error will be rejected that has the partial `encryptedFields` that were created.\n   * @throws MongoCryptCreateEncryptedCollectionError - If creating the collection fails, an error will be rejected that has the entire `encryptedFields` that were created.\n   */\n  async createEncryptedCollection(db, name, options) {\n    const {\n      provider,\n      masterKey,\n      createCollectionOptions: {\n        encryptedFields: {\n          ...encryptedFields\n        },\n        ...createCollectionOptions\n      }\n    } = options;\n    if (Array.isArray(encryptedFields.fields)) {\n      const createDataKeyPromises = encryptedFields.fields.map(async field => field == null || typeof field !== 'object' || field.keyId != null ? field : {\n        ...field,\n        keyId: await this.createDataKey(provider, {\n          masterKey\n        })\n      });\n      const createDataKeyResolutions = await Promise.allSettled(createDataKeyPromises);\n      encryptedFields.fields = createDataKeyResolutions.map((resolution, index) => resolution.status === 'fulfilled' ? resolution.value : encryptedFields.fields[index]);\n      const rejection = createDataKeyResolutions.find(result => result.status === 'rejected');\n      if (rejection != null) {\n        throw new errors_1.MongoCryptCreateDataKeyError(encryptedFields, {\n          cause: rejection.reason\n        });\n      }\n    }\n    try {\n      const collection = await db.createCollection(name, {\n        ...createCollectionOptions,\n        encryptedFields\n      });\n      return {\n        collection,\n        encryptedFields\n      };\n    } catch (cause) {\n      throw new errors_1.MongoCryptCreateEncryptedCollectionError(encryptedFields, {\n        cause\n      });\n    }\n  }\n  /**\n   * Explicitly encrypt a provided value. Note that either `options.keyId` or `options.keyAltName` must\n   * be specified. Specifying both `options.keyId` and `options.keyAltName` is considered an error.\n   *\n   * @param value - The value that you wish to serialize. Must be of a type that can be serialized into BSON\n   * @param options -\n   * @returns a Promise that either resolves with the encrypted value, or rejects with an error.\n   *\n   * @example\n   * ```ts\n   * // Encryption with async/await api\n   * async function encryptMyData(value) {\n   *   const keyId = await clientEncryption.createDataKey('local');\n   *   return clientEncryption.encrypt(value, { keyId, algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });\n   * }\n   * ```\n   *\n   * @example\n   * ```ts\n   * // Encryption using a keyAltName\n   * async function encryptMyData(value) {\n   *   await clientEncryption.createDataKey('local', { keyAltNames: 'mySpecialKey' });\n   *   return clientEncryption.encrypt(value, { keyAltName: 'mySpecialKey', algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });\n   * }\n   * ```\n   */\n  async encrypt(value, options) {\n    return await this._encrypt(value, false, options);\n  }\n  /**\n   * Encrypts a Match Expression or Aggregate Expression to query a range index.\n   *\n   * Only supported when queryType is \"rangePreview\" and algorithm is \"RangePreview\".\n   *\n   * @experimental The Range algorithm is experimental only. It is not intended for production use. It is subject to breaking changes.\n   *\n   * @param expression - a BSON document of one of the following forms:\n   *  1. A Match Expression of this form:\n   *      `{$and: [{<field>: {$gt: <value1>}}, {<field>: {$lt: <value2> }}]}`\n   *  2. An Aggregate Expression of this form:\n   *      `{$and: [{$gt: [<fieldpath>, <value1>]}, {$lt: [<fieldpath>, <value2>]}]}`\n   *\n   *    `$gt` may also be `$gte`. `$lt` may also be `$lte`.\n   *\n   * @param options -\n   * @returns Returns a Promise that either resolves with the encrypted value or rejects with an error.\n   */\n  async encryptExpression(expression, options) {\n    return await this._encrypt(expression, true, options);\n  }\n  /**\n   * Explicitly decrypt a provided encrypted value\n   *\n   * @param value - An encrypted value\n   * @returns a Promise that either resolves with the decrypted value, or rejects with an error\n   *\n   * @example\n   * ```ts\n   * // Decrypting value with async/await API\n   * async function decryptMyValue(value) {\n   *   return clientEncryption.decrypt(value);\n   * }\n   * ```\n   */\n  async decrypt(value) {\n    const valueBuffer = (0, bson_1.serialize)({\n      v: value\n    });\n    const context = this._mongoCrypt.makeExplicitDecryptionContext(valueBuffer);\n    const stateMachine = new state_machine_1.StateMachine({\n      proxyOptions: this._proxyOptions,\n      tlsOptions: this._tlsOptions\n    });\n    const {\n      v\n    } = await stateMachine.execute(this, context);\n    return v;\n  }\n  /**\n   * @internal\n   * Ask the user for KMS credentials.\n   *\n   * This returns anything that looks like the kmsProviders original input\n   * option. It can be empty, and any provider specified here will override\n   * the original ones.\n   */\n  async askForKMSCredentials() {\n    return await (0, index_1.refreshKMSCredentials)(this._kmsProviders);\n  }\n  static get libmongocryptVersion() {\n    return ClientEncryption.getMongoCrypt().libmongocryptVersion;\n  }\n  /**\n   * @internal\n   * A helper that perform explicit encryption of values and expressions.\n   * Explicitly encrypt a provided value. Note that either `options.keyId` or `options.keyAltName` must\n   * be specified. Specifying both `options.keyId` and `options.keyAltName` is considered an error.\n   *\n   * @param value - The value that you wish to encrypt. Must be of a type that can be serialized into BSON\n   * @param expressionMode - a boolean that indicates whether or not to encrypt the value as an expression\n   * @param options - options to pass to encrypt\n   * @returns the raw result of the call to stateMachine.execute().  When expressionMode is set to true, the return\n   *          value will be a bson document.  When false, the value will be a BSON Binary.\n   *\n   */\n  async _encrypt(value, expressionMode, options) {\n    const {\n      algorithm,\n      keyId,\n      keyAltName,\n      contentionFactor,\n      queryType,\n      rangeOptions\n    } = options;\n    const contextOptions = {\n      expressionMode,\n      algorithm\n    };\n    if (keyId) {\n      contextOptions.keyId = keyId.buffer;\n    }\n    if (keyAltName) {\n      if (keyId) {\n        throw new errors_1.MongoCryptInvalidArgumentError(\"\\\"options\\\" cannot contain both \\\"keyId\\\" and \\\"keyAltName\\\"\");\n      }\n      if (typeof keyAltName !== 'string') {\n        throw new errors_1.MongoCryptInvalidArgumentError(\"\\\"options.keyAltName\\\" must be of type string, but was of type \".concat(typeof keyAltName));\n      }\n      contextOptions.keyAltName = (0, bson_1.serialize)({\n        keyAltName\n      });\n    }\n    if (typeof contentionFactor === 'number' || typeof contentionFactor === 'bigint') {\n      contextOptions.contentionFactor = contentionFactor;\n    }\n    if (typeof queryType === 'string') {\n      contextOptions.queryType = queryType;\n    }\n    if (typeof rangeOptions === 'object') {\n      contextOptions.rangeOptions = (0, bson_1.serialize)(rangeOptions);\n    }\n    const valueBuffer = (0, bson_1.serialize)({\n      v: value\n    });\n    const stateMachine = new state_machine_1.StateMachine({\n      proxyOptions: this._proxyOptions,\n      tlsOptions: this._tlsOptions\n    });\n    const context = this._mongoCrypt.makeExplicitEncryptionContext(valueBuffer, contextOptions);\n    const result = await stateMachine.execute(this, context);\n    return result.v;\n  }\n}\nexports.ClientEncryption = ClientEncryption;","map":{"version":3,"names":["bson_1","require","deps_1","utils_1","cryptoCallbacks","errors_1","index_1","state_machine_1","ClientEncryption","getMongoCrypt","encryption","getMongoDBClientEncryption","kModuleError","MongoCrypt","constructor","client","options","_options$proxyOptions","_options$tlsOptions","_client","_proxyOptions","proxyOptions","_tlsOptions","tlsOptions","_kmsProviders","kmsProviders","keyVaultNamespace","MongoCryptInvalidArgumentError","mongoCryptOptions","Buffer","isBuffer","serialize","_keyVaultNamespace","_keyVaultClient","keyVaultClient","_mongoCrypt","createDataKey","provider","arguments","length","undefined","keyAltNames","Array","isArray","concat","map","keyAltName","i","keyMaterial","dataKeyBson","masterKey","context","makeDataKeyContext","stateMachine","StateMachine","dataKey","execute","db","dbName","collection","collectionName","MongoDBCollectionNamespace","fromString","insertedId","insertOne","writeConcern","w","rewrapManyDataKey","filter","keyEncryptionKeyBson","keyEncryptionKey","Object","assign","filterBson","makeRewrapManyDataKeyContext","v","dataKeys","replacements","key","updateOne","_id","update","$set","$currentDate","updateDate","result","bulkWrite","bulkWriteResult","deleteKey","deleteOne","getKeys","find","readConcern","level","getKey","findOne","getKeyByAltName","addKeyAltName","value","findOneAndUpdate","$addToSet","returnDocument","removeKeyAltName","pipeline","$cond","$eq","$filter","input","cond","$ne","createEncryptedCollection","name","createCollectionOptions","encryptedFields","fields","createDataKeyPromises","field","keyId","createDataKeyResolutions","Promise","allSettled","resolution","index","status","rejection","MongoCryptCreateDataKeyError","cause","reason","createCollection","MongoCryptCreateEncryptedCollectionError","encrypt","_encrypt","encryptExpression","expression","decrypt","valueBuffer","makeExplicitDecryptionContext","askForKMSCredentials","refreshKMSCredentials","libmongocryptVersion","expressionMode","algorithm","contentionFactor","queryType","rangeOptions","contextOptions","buffer","makeExplicitEncryptionContext","exports"],"sources":["/Users/Regan/Documents/GitHub/BadBank/node_modules/mongodb/src/client-side-encryption/client_encryption.ts"],"sourcesContent":["import type {\n  ExplicitEncryptionContextOptions,\n  MongoCrypt,\n  MongoCryptConstructor,\n  MongoCryptOptions\n} from 'mongodb-client-encryption';\n\nimport { type Binary, type Document, type Long, serialize, type UUID } from '../bson';\nimport { type AnyBulkWriteOperation, type BulkWriteResult } from '../bulk/common';\nimport { type ProxyOptions } from '../cmap/connection';\nimport { type Collection } from '../collection';\nimport { type FindCursor } from '../cursor/find_cursor';\nimport { type Db } from '../db';\nimport { getMongoDBClientEncryption } from '../deps';\nimport { type MongoClient } from '../mongo_client';\nimport { type Filter, type WithId } from '../mongo_types';\nimport { type CreateCollectionOptions } from '../operations/create_collection';\nimport { type DeleteResult } from '../operations/delete';\nimport { MongoDBCollectionNamespace } from '../utils';\nimport * as cryptoCallbacks from './crypto_callbacks';\nimport {\n  MongoCryptCreateDataKeyError,\n  MongoCryptCreateEncryptedCollectionError,\n  MongoCryptInvalidArgumentError\n} from './errors';\nimport {\n  type ClientEncryptionDataKeyProvider,\n  type KMSProviders,\n  refreshKMSCredentials\n} from './providers/index';\nimport { type CSFLEKMSTlsOptions, StateMachine } from './state_machine';\n\n/**\n * @public\n * The schema for a DataKey in the key vault collection.\n */\nexport interface DataKey {\n  _id: UUID;\n  version?: number;\n  keyAltNames?: string[];\n  keyMaterial: Binary;\n  creationDate: Date;\n  updateDate: Date;\n  status: number;\n  masterKey: Document;\n}\n\n/**\n * @public\n * The public interface for explicit in-use encryption\n */\nexport class ClientEncryption {\n  /** @internal */\n  _client: MongoClient;\n  /** @internal */\n  _keyVaultNamespace: string;\n  /** @internal */\n  _keyVaultClient: MongoClient;\n  /** @internal */\n  _proxyOptions: ProxyOptions;\n  /** @internal */\n  _tlsOptions: CSFLEKMSTlsOptions;\n  /** @internal */\n  _kmsProviders: KMSProviders;\n\n  /** @internal */\n  _mongoCrypt: MongoCrypt;\n\n  /** @internal */\n  static getMongoCrypt(): MongoCryptConstructor {\n    const encryption = getMongoDBClientEncryption();\n    if ('kModuleError' in encryption) {\n      throw encryption.kModuleError;\n    }\n    return encryption.MongoCrypt;\n  }\n\n  /**\n   * Create a new encryption instance\n   *\n   * @example\n   * ```ts\n   * new ClientEncryption(mongoClient, {\n   *   keyVaultNamespace: 'client.encryption',\n   *   kmsProviders: {\n   *     local: {\n   *       key: masterKey // The master key used for encryption/decryption. A 96-byte long Buffer\n   *     }\n   *   }\n   * });\n   * ```\n   *\n   * @example\n   * ```ts\n   * new ClientEncryption(mongoClient, {\n   *   keyVaultNamespace: 'client.encryption',\n   *   kmsProviders: {\n   *     aws: {\n   *       accessKeyId: AWS_ACCESS_KEY,\n   *       secretAccessKey: AWS_SECRET_KEY\n   *     }\n   *   }\n   * });\n   * ```\n   */\n  constructor(client: MongoClient, options: ClientEncryptionOptions) {\n    this._client = client;\n    this._proxyOptions = options.proxyOptions ?? {};\n    this._tlsOptions = options.tlsOptions ?? {};\n    this._kmsProviders = options.kmsProviders || {};\n\n    if (options.keyVaultNamespace == null) {\n      throw new MongoCryptInvalidArgumentError('Missing required option `keyVaultNamespace`');\n    }\n\n    const mongoCryptOptions: MongoCryptOptions = {\n      ...options,\n      cryptoCallbacks,\n      kmsProviders: !Buffer.isBuffer(this._kmsProviders)\n        ? (serialize(this._kmsProviders) as Buffer)\n        : this._kmsProviders\n    };\n\n    this._keyVaultNamespace = options.keyVaultNamespace;\n    this._keyVaultClient = options.keyVaultClient || client;\n    const MongoCrypt = ClientEncryption.getMongoCrypt();\n    this._mongoCrypt = new MongoCrypt(mongoCryptOptions);\n  }\n\n  /**\n   * Creates a data key used for explicit encryption and inserts it into the key vault namespace\n   *\n   * @example\n   * ```ts\n   * // Using async/await to create a local key\n   * const dataKeyId = await clientEncryption.createDataKey('local');\n   * ```\n   *\n   * @example\n   * ```ts\n   * // Using async/await to create an aws key\n   * const dataKeyId = await clientEncryption.createDataKey('aws', {\n   *   masterKey: {\n   *     region: 'us-east-1',\n   *     key: 'xxxxxxxxxxxxxx' // CMK ARN here\n   *   }\n   * });\n   * ```\n   *\n   * @example\n   * ```ts\n   * // Using async/await to create an aws key with a keyAltName\n   * const dataKeyId = await clientEncryption.createDataKey('aws', {\n   *   masterKey: {\n   *     region: 'us-east-1',\n   *     key: 'xxxxxxxxxxxxxx' // CMK ARN here\n   *   },\n   *   keyAltNames: [ 'mySpecialKey' ]\n   * });\n   * ```\n   */\n  async createDataKey(\n    provider: ClientEncryptionDataKeyProvider,\n    options: ClientEncryptionCreateDataKeyProviderOptions = {}\n  ): Promise<UUID> {\n    if (options.keyAltNames && !Array.isArray(options.keyAltNames)) {\n      throw new MongoCryptInvalidArgumentError(\n        `Option \"keyAltNames\" must be an array of strings, but was of type ${typeof options.keyAltNames}.`\n      );\n    }\n\n    let keyAltNames = undefined;\n    if (options.keyAltNames && options.keyAltNames.length > 0) {\n      keyAltNames = options.keyAltNames.map((keyAltName, i) => {\n        if (typeof keyAltName !== 'string') {\n          throw new MongoCryptInvalidArgumentError(\n            `Option \"keyAltNames\" must be an array of strings, but item at index ${i} was of type ${typeof keyAltName}`\n          );\n        }\n\n        return serialize({ keyAltName });\n      });\n    }\n\n    let keyMaterial = undefined;\n    if (options.keyMaterial) {\n      keyMaterial = serialize({ keyMaterial: options.keyMaterial });\n    }\n\n    const dataKeyBson = serialize({\n      provider,\n      ...options.masterKey\n    });\n\n    const context = this._mongoCrypt.makeDataKeyContext(dataKeyBson, {\n      keyAltNames,\n      keyMaterial\n    });\n\n    const stateMachine = new StateMachine({\n      proxyOptions: this._proxyOptions,\n      tlsOptions: this._tlsOptions\n    });\n\n    const dataKey = await stateMachine.execute<DataKey>(this, context);\n\n    const { db: dbName, collection: collectionName } = MongoDBCollectionNamespace.fromString(\n      this._keyVaultNamespace\n    );\n\n    const { insertedId } = await this._keyVaultClient\n      .db(dbName)\n      .collection<DataKey>(collectionName)\n      .insertOne(dataKey, { writeConcern: { w: 'majority' } });\n\n    return insertedId;\n  }\n\n  /**\n   * Searches the keyvault for any data keys matching the provided filter.  If there are matches, rewrapManyDataKey then attempts to re-wrap the data keys using the provided options.\n   *\n   * If no matches are found, then no bulk write is performed.\n   *\n   * @example\n   * ```ts\n   * // rewrapping all data data keys (using a filter that matches all documents)\n   * const filter = {};\n   *\n   * const result = await clientEncryption.rewrapManyDataKey(filter);\n   * if (result.bulkWriteResult != null) {\n   *  // keys were re-wrapped, results will be available in the bulkWrite object.\n   * }\n   * ```\n   *\n   * @example\n   * ```ts\n   * // attempting to rewrap all data keys with no matches\n   * const filter = { _id: new Binary() } // assume _id matches no documents in the database\n   * const result = await clientEncryption.rewrapManyDataKey(filter);\n   *\n   * if (result.bulkWriteResult == null) {\n   *  // no keys matched, `bulkWriteResult` does not exist on the result object\n   * }\n   * ```\n   */\n  async rewrapManyDataKey(\n    filter: Filter<DataKey>,\n    options: ClientEncryptionRewrapManyDataKeyProviderOptions\n  ): Promise<{ bulkWriteResult?: BulkWriteResult }> {\n    let keyEncryptionKeyBson = undefined;\n    if (options) {\n      const keyEncryptionKey = Object.assign({ provider: options.provider }, options.masterKey);\n      keyEncryptionKeyBson = serialize(keyEncryptionKey);\n    }\n    const filterBson = serialize(filter);\n    const context = this._mongoCrypt.makeRewrapManyDataKeyContext(filterBson, keyEncryptionKeyBson);\n    const stateMachine = new StateMachine({\n      proxyOptions: this._proxyOptions,\n      tlsOptions: this._tlsOptions\n    });\n\n    const { v: dataKeys } = await stateMachine.execute<{ v: DataKey[] }>(this, context);\n    if (dataKeys.length === 0) {\n      return {};\n    }\n\n    const { db: dbName, collection: collectionName } = MongoDBCollectionNamespace.fromString(\n      this._keyVaultNamespace\n    );\n\n    const replacements = dataKeys.map(\n      (key: DataKey): AnyBulkWriteOperation<DataKey> => ({\n        updateOne: {\n          filter: { _id: key._id },\n          update: {\n            $set: {\n              masterKey: key.masterKey,\n              keyMaterial: key.keyMaterial\n            },\n            $currentDate: {\n              updateDate: true\n            }\n          }\n        }\n      })\n    );\n\n    const result = await this._keyVaultClient\n      .db(dbName)\n      .collection<DataKey>(collectionName)\n      .bulkWrite(replacements, {\n        writeConcern: { w: 'majority' }\n      });\n\n    return { bulkWriteResult: result };\n  }\n\n  /**\n   * Deletes the key with the provided id from the keyvault, if it exists.\n   *\n   * @example\n   * ```ts\n   * // delete a key by _id\n   * const id = new Binary(); // id is a bson binary subtype 4 object\n   * const { deletedCount } = await clientEncryption.deleteKey(id);\n   *\n   * if (deletedCount != null && deletedCount > 0) {\n   *   // successful deletion\n   * }\n   * ```\n   *\n   */\n  async deleteKey(_id: Binary): Promise<DeleteResult> {\n    const { db: dbName, collection: collectionName } = MongoDBCollectionNamespace.fromString(\n      this._keyVaultNamespace\n    );\n\n    return await this._keyVaultClient\n      .db(dbName)\n      .collection<DataKey>(collectionName)\n      .deleteOne({ _id }, { writeConcern: { w: 'majority' } });\n  }\n\n  /**\n   * Finds all the keys currently stored in the keyvault.\n   *\n   * This method will not throw.\n   *\n   * @returns a FindCursor over all keys in the keyvault.\n   * @example\n   * ```ts\n   * // fetching all keys\n   * const keys = await clientEncryption.getKeys().toArray();\n   * ```\n   */\n  getKeys(): FindCursor<DataKey> {\n    const { db: dbName, collection: collectionName } = MongoDBCollectionNamespace.fromString(\n      this._keyVaultNamespace\n    );\n\n    return this._keyVaultClient\n      .db(dbName)\n      .collection<DataKey>(collectionName)\n      .find({}, { readConcern: { level: 'majority' } });\n  }\n\n  /**\n   * Finds a key in the keyvault with the specified _id.\n   *\n   * Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n   * match the id.  The promise rejects with an error if an error is thrown.\n   * @example\n   * ```ts\n   * // getting a key by id\n   * const id = new Binary(); // id is a bson binary subtype 4 object\n   * const key = await clientEncryption.getKey(id);\n   * if (!key) {\n   *  // key is null if there was no matching key\n   * }\n   * ```\n   */\n  async getKey(_id: Binary): Promise<DataKey | null> {\n    const { db: dbName, collection: collectionName } = MongoDBCollectionNamespace.fromString(\n      this._keyVaultNamespace\n    );\n\n    return await this._keyVaultClient\n      .db(dbName)\n      .collection<DataKey>(collectionName)\n      .findOne({ _id }, { readConcern: { level: 'majority' } });\n  }\n\n  /**\n   * Finds a key in the keyvault which has the specified keyAltName.\n   *\n   * @param keyAltName - a keyAltName to search for a key\n   * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n   * match the keyAltName.  The promise rejects with an error if an error is thrown.\n   * @example\n   * ```ts\n   * // get a key by alt name\n   * const keyAltName = 'keyAltName';\n   * const key = await clientEncryption.getKeyByAltName(keyAltName);\n   * if (!key) {\n   *  // key is null if there is no matching key\n   * }\n   * ```\n   */\n  async getKeyByAltName(keyAltName: string): Promise<WithId<DataKey> | null> {\n    const { db: dbName, collection: collectionName } = MongoDBCollectionNamespace.fromString(\n      this._keyVaultNamespace\n    );\n\n    return await this._keyVaultClient\n      .db(dbName)\n      .collection<DataKey>(collectionName)\n      .findOne({ keyAltNames: keyAltName }, { readConcern: { level: 'majority' } });\n  }\n\n  /**\n   * Adds a keyAltName to a key identified by the provided _id.\n   *\n   * This method resolves to/returns the *old* key value (prior to adding the new altKeyName).\n   *\n   * @param _id - The id of the document to update.\n   * @param keyAltName - a keyAltName to search for a key\n   * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n   * match the id.  The promise rejects with an error if an error is thrown.\n   * @example\n   * ```ts\n   * // adding an keyAltName to a data key\n   * const id = new Binary();  // id is a bson binary subtype 4 object\n   * const keyAltName = 'keyAltName';\n   * const oldKey = await clientEncryption.addKeyAltName(id, keyAltName);\n   * if (!oldKey) {\n   *  // null is returned if there is no matching document with an id matching the supplied id\n   * }\n   * ```\n   */\n  async addKeyAltName(_id: Binary, keyAltName: string): Promise<WithId<DataKey> | null> {\n    const { db: dbName, collection: collectionName } = MongoDBCollectionNamespace.fromString(\n      this._keyVaultNamespace\n    );\n\n    const value = await this._keyVaultClient\n      .db(dbName)\n      .collection<DataKey>(collectionName)\n      .findOneAndUpdate(\n        { _id },\n        { $addToSet: { keyAltNames: keyAltName } },\n        { writeConcern: { w: 'majority' }, returnDocument: 'before' }\n      );\n\n    return value;\n  }\n\n  /**\n   * Adds a keyAltName to a key identified by the provided _id.\n   *\n   * This method resolves to/returns the *old* key value (prior to removing the new altKeyName).\n   *\n   * If the removed keyAltName is the last keyAltName for that key, the `altKeyNames` property is unset from the document.\n   *\n   * @param _id - The id of the document to update.\n   * @param keyAltName - a keyAltName to search for a key\n   * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n   * match the id.  The promise rejects with an error if an error is thrown.\n   * @example\n   * ```ts\n   * // removing a key alt name from a data key\n   * const id = new Binary();  // id is a bson binary subtype 4 object\n   * const keyAltName = 'keyAltName';\n   * const oldKey = await clientEncryption.removeKeyAltName(id, keyAltName);\n   *\n   * if (!oldKey) {\n   *  // null is returned if there is no matching document with an id matching the supplied id\n   * }\n   * ```\n   */\n  async removeKeyAltName(_id: Binary, keyAltName: string): Promise<WithId<DataKey> | null> {\n    const { db: dbName, collection: collectionName } = MongoDBCollectionNamespace.fromString(\n      this._keyVaultNamespace\n    );\n\n    const pipeline = [\n      {\n        $set: {\n          keyAltNames: {\n            $cond: [\n              {\n                $eq: ['$keyAltNames', [keyAltName]]\n              },\n              '$$REMOVE',\n              {\n                $filter: {\n                  input: '$keyAltNames',\n                  cond: {\n                    $ne: ['$$this', keyAltName]\n                  }\n                }\n              }\n            ]\n          }\n        }\n      }\n    ];\n    const value = await this._keyVaultClient\n      .db(dbName)\n      .collection<DataKey>(collectionName)\n      .findOneAndUpdate({ _id }, pipeline, {\n        writeConcern: { w: 'majority' },\n        returnDocument: 'before'\n      });\n\n    return value;\n  }\n\n  /**\n   * A convenience method for creating an encrypted collection.\n   * This method will create data keys for any encryptedFields that do not have a `keyId` defined\n   * and then create a new collection with the full set of encryptedFields.\n   *\n   * @param db - A Node.js driver Db object with which to create the collection\n   * @param name - The name of the collection to be created\n   * @param options - Options for createDataKey and for createCollection\n   * @returns created collection and generated encryptedFields\n   * @throws MongoCryptCreateDataKeyError - If part way through the process a createDataKey invocation fails, an error will be rejected that has the partial `encryptedFields` that were created.\n   * @throws MongoCryptCreateEncryptedCollectionError - If creating the collection fails, an error will be rejected that has the entire `encryptedFields` that were created.\n   */\n  async createEncryptedCollection<TSchema extends Document = Document>(\n    db: Db,\n    name: string,\n    options: {\n      provider: ClientEncryptionDataKeyProvider;\n      createCollectionOptions: Omit<CreateCollectionOptions, 'encryptedFields'> & {\n        encryptedFields: Document;\n      };\n      masterKey?: AWSEncryptionKeyOptions | AzureEncryptionKeyOptions | GCPEncryptionKeyOptions;\n    }\n  ): Promise<{ collection: Collection<TSchema>; encryptedFields: Document }> {\n    const {\n      provider,\n      masterKey,\n      createCollectionOptions: {\n        encryptedFields: { ...encryptedFields },\n        ...createCollectionOptions\n      }\n    } = options;\n\n    if (Array.isArray(encryptedFields.fields)) {\n      const createDataKeyPromises = encryptedFields.fields.map(async field =>\n        field == null || typeof field !== 'object' || field.keyId != null\n          ? field\n          : {\n              ...field,\n              keyId: await this.createDataKey(provider, { masterKey })\n            }\n      );\n\n      const createDataKeyResolutions = await Promise.allSettled(createDataKeyPromises);\n\n      encryptedFields.fields = createDataKeyResolutions.map((resolution, index) =>\n        resolution.status === 'fulfilled' ? resolution.value : encryptedFields.fields[index]\n      );\n\n      const rejection = createDataKeyResolutions.find(\n        (result): result is PromiseRejectedResult => result.status === 'rejected'\n      );\n      if (rejection != null) {\n        throw new MongoCryptCreateDataKeyError(encryptedFields, { cause: rejection.reason });\n      }\n    }\n\n    try {\n      const collection = await db.createCollection<TSchema>(name, {\n        ...createCollectionOptions,\n        encryptedFields\n      });\n      return { collection, encryptedFields };\n    } catch (cause) {\n      throw new MongoCryptCreateEncryptedCollectionError(encryptedFields, { cause });\n    }\n  }\n\n  /**\n   * Explicitly encrypt a provided value. Note that either `options.keyId` or `options.keyAltName` must\n   * be specified. Specifying both `options.keyId` and `options.keyAltName` is considered an error.\n   *\n   * @param value - The value that you wish to serialize. Must be of a type that can be serialized into BSON\n   * @param options -\n   * @returns a Promise that either resolves with the encrypted value, or rejects with an error.\n   *\n   * @example\n   * ```ts\n   * // Encryption with async/await api\n   * async function encryptMyData(value) {\n   *   const keyId = await clientEncryption.createDataKey('local');\n   *   return clientEncryption.encrypt(value, { keyId, algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });\n   * }\n   * ```\n   *\n   * @example\n   * ```ts\n   * // Encryption using a keyAltName\n   * async function encryptMyData(value) {\n   *   await clientEncryption.createDataKey('local', { keyAltNames: 'mySpecialKey' });\n   *   return clientEncryption.encrypt(value, { keyAltName: 'mySpecialKey', algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });\n   * }\n   * ```\n   */\n  async encrypt(value: unknown, options: ClientEncryptionEncryptOptions): Promise<Binary> {\n    return await this._encrypt(value, false, options);\n  }\n\n  /**\n   * Encrypts a Match Expression or Aggregate Expression to query a range index.\n   *\n   * Only supported when queryType is \"rangePreview\" and algorithm is \"RangePreview\".\n   *\n   * @experimental The Range algorithm is experimental only. It is not intended for production use. It is subject to breaking changes.\n   *\n   * @param expression - a BSON document of one of the following forms:\n   *  1. A Match Expression of this form:\n   *      `{$and: [{<field>: {$gt: <value1>}}, {<field>: {$lt: <value2> }}]}`\n   *  2. An Aggregate Expression of this form:\n   *      `{$and: [{$gt: [<fieldpath>, <value1>]}, {$lt: [<fieldpath>, <value2>]}]}`\n   *\n   *    `$gt` may also be `$gte`. `$lt` may also be `$lte`.\n   *\n   * @param options -\n   * @returns Returns a Promise that either resolves with the encrypted value or rejects with an error.\n   */\n  async encryptExpression(\n    expression: Document,\n    options: ClientEncryptionEncryptOptions\n  ): Promise<Binary> {\n    return await this._encrypt(expression, true, options);\n  }\n\n  /**\n   * Explicitly decrypt a provided encrypted value\n   *\n   * @param value - An encrypted value\n   * @returns a Promise that either resolves with the decrypted value, or rejects with an error\n   *\n   * @example\n   * ```ts\n   * // Decrypting value with async/await API\n   * async function decryptMyValue(value) {\n   *   return clientEncryption.decrypt(value);\n   * }\n   * ```\n   */\n  async decrypt<T = any>(value: Binary): Promise<T> {\n    const valueBuffer = serialize({ v: value });\n    const context = this._mongoCrypt.makeExplicitDecryptionContext(valueBuffer);\n\n    const stateMachine = new StateMachine({\n      proxyOptions: this._proxyOptions,\n      tlsOptions: this._tlsOptions\n    });\n\n    const { v } = await stateMachine.execute<{ v: T }>(this, context);\n\n    return v;\n  }\n\n  /**\n   * @internal\n   * Ask the user for KMS credentials.\n   *\n   * This returns anything that looks like the kmsProviders original input\n   * option. It can be empty, and any provider specified here will override\n   * the original ones.\n   */\n  async askForKMSCredentials(): Promise<KMSProviders> {\n    return await refreshKMSCredentials(this._kmsProviders);\n  }\n\n  static get libmongocryptVersion() {\n    return ClientEncryption.getMongoCrypt().libmongocryptVersion;\n  }\n\n  /**\n   * @internal\n   * A helper that perform explicit encryption of values and expressions.\n   * Explicitly encrypt a provided value. Note that either `options.keyId` or `options.keyAltName` must\n   * be specified. Specifying both `options.keyId` and `options.keyAltName` is considered an error.\n   *\n   * @param value - The value that you wish to encrypt. Must be of a type that can be serialized into BSON\n   * @param expressionMode - a boolean that indicates whether or not to encrypt the value as an expression\n   * @param options - options to pass to encrypt\n   * @returns the raw result of the call to stateMachine.execute().  When expressionMode is set to true, the return\n   *          value will be a bson document.  When false, the value will be a BSON Binary.\n   *\n   */\n  private async _encrypt(\n    value: unknown,\n    expressionMode: boolean,\n    options: ClientEncryptionEncryptOptions\n  ): Promise<Binary> {\n    const { algorithm, keyId, keyAltName, contentionFactor, queryType, rangeOptions } = options;\n    const contextOptions: ExplicitEncryptionContextOptions = {\n      expressionMode,\n      algorithm\n    };\n    if (keyId) {\n      contextOptions.keyId = keyId.buffer;\n    }\n    if (keyAltName) {\n      if (keyId) {\n        throw new MongoCryptInvalidArgumentError(\n          `\"options\" cannot contain both \"keyId\" and \"keyAltName\"`\n        );\n      }\n      if (typeof keyAltName !== 'string') {\n        throw new MongoCryptInvalidArgumentError(\n          `\"options.keyAltName\" must be of type string, but was of type ${typeof keyAltName}`\n        );\n      }\n\n      contextOptions.keyAltName = serialize({ keyAltName });\n    }\n    if (typeof contentionFactor === 'number' || typeof contentionFactor === 'bigint') {\n      contextOptions.contentionFactor = contentionFactor;\n    }\n    if (typeof queryType === 'string') {\n      contextOptions.queryType = queryType;\n    }\n\n    if (typeof rangeOptions === 'object') {\n      contextOptions.rangeOptions = serialize(rangeOptions);\n    }\n\n    const valueBuffer = serialize({ v: value });\n    const stateMachine = new StateMachine({\n      proxyOptions: this._proxyOptions,\n      tlsOptions: this._tlsOptions\n    });\n    const context = this._mongoCrypt.makeExplicitEncryptionContext(valueBuffer, contextOptions);\n\n    const result = await stateMachine.execute<{ v: Binary }>(this, context);\n    return result.v;\n  }\n}\n\n/**\n * @public\n * Options to provide when encrypting data.\n */\nexport interface ClientEncryptionEncryptOptions {\n  /**\n   * The algorithm to use for encryption.\n   */\n  algorithm:\n    | 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic'\n    | 'AEAD_AES_256_CBC_HMAC_SHA_512-Random'\n    | 'Indexed'\n    | 'Unindexed'\n    | 'RangePreview';\n\n  /**\n   * The id of the Binary dataKey to use for encryption\n   */\n  keyId?: Binary;\n\n  /**\n   * A unique string name corresponding to an already existing dataKey.\n   */\n  keyAltName?: string;\n\n  /** The contention factor. */\n  contentionFactor?: bigint | number;\n\n  /**\n   * The query type supported.  Only the queryType `equality` is stable.\n   *\n   * @experimental Public Technical Preview: The queryType `rangePreview` is experimental.\n   */\n  queryType?: 'equality' | 'rangePreview';\n\n  /** @experimental Public Technical Preview: The index options for a Queryable Encryption field supporting \"rangePreview\" queries.*/\n  rangeOptions?: RangeOptions;\n}\n\n/**\n * @public\n * @experimental\n */\nexport interface ClientEncryptionRewrapManyDataKeyProviderOptions {\n  provider: ClientEncryptionDataKeyProvider;\n  masterKey?:\n    | AWSEncryptionKeyOptions\n    | AzureEncryptionKeyOptions\n    | GCPEncryptionKeyOptions\n    | undefined;\n}\n\n/**\n * @public\n * Additional settings to provide when creating a new `ClientEncryption` instance.\n */\nexport interface ClientEncryptionOptions {\n  /**\n   * The namespace of the key vault, used to store encryption keys\n   */\n  keyVaultNamespace: string;\n\n  /**\n   * A MongoClient used to fetch keys from a key vault. Defaults to client.\n   */\n  keyVaultClient?: MongoClient | undefined;\n\n  /**\n   * Options for specific KMS providers to use\n   */\n  kmsProviders?: KMSProviders;\n\n  /**\n   * Options for specifying a Socks5 proxy to use for connecting to the KMS.\n   */\n  proxyOptions?: ProxyOptions;\n\n  /**\n   * TLS options for kms providers to use.\n   */\n  tlsOptions?: CSFLEKMSTlsOptions;\n}\n\n/**\n * @public\n * Configuration options for making an AWS encryption key\n */\nexport interface AWSEncryptionKeyOptions {\n  /**\n   * The AWS region of the KMS\n   */\n  region: string;\n\n  /**\n   * The Amazon Resource Name (ARN) to the AWS customer master key (CMK)\n   */\n  key: string;\n\n  /**\n   * An alternate host to send KMS requests to. May include port number.\n   */\n  endpoint?: string | undefined;\n}\n\n/**\n * @public\n * Configuration options for making an AWS encryption key\n */\nexport interface GCPEncryptionKeyOptions {\n  /**\n   * GCP project ID\n   */\n  projectId: string;\n\n  /**\n   * Location name (e.g. \"global\")\n   */\n  location: string;\n\n  /**\n   * Key ring name\n   */\n  keyRing: string;\n\n  /**\n   * Key name\n   */\n  keyName: string;\n\n  /**\n   * Key version\n   */\n  keyVersion?: string | undefined;\n\n  /**\n   * KMS URL, defaults to `https://www.googleapis.com/auth/cloudkms`\n   */\n  endpoint?: string | undefined;\n}\n\n/**\n * @public\n * Configuration options for making an Azure encryption key\n */\nexport interface AzureEncryptionKeyOptions {\n  /**\n   * Key name\n   */\n  keyName: string;\n\n  /**\n   * Key vault URL, typically `<name>.vault.azure.net`\n   */\n  keyVaultEndpoint: string;\n\n  /**\n   * Key version\n   */\n  keyVersion?: string | undefined;\n}\n\n/**\n * @public\n * Options to provide when creating a new data key.\n */\nexport interface ClientEncryptionCreateDataKeyProviderOptions {\n  /**\n   * Identifies a new KMS-specific key used to encrypt the new data key\n   */\n  masterKey?:\n    | AWSEncryptionKeyOptions\n    | AzureEncryptionKeyOptions\n    | GCPEncryptionKeyOptions\n    | undefined;\n\n  /**\n   * An optional list of string alternate names used to reference a key.\n   * If a key is created with alternate names, then encryption may refer to the key by the unique alternate name instead of by _id.\n   */\n  keyAltNames?: string[] | undefined;\n\n  /** @experimental */\n  keyMaterial?: Buffer | Binary;\n}\n\n/**\n * @public\n * @experimental\n */\nexport interface ClientEncryptionRewrapManyDataKeyProviderOptions {\n  provider: ClientEncryptionDataKeyProvider;\n  masterKey?:\n    | AWSEncryptionKeyOptions\n    | AzureEncryptionKeyOptions\n    | GCPEncryptionKeyOptions\n    | undefined;\n}\n\n/**\n * @public\n * @experimental\n */\nexport interface ClientEncryptionRewrapManyDataKeyResult {\n  /** The result of rewrapping data keys. If unset, no keys matched the filter. */\n  bulkWriteResult?: BulkWriteResult;\n}\n\n/**\n * @public\n * RangeOptions specifies index options for a Queryable Encryption field supporting \"rangePreview\" queries.\n * min, max, sparsity, and range must match the values set in the encryptedFields of the destination collection.\n * For double and decimal128, min/max/precision must all be set, or all be unset.\n */\nexport interface RangeOptions {\n  min?: any;\n  max?: any;\n  sparsity: Long;\n  precision?: number;\n}\n\n/**\n * @public\n * Options to provide when encrypting data.\n */\nexport interface ClientEncryptionEncryptOptions {\n  /**\n   * The algorithm to use for encryption.\n   */\n  algorithm:\n    | 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic'\n    | 'AEAD_AES_256_CBC_HMAC_SHA_512-Random'\n    | 'Indexed'\n    | 'Unindexed'\n    | 'RangePreview';\n\n  /**\n   * The id of the Binary dataKey to use for encryption\n   */\n  keyId?: Binary;\n\n  /**\n   * A unique string name corresponding to an already existing dataKey.\n   */\n  keyAltName?: string;\n\n  /** The contention factor. */\n  contentionFactor?: bigint | number;\n\n  /**\n   * The query type supported.  Only the queryType `equality` is stable.\n   *\n   * @experimental Public Technical Preview: The queryType `rangePreview` is experimental.\n   */\n  queryType?: 'equality' | 'rangePreview';\n\n  /** @experimental Public Technical Preview: The index options for a Queryable Encryption field supporting \"rangePreview\" queries.*/\n  rangeOptions?: RangeOptions;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}