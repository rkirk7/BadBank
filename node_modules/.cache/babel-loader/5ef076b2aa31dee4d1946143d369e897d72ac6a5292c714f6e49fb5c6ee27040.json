{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReadPreference = exports.ReadPreferenceMode = void 0;\nconst error_1 = require(\"./error\");\n/** @public */\nexports.ReadPreferenceMode = Object.freeze({\n  primary: 'primary',\n  primaryPreferred: 'primaryPreferred',\n  secondary: 'secondary',\n  secondaryPreferred: 'secondaryPreferred',\n  nearest: 'nearest'\n});\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/core/read-preference/\n */\nclass ReadPreference {\n  /**\n   * @param mode - A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n   * @param tags - A tag set used to target reads to members with the specified tag(s). tagSet is not available if using read preference mode primary.\n   * @param options - Additional read preference options\n   */\n  constructor(mode, tags, options) {\n    var _options, _options2;\n    if (!ReadPreference.isValid(mode)) {\n      throw new error_1.MongoInvalidArgumentError(\"Invalid read preference mode \".concat(JSON.stringify(mode)));\n    }\n    if (options == null && typeof tags === 'object' && !Array.isArray(tags)) {\n      options = tags;\n      tags = undefined;\n    } else if (tags && !Array.isArray(tags)) {\n      throw new error_1.MongoInvalidArgumentError('ReadPreference tags must be an array');\n    }\n    this.mode = mode;\n    this.tags = tags;\n    this.hedge = (_options = options) === null || _options === void 0 ? void 0 : _options.hedge;\n    this.maxStalenessSeconds = undefined;\n    this.minWireVersion = undefined;\n    options = (_options2 = options) !== null && _options2 !== void 0 ? _options2 : {};\n    if (options.maxStalenessSeconds != null) {\n      if (options.maxStalenessSeconds <= 0) {\n        throw new error_1.MongoInvalidArgumentError('maxStalenessSeconds must be a positive integer');\n      }\n      this.maxStalenessSeconds = options.maxStalenessSeconds;\n      // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n      //       topology has a lower value then a MongoError will be thrown during server selection.\n      this.minWireVersion = 5;\n    }\n    if (this.mode === ReadPreference.PRIMARY) {\n      if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n        throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with tags');\n      }\n      if (this.maxStalenessSeconds) {\n        throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with maxStalenessSeconds');\n      }\n      if (this.hedge) {\n        throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with hedge');\n      }\n    }\n  }\n  // Support the deprecated `preference` property introduced in the porcelain layer\n  get preference() {\n    return this.mode;\n  }\n  static fromString(mode) {\n    return new ReadPreference(mode);\n  }\n  /**\n   * Construct a ReadPreference given an options object.\n   *\n   * @param options - The options object from which to extract the read preference.\n   */\n  static fromOptions(options) {\n    var _options$readPreferen, _options$session;\n    if (!options) return;\n    const readPreference = (_options$readPreferen = options.readPreference) !== null && _options$readPreferen !== void 0 ? _options$readPreferen : (_options$session = options.session) === null || _options$session === void 0 ? void 0 : _options$session.transaction.options.readPreference;\n    const readPreferenceTags = options.readPreferenceTags;\n    if (readPreference == null) {\n      return;\n    }\n    if (typeof readPreference === 'string') {\n      return new ReadPreference(readPreference, readPreferenceTags, {\n        maxStalenessSeconds: options.maxStalenessSeconds,\n        hedge: options.hedge\n      });\n    } else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n      const mode = readPreference.mode || readPreference.preference;\n      if (mode && typeof mode === 'string') {\n        var _readPreference$tags;\n        return new ReadPreference(mode, (_readPreference$tags = readPreference.tags) !== null && _readPreference$tags !== void 0 ? _readPreference$tags : readPreferenceTags, {\n          maxStalenessSeconds: readPreference.maxStalenessSeconds,\n          hedge: options.hedge\n        });\n      }\n    }\n    if (readPreferenceTags) {\n      readPreference.tags = readPreferenceTags;\n    }\n    return readPreference;\n  }\n  /**\n   * Replaces options.readPreference with a ReadPreference instance\n   */\n  static translate(options) {\n    if (options.readPreference == null) return options;\n    const r = options.readPreference;\n    if (typeof r === 'string') {\n      options.readPreference = new ReadPreference(r);\n    } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n      const mode = r.mode || r.preference;\n      if (mode && typeof mode === 'string') {\n        options.readPreference = new ReadPreference(mode, r.tags, {\n          maxStalenessSeconds: r.maxStalenessSeconds\n        });\n      }\n    } else if (!(r instanceof ReadPreference)) {\n      throw new error_1.MongoInvalidArgumentError(\"Invalid read preference: \".concat(r));\n    }\n    return options;\n  }\n  /**\n   * Validate if a mode is legal\n   *\n   * @param mode - The string representing the read preference mode.\n   */\n  static isValid(mode) {\n    const VALID_MODES = new Set([ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST, null]);\n    return VALID_MODES.has(mode);\n  }\n  /**\n   * Validate if a mode is legal\n   *\n   * @param mode - The string representing the read preference mode.\n   */\n  isValid(mode) {\n    return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n  }\n  /**\n   * Indicates that this readPreference needs the \"SecondaryOk\" bit when sent over the wire\n   * @see https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#op-query\n   */\n  secondaryOk() {\n    const NEEDS_SECONDARYOK = new Set([ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST]);\n    return NEEDS_SECONDARYOK.has(this.mode);\n  }\n  /**\n   * Check if the two ReadPreferences are equivalent\n   *\n   * @param readPreference - The read preference with which to check equality\n   */\n  equals(readPreference) {\n    return readPreference.mode === this.mode;\n  }\n  /** Return JSON representation */\n  toJSON() {\n    const readPreference = {\n      mode: this.mode\n    };\n    if (Array.isArray(this.tags)) readPreference.tags = this.tags;\n    if (this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n    if (this.hedge) readPreference.hedge = this.hedge;\n    return readPreference;\n  }\n}\nReadPreference.PRIMARY = exports.ReadPreferenceMode.primary;\nReadPreference.PRIMARY_PREFERRED = exports.ReadPreferenceMode.primaryPreferred;\nReadPreference.SECONDARY = exports.ReadPreferenceMode.secondary;\nReadPreference.SECONDARY_PREFERRED = exports.ReadPreferenceMode.secondaryPreferred;\nReadPreference.NEAREST = exports.ReadPreferenceMode.nearest;\nReadPreference.primary = new ReadPreference(exports.ReadPreferenceMode.primary);\nReadPreference.primaryPreferred = new ReadPreference(exports.ReadPreferenceMode.primaryPreferred);\nReadPreference.secondary = new ReadPreference(exports.ReadPreferenceMode.secondary);\nReadPreference.secondaryPreferred = new ReadPreference(exports.ReadPreferenceMode.secondaryPreferred);\nReadPreference.nearest = new ReadPreference(exports.ReadPreferenceMode.nearest);\nexports.ReadPreference = ReadPreference;","map":{"version":3,"names":["error_1","require","exports","ReadPreferenceMode","Object","freeze","primary","primaryPreferred","secondary","secondaryPreferred","nearest","ReadPreference","constructor","mode","tags","options","_options","_options2","isValid","MongoInvalidArgumentError","concat","JSON","stringify","Array","isArray","undefined","hedge","maxStalenessSeconds","minWireVersion","PRIMARY","length","preference","fromString","fromOptions","_options$readPreferen","_options$session","readPreference","session","transaction","readPreferenceTags","_readPreference$tags","translate","r","VALID_MODES","Set","PRIMARY_PREFERRED","SECONDARY","SECONDARY_PREFERRED","NEAREST","has","secondaryOk","NEEDS_SECONDARYOK","equals","toJSON"],"sources":["/Users/Regan/Documents/GitHub/BadBank/node_modules/mongodb/src/read_preference.ts"],"sourcesContent":["import type { Document } from './bson';\nimport { MongoInvalidArgumentError } from './error';\nimport type { TagSet } from './sdam/server_description';\nimport type { ClientSession } from './sessions';\n\n/** @public */\nexport type ReadPreferenceLike = ReadPreference | ReadPreferenceMode;\n\n/** @public */\nexport const ReadPreferenceMode = Object.freeze({\n  primary: 'primary',\n  primaryPreferred: 'primaryPreferred',\n  secondary: 'secondary',\n  secondaryPreferred: 'secondaryPreferred',\n  nearest: 'nearest'\n} as const);\n\n/** @public */\nexport type ReadPreferenceMode = (typeof ReadPreferenceMode)[keyof typeof ReadPreferenceMode];\n\n/** @public */\nexport interface HedgeOptions {\n  /** Explicitly enable or disable hedged reads. */\n  enabled?: boolean;\n}\n\n/** @public */\nexport interface ReadPreferenceOptions {\n  /** Max secondary read staleness in seconds, Minimum value is 90 seconds.*/\n  maxStalenessSeconds?: number;\n  /** Server mode in which the same query is dispatched in parallel to multiple replica set members. */\n  hedge?: HedgeOptions;\n}\n\n/** @public */\nexport interface ReadPreferenceLikeOptions extends ReadPreferenceOptions {\n  readPreference?:\n    | ReadPreferenceLike\n    | {\n        mode?: ReadPreferenceMode;\n        preference?: ReadPreferenceMode;\n        tags?: TagSet[];\n        maxStalenessSeconds?: number;\n      };\n}\n\n/** @public */\nexport interface ReadPreferenceFromOptions extends ReadPreferenceLikeOptions {\n  session?: ClientSession;\n  readPreferenceTags?: TagSet[];\n  hedge?: HedgeOptions;\n}\n\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/core/read-preference/\n */\nexport class ReadPreference {\n  mode: ReadPreferenceMode;\n  tags?: TagSet[];\n  hedge?: HedgeOptions;\n  maxStalenessSeconds?: number;\n  minWireVersion?: number;\n\n  public static PRIMARY = ReadPreferenceMode.primary;\n  public static PRIMARY_PREFERRED = ReadPreferenceMode.primaryPreferred;\n  public static SECONDARY = ReadPreferenceMode.secondary;\n  public static SECONDARY_PREFERRED = ReadPreferenceMode.secondaryPreferred;\n  public static NEAREST = ReadPreferenceMode.nearest;\n\n  public static primary = new ReadPreference(ReadPreferenceMode.primary);\n  public static primaryPreferred = new ReadPreference(ReadPreferenceMode.primaryPreferred);\n  public static secondary = new ReadPreference(ReadPreferenceMode.secondary);\n  public static secondaryPreferred = new ReadPreference(ReadPreferenceMode.secondaryPreferred);\n  public static nearest = new ReadPreference(ReadPreferenceMode.nearest);\n\n  /**\n   * @param mode - A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n   * @param tags - A tag set used to target reads to members with the specified tag(s). tagSet is not available if using read preference mode primary.\n   * @param options - Additional read preference options\n   */\n  constructor(mode: ReadPreferenceMode, tags?: TagSet[], options?: ReadPreferenceOptions) {\n    if (!ReadPreference.isValid(mode)) {\n      throw new MongoInvalidArgumentError(`Invalid read preference mode ${JSON.stringify(mode)}`);\n    }\n    if (options == null && typeof tags === 'object' && !Array.isArray(tags)) {\n      options = tags;\n      tags = undefined;\n    } else if (tags && !Array.isArray(tags)) {\n      throw new MongoInvalidArgumentError('ReadPreference tags must be an array');\n    }\n\n    this.mode = mode;\n    this.tags = tags;\n    this.hedge = options?.hedge;\n    this.maxStalenessSeconds = undefined;\n    this.minWireVersion = undefined;\n\n    options = options ?? {};\n    if (options.maxStalenessSeconds != null) {\n      if (options.maxStalenessSeconds <= 0) {\n        throw new MongoInvalidArgumentError('maxStalenessSeconds must be a positive integer');\n      }\n\n      this.maxStalenessSeconds = options.maxStalenessSeconds;\n\n      // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n      //       topology has a lower value then a MongoError will be thrown during server selection.\n      this.minWireVersion = 5;\n    }\n\n    if (this.mode === ReadPreference.PRIMARY) {\n      if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n        throw new MongoInvalidArgumentError('Primary read preference cannot be combined with tags');\n      }\n\n      if (this.maxStalenessSeconds) {\n        throw new MongoInvalidArgumentError(\n          'Primary read preference cannot be combined with maxStalenessSeconds'\n        );\n      }\n\n      if (this.hedge) {\n        throw new MongoInvalidArgumentError(\n          'Primary read preference cannot be combined with hedge'\n        );\n      }\n    }\n  }\n\n  // Support the deprecated `preference` property introduced in the porcelain layer\n  get preference(): ReadPreferenceMode {\n    return this.mode;\n  }\n\n  static fromString(mode: string): ReadPreference {\n    return new ReadPreference(mode as ReadPreferenceMode);\n  }\n\n  /**\n   * Construct a ReadPreference given an options object.\n   *\n   * @param options - The options object from which to extract the read preference.\n   */\n  static fromOptions(options?: ReadPreferenceFromOptions): ReadPreference | undefined {\n    if (!options) return;\n    const readPreference =\n      options.readPreference ?? options.session?.transaction.options.readPreference;\n    const readPreferenceTags = options.readPreferenceTags;\n\n    if (readPreference == null) {\n      return;\n    }\n\n    if (typeof readPreference === 'string') {\n      return new ReadPreference(readPreference, readPreferenceTags, {\n        maxStalenessSeconds: options.maxStalenessSeconds,\n        hedge: options.hedge\n      });\n    } else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n      const mode = readPreference.mode || readPreference.preference;\n      if (mode && typeof mode === 'string') {\n        return new ReadPreference(mode, readPreference.tags ?? readPreferenceTags, {\n          maxStalenessSeconds: readPreference.maxStalenessSeconds,\n          hedge: options.hedge\n        });\n      }\n    }\n\n    if (readPreferenceTags) {\n      readPreference.tags = readPreferenceTags;\n    }\n\n    return readPreference as ReadPreference;\n  }\n\n  /**\n   * Replaces options.readPreference with a ReadPreference instance\n   */\n  static translate(options: ReadPreferenceLikeOptions): ReadPreferenceLikeOptions {\n    if (options.readPreference == null) return options;\n    const r = options.readPreference;\n\n    if (typeof r === 'string') {\n      options.readPreference = new ReadPreference(r);\n    } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n      const mode = r.mode || r.preference;\n      if (mode && typeof mode === 'string') {\n        options.readPreference = new ReadPreference(mode, r.tags, {\n          maxStalenessSeconds: r.maxStalenessSeconds\n        });\n      }\n    } else if (!(r instanceof ReadPreference)) {\n      throw new MongoInvalidArgumentError(`Invalid read preference: ${r}`);\n    }\n\n    return options;\n  }\n\n  /**\n   * Validate if a mode is legal\n   *\n   * @param mode - The string representing the read preference mode.\n   */\n  static isValid(mode: string): boolean {\n    const VALID_MODES = new Set([\n      ReadPreference.PRIMARY,\n      ReadPreference.PRIMARY_PREFERRED,\n      ReadPreference.SECONDARY,\n      ReadPreference.SECONDARY_PREFERRED,\n      ReadPreference.NEAREST,\n      null\n    ]);\n\n    return VALID_MODES.has(mode as ReadPreferenceMode);\n  }\n\n  /**\n   * Validate if a mode is legal\n   *\n   * @param mode - The string representing the read preference mode.\n   */\n  isValid(mode?: string): boolean {\n    return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n  }\n\n  /**\n   * Indicates that this readPreference needs the \"SecondaryOk\" bit when sent over the wire\n   * @see https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#op-query\n   */\n  secondaryOk(): boolean {\n    const NEEDS_SECONDARYOK = new Set<string>([\n      ReadPreference.PRIMARY_PREFERRED,\n      ReadPreference.SECONDARY,\n      ReadPreference.SECONDARY_PREFERRED,\n      ReadPreference.NEAREST\n    ]);\n\n    return NEEDS_SECONDARYOK.has(this.mode);\n  }\n\n  /**\n   * Check if the two ReadPreferences are equivalent\n   *\n   * @param readPreference - The read preference with which to check equality\n   */\n  equals(readPreference: ReadPreference): boolean {\n    return readPreference.mode === this.mode;\n  }\n\n  /** Return JSON representation */\n  toJSON(): Document {\n    const readPreference = { mode: this.mode } as Document;\n    if (Array.isArray(this.tags)) readPreference.tags = this.tags;\n    if (this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n    if (this.hedge) readPreference.hedge = this.hedge;\n    return readPreference;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}