{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OrderedBulkOperation = void 0;\nconst BSON = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst common_1 = require(\"./common\");\n/** @public */\nclass OrderedBulkOperation extends common_1.BulkOperationBase {\n  /** @internal */\n  constructor(collection, options) {\n    super(collection, options, true);\n  }\n  addToOperationsList(batchType, document) {\n    // Get the bsonSize\n    const bsonSize = BSON.calculateObjectSize(document, {\n      checkKeys: false,\n      // Since we don't know what the user selected for BSON options here,\n      // err on the safe side, and check the size with ignoreUndefined: false.\n      ignoreUndefined: false\n    });\n    // Throw error if the doc is bigger than the max BSON size\n    if (bsonSize >= this.s.maxBsonObjectSize)\n      // TODO(NODE-3483): Change this to MongoBSONError\n      throw new error_1.MongoInvalidArgumentError(\"Document is larger than the maximum size \".concat(this.s.maxBsonObjectSize));\n    // Create a new batch object if we don't have a current one\n    if (this.s.currentBatch == null) {\n      this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n    }\n    const maxKeySize = this.s.maxKeySize;\n    // Check if we need to create a new batch\n    if (\n    // New batch if we exceed the max batch op size\n    this.s.currentBatchSize + 1 >= this.s.maxWriteBatchSize ||\n    // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n    // since we can't sent an empty batch\n    this.s.currentBatchSize > 0 && this.s.currentBatchSizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes ||\n    // New batch if the new op does not have the same op type as the current batch\n    this.s.currentBatch.batchType !== batchType) {\n      // Save the batch to the execution stack\n      this.s.batches.push(this.s.currentBatch);\n      // Create a new batch\n      this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n      // Reset the current size trackers\n      this.s.currentBatchSize = 0;\n      this.s.currentBatchSizeBytes = 0;\n    }\n    if (batchType === common_1.BatchType.INSERT) {\n      this.s.bulkResult.insertedIds.push({\n        index: this.s.currentIndex,\n        _id: document._id\n      });\n    }\n    // We have an array of documents\n    if (Array.isArray(document)) {\n      throw new error_1.MongoInvalidArgumentError('Operation passed in cannot be an Array');\n    }\n    this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n    this.s.currentBatch.operations.push(document);\n    this.s.currentBatchSize += 1;\n    this.s.currentBatchSizeBytes += maxKeySize + bsonSize;\n    this.s.currentIndex += 1;\n    return this;\n  }\n}\nexports.OrderedBulkOperation = OrderedBulkOperation;","map":{"version":3,"names":["BSON","require","error_1","common_1","OrderedBulkOperation","BulkOperationBase","constructor","collection","options","addToOperationsList","batchType","document","bsonSize","calculateObjectSize","checkKeys","ignoreUndefined","s","maxBsonObjectSize","MongoInvalidArgumentError","concat","currentBatch","Batch","currentIndex","maxKeySize","currentBatchSize","maxWriteBatchSize","currentBatchSizeBytes","maxBatchSizeBytes","batches","push","BatchType","INSERT","bulkResult","insertedIds","index","_id","Array","isArray","originalIndexes","operations","exports"],"sources":["/Users/Regan/Documents/GitHub/BadBank/node_modules/mongodb/src/bulk/ordered.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport * as BSON from '../bson';\nimport type { Collection } from '../collection';\nimport { MongoInvalidArgumentError } from '../error';\nimport type { DeleteStatement } from '../operations/delete';\nimport type { UpdateStatement } from '../operations/update';\nimport { Batch, BatchType, BulkOperationBase, type BulkWriteOptions } from './common';\n\n/** @public */\nexport class OrderedBulkOperation extends BulkOperationBase {\n  /** @internal */\n  constructor(collection: Collection, options: BulkWriteOptions) {\n    super(collection, options, true);\n  }\n\n  addToOperationsList(\n    batchType: BatchType,\n    document: Document | UpdateStatement | DeleteStatement\n  ): this {\n    // Get the bsonSize\n    const bsonSize = BSON.calculateObjectSize(document, {\n      checkKeys: false,\n      // Since we don't know what the user selected for BSON options here,\n      // err on the safe side, and check the size with ignoreUndefined: false.\n      ignoreUndefined: false\n    } as any);\n\n    // Throw error if the doc is bigger than the max BSON size\n    if (bsonSize >= this.s.maxBsonObjectSize)\n      // TODO(NODE-3483): Change this to MongoBSONError\n      throw new MongoInvalidArgumentError(\n        `Document is larger than the maximum size ${this.s.maxBsonObjectSize}`\n      );\n\n    // Create a new batch object if we don't have a current one\n    if (this.s.currentBatch == null) {\n      this.s.currentBatch = new Batch(batchType, this.s.currentIndex);\n    }\n\n    const maxKeySize = this.s.maxKeySize;\n\n    // Check if we need to create a new batch\n    if (\n      // New batch if we exceed the max batch op size\n      this.s.currentBatchSize + 1 >= this.s.maxWriteBatchSize ||\n      // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n      // since we can't sent an empty batch\n      (this.s.currentBatchSize > 0 &&\n        this.s.currentBatchSizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes) ||\n      // New batch if the new op does not have the same op type as the current batch\n      this.s.currentBatch.batchType !== batchType\n    ) {\n      // Save the batch to the execution stack\n      this.s.batches.push(this.s.currentBatch);\n\n      // Create a new batch\n      this.s.currentBatch = new Batch(batchType, this.s.currentIndex);\n\n      // Reset the current size trackers\n      this.s.currentBatchSize = 0;\n      this.s.currentBatchSizeBytes = 0;\n    }\n\n    if (batchType === BatchType.INSERT) {\n      this.s.bulkResult.insertedIds.push({\n        index: this.s.currentIndex,\n        _id: (document as Document)._id\n      });\n    }\n\n    // We have an array of documents\n    if (Array.isArray(document)) {\n      throw new MongoInvalidArgumentError('Operation passed in cannot be an Array');\n    }\n\n    this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n    this.s.currentBatch.operations.push(document);\n    this.s.currentBatchSize += 1;\n    this.s.currentBatchSizeBytes += maxKeySize + bsonSize;\n    this.s.currentIndex += 1;\n    return this;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}